<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  <subtitle>世界好大，修行好难</subtitle>
  <link href="https://onlyonemomo.github.io/atom.xml" rel="self"/>
  
  <link href="https://onlyonemomo.github.io/"/>
  <updated>2022-08-28T14:47:05.832Z</updated>
  <id>https://onlyonemomo.github.io/</id>
  
  <author>
    <name>onlyone Mo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java高级之动态SQL</title>
    <link href="https://onlyonemomo.github.io/2022/08/28/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/java%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%8A%A8%E6%80%81SQL/"/>
    <id>https://onlyonemomo.github.io/2022/08/28/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/java%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%8A%A8%E6%80%81SQL/</id>
    <published>2022-08-28T14:46:36.000Z</published>
    <updated>2022-08-28T14:47:05.832Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p><h3 id="一、动态SQL编写"><a href="#一、动态SQL编写" class="headerlink" title="一、动态SQL编写"></a>一、动态SQL编写</h3><p><strong>导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1、基础动态SQL"><a href="#1、基础动态SQL" class="headerlink" title="1、基础动态SQL"></a>1、基础动态SQL</h3><h5 id="pojo-实体类"><a href="#pojo-实体类" class="headerlink" title="pojo 实体类"></a>pojo 实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个类的对象用于保存user表中的数据(实体类)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday; <span class="comment">// 注意,使用java.sql.Date</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br></pre></td></tr></table></figure><h5 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h5><p>数据接口层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XxxMapper: 表示这个接口中的所有方法用于操作xxx表</span></span><br><span class="line"><span class="comment">// UserMapper: 表示这个接口中的所有方法用于操作user表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUsers</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id查询用户 uid: 用户id</span></span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增删改返回影响的行数,返回值可以写int或void</span></span><br><span class="line">    <span class="comment">// 根据id删除用户</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id修改用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(User u)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(User u)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyBatis多参数处理: 使用用户名个性别查询用户</span></span><br><span class="line">    <span class="comment">// MyBatis多参数方案1: 每个参数添加@Param注解</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectByCondition</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;sex&quot;)</span> String sex)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyBatis多参数方案2: 传入自定义类</span></span><br><span class="line">    <span class="comment">// List&lt;User&gt; selectByCondition(User u);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyBatis多参数方案3: 传入Map, #&#123;键&#125;, 取出map的值</span></span><br><span class="line">    <span class="comment">// List&lt;User&gt; selectByCondition(Map&lt;String, String&gt; map);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id批量删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> <span class="type">int</span>[] ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态SQL编写"><a href="#动态SQL编写" class="headerlink" title="动态SQL编写"></a>动态SQL编写</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.onlyone.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select标签: 配置查询的SQL语句</span></span><br><span class="line"><span class="comment">            id属性: 配置接口中的方法名</span></span><br><span class="line"><span class="comment">            resultType: 配置接口中方法的返回值类型, 如果是集合不需要要集合,写集合泛型的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--#&#123;参数名&#125;: 1.先使用?占位, 把参数的值赋值给?     SELECT * FROM user WHERE id=?;</span></span><br><span class="line"><span class="comment">        $&#123;参数名&#125;: 字符串拼接,可能有SQL注入,不建议      SELECT * FROM user WHERE id=1;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.onlyone.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id=$&#123;uid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增删改返回影响的行数,在映射文件里面不需要配置返回值--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--delete标签: 配置删除的SQL语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM user WHERE id=#&#123;uid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--update标签: 配置修改的SQL语句</span></span><br><span class="line"><span class="comment">        参数是类, #&#123;成员变量名&#125; 取出对象成员变量的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        UPDATE user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                username=#&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday!=null&quot;</span>&gt;</span></span><br><span class="line">                birthday=#&#123;birthday&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex!=null and sex!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                sex=#&#123;sex&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address!=null and address!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                address=#&#123;address&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        WHERE id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--insert标签: 配置添加的SQL语句</span></span><br><span class="line"><span class="comment">            useGeneratedKeys: 获取数据新增的主键</span></span><br><span class="line"><span class="comment">            keyProperty: 得到新增的主键放到类中哪个成员变量里面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO user VALUES (NULL, #&#123;username&#125;, #&#123;birthday&#125;, #&#123;sex&#125;, #&#123;address&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--MyBatis多参数处理: 使用用户名个性别查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.onlyone.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--test条件不需要写#&#123;&#125;,直接写参数名,就可以获取到参数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                username LIKE #&#123;username&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex!=null and sex!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                 AND sex=#&#123;sex&#125;;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql标签:抽取重复的SQL语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM USER WHERE id IN</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过id批量删除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM USER WHERE id IN</span><br><span class="line">        <span class="comment">&lt;!--我们的目标是拼接出:  (1, 2, 5);</span></span><br><span class="line"><span class="comment">            foreach标签: 遍历数组</span></span><br><span class="line"><span class="comment">                collection属性: 要遍历的数组或集合</span></span><br><span class="line"><span class="comment">                item属性: 取个名字,保存遍历到的元素</span></span><br><span class="line"><span class="comment">                open属性: 遍历前添加的数据</span></span><br><span class="line"><span class="comment">                separator属性: 每个元素后添加的数据</span></span><br><span class="line"><span class="comment">                close属性: 遍历后添加的数据</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;);&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、进阶动态SQL"><a href="#2、进阶动态SQL" class="headerlink" title="2、进阶动态SQL"></a>2、进阶动态SQL</h3><p>pojo 实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个类的对象用于保存order表中的数据</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> oId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> Timestamp createTime; <span class="comment">// java.sql.Timestamp对应数据中的DATETIME</span></span><br><span class="line">    <span class="keyword">private</span> String note;</span><br></pre></td></tr></table></figure><h5 id="dao层-1"><a href="#dao层-1" class="headerlink" title="dao层"></a>dao层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OrderMapper: 表示这个接口中的所有方法用于操作order表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有的订单</span></span><br><span class="line">    List&lt;Order&gt; <span class="title function_">findAllOrders</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态SQL编写-1"><a href="#动态SQL编写-1" class="headerlink" title="动态SQL编写"></a>动态SQL编写</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.onlyone.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--resultMap标签: 手动指定表中的字段名对应类中哪个成员变量</span></span><br><span class="line"><span class="comment">            id属性: 取个名字</span></span><br><span class="line"><span class="comment">            type属性: 查询的数据要封装的类型</span></span><br><span class="line"><span class="comment">            id子标签: 指定主键的对应关系</span></span><br><span class="line"><span class="comment">            result子标签: 指定普通字段的对应关系</span></span><br><span class="line"><span class="comment">                column属性: 表中的字段名</span></span><br><span class="line"><span class="comment">                property属性: 类中的成员变量名</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;OrderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;o_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;oId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        resultType属性: 表中字段名和类中成员变量相同使用resultType自动处理查询结果封装到对象中</span></span><br><span class="line"><span class="comment">        resultMap属性: 表中字段名和类中成员变量不相同使用, resultMap手动处理查询结果封装到对象中</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllOrders&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;OrderMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM `order`;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>可以开启驼峰命名自动映射数据库的_命名简化代码</strong></p></blockquote><p>补充说明：就不写实体类了, 有时间再继续补充</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis默认多表查询,表中字段名和类中成员变量名相同的也要执行  autoMapping=&quot;true&quot;: 相同的就可以不用指定,但是主键必须指定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注意: collection要配置在association下面,DTD约束的规定.</span></span><br><span class="line"><span class="comment">    一对一,一对多都可以使用association, collection语义更明确而已--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置一对一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserInfoMap&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一对多--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;OrderMap&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;List&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Role&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    useGeneratedKeys:true 表示获取主键值</span></span><br><span class="line"><span class="comment">    keyProperty=&quot;id&quot; 表示将主键值赋给哪个属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">useGeneratedKeys设置为true：在执行插入记录之后可以获取到数据库自动生成的主键值</span></span><br><span class="line"><span class="comment">keyProperty：指定Java对象的属性名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。&lt;/p&gt;</summary>
    
    
    
    <category term="通往java之路" scheme="https://onlyonemomo.github.io/categories/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot-整合Mybatis</title>
    <link href="https://onlyonemomo.github.io/2022/08/28/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/SpringBoot-%E6%95%B4%E5%90%88Mybatis/"/>
    <id>https://onlyonemomo.github.io/2022/08/28/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/SpringBoot-%E6%95%B4%E5%90%88Mybatis/</id>
    <published>2022-08-28T14:38:36.000Z</published>
    <updated>2022-08-28T14:39:39.083Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p><h3 id="图层结构介绍"><a href="#图层结构介绍" class="headerlink" title="图层结构介绍"></a>图层结构介绍</h3><p><img src="https://img-blog.csdnimg.cn/995c61c12ead4d66948a3966f61b29ac.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1、MySQL环境搭建"><a href="#1、MySQL环境搭建" class="headerlink" title="1、MySQL环境搭建"></a>1、MySQL环境搭建</h3><p><strong>创建表导入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;1-男，2-女&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1370649010551177219</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `tb_user`(`id`,`user_name`,`password`,`name`,`age`,`email`,`sex`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;test1@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;test2@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;test3@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">4</span>,<span class="string">&#x27;zhaoliu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;test4@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="string">&#x27;sunqi&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;孙七&#x27;</span>,<span class="number">24</span>,<span class="string">&#x27;test5@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">6</span>,<span class="string">&#x27;zhuge2&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;诸葛孔明2&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="2、引入mybatis启动器依赖-它依赖了jdbc启动器，jdbc启动器可以删除"><a href="#2、引入mybatis启动器依赖-它依赖了jdbc启动器，jdbc启动器可以删除" class="headerlink" title="2、引入mybatis启动器依赖(它依赖了jdbc启动器，jdbc启动器可以删除)"></a>2、引入mybatis启动器依赖(<strong>它依赖了jdbc启动器，jdbc启动器可以删除</strong>)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springmvc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--myabtis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、配置mybatis相关属性"><a href="#3、配置mybatis相关属性" class="headerlink" title="3、配置mybatis相关属性"></a>3、配置mybatis相关属性</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql:///springdb?useSSL=false</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  #别名扫描</span></span><br><span class="line">  <span class="attr">type-aliases-package</span>: <span class="string">com.onlyone.model</span></span><br><span class="line"><span class="comment">  #开启下划线与小驼峰映射</span></span><br><span class="line">  <span class="attr">configuration</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case</span>: <span class="string">true</span></span><br><span class="line"><span class="comment">    #打印sql的日志信息</span></span><br><span class="line">    <span class="attr">log-impl</span>: <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment"> #指定Mapper文件所在的位置 ,一旦指定不需要mapper.xml文件与类名同一个包文件名也可以不一样的。</span></span><br><span class="line">  <span class="attr">mapper-locations</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  #注意： classpath后面的:是没有空格的，</span></span><br><span class="line">    <span class="attr">-</span> <span class="string">classpath:mappers/*.xml</span></span><br></pre></td></tr></table></figure><h3 id="4、用户实体-User"><a href="#4、用户实体-User" class="headerlink" title="4、用户实体(User)"></a>4、用户实体(User)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">//id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age; <span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email; <span class="comment">//邮箱</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex; <span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、数据访问接口-UserMapper"><a href="#5、数据访问接口-UserMapper" class="headerlink" title="5、数据访问接口(UserMapper)"></a>5、数据访问接口(UserMapper)</h3><p>(1) dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.onlyone.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2) 在启动类上添加数据访问接口包扫描:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意： 使用mybatis的时候，这个springboot默认是不扫描dao接口的，两种解决方案：</span></span><br><span class="line"><span class="comment"> *      1. 每一个dao接口都添加一个<span class="doctag">@mapper</span>注解,不推荐，因为较为繁琐</span></span><br><span class="line"><span class="comment"> *      2. 在启动类中<span class="doctag">@MapperScan</span>注解扫描dao包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.onlyone.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>说明: 这种方式的好处是，不用给每一个Mapper都添加注解。采用@MapperScan包扫描方式只需要添加一次注解。</p></blockquote><h3 id="6、定义SQL语句-UserMapper-xml"><a href="#6、定义SQL语句-UserMapper-xml" class="headerlink" title="6、定义SQL语句(UserMapper.xml)"></a>6、定义SQL语句(UserMapper.xml)</h3><p><img src="https://img-blog.csdnimg.cn/be3c85f8e2a447dca1dab51cfc752144.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.onlyone.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7、业务层-UserService"><a href="#7、业务层-UserService" class="headerlink" title="7、业务层 (UserService)"></a>7、业务层 (UserService)</h3><p>定义一个service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.onlyone.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现该接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.onlyone.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.onlyone.model.User;</span><br><span class="line"><span class="keyword">import</span> com.onlyone.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、控制器-UserController"><a href="#8、控制器-UserController" class="headerlink" title="8、控制器 (UserController)"></a>8、控制器 (UserController)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.onlyone.model.User;</span><br><span class="line"><span class="keyword">import</span> com.onlyone.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt;findAll()&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、运行测试"><a href="#9、运行测试" class="headerlink" title="9、运行测试"></a>9、运行测试</h3><p><img src="https://img-blog.csdnimg.cn/5284729e90f2401c8dd17e4df33d57f2.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。&lt;/p&gt;</summary>
    
    
    
    <category term="通往java之路" scheme="https://onlyonemomo.github.io/categories/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>模块化之Redis设置营业状态</title>
    <link href="https://onlyonemomo.github.io/2022/08/28/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BRedis%E8%AE%BE%E7%BD%AE%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81/"/>
    <id>https://onlyonemomo.github.io/2022/08/28/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BRedis%E8%AE%BE%E7%BD%AE%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81/</id>
    <published>2022-08-28T14:35:56.000Z</published>
    <updated>2022-08-28T14:35:31.250Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p><h6 id="编写Redis配置类"><a href="#编写Redis配置类" class="headerlink" title="编写Redis配置类"></a>编写Redis配置类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis模板类...&quot;</span>);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="创建ShopService接口，声明设置营业状态和查询营业状态的方法"><a href="#创建ShopService接口，声明设置营业状态和查询营业状态的方法" class="headerlink" title="创建ShopService接口，声明设置营业状态和查询营业状态的方法"></a>创建ShopService接口，声明设置营业状态和查询营业状态的方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置店铺营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询店铺的营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">getStatus</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="创建ShopServiceImpl并实现ShopService接口"><a href="#创建ShopServiceImpl并实现ShopService接口" class="headerlink" title="创建ShopServiceImpl并实现ShopService接口"></a>创建ShopServiceImpl并实现ShopService接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;SHOP:STATUS&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置店铺营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(KEY,status);</span><br><span class="line">        log.info(<span class="string">&quot;设置营业状态为:&#123;&#125;&quot;</span>,status == <span class="number">1</span> ? <span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取店铺营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="创建ShopController，并根据接口定义创建相应的方法"><a href="#创建ShopController，并根据接口定义创建相应的方法" class="headerlink" title="创建ShopController，并根据接口定义创建相应的方法"></a>创建ShopController，并根据接口定义创建相应的方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;adminShopController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;admin/shop&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;店铺操作相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShopService shopService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置店铺营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;设置店铺营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">setStatus</span><span class="params">(<span class="meta">@PathVariable</span> Integer status)</span>&#123;</span><br><span class="line">        shopService.setStatus(status);</span><br><span class="line">        <span class="keyword">return</span> R.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> shopService.getStatus();</span><br><span class="line">            <span class="keyword">return</span> R.success(status);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> R.success(StatusConstant.ENABLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：记得在配置文件里面配置redis</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="项目模块化" scheme="https://onlyonemomo.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
    <category term="模块化" scheme="https://onlyonemomo.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>模块化之PageHelper.startPage</title>
    <link href="https://onlyonemomo.github.io/2022/08/28/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BPageHelper.startPage/"/>
    <id>https://onlyonemomo.github.io/2022/08/28/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BPageHelper.startPage/</id>
    <published>2022-08-28T14:31:56.000Z</published>
    <updated>2022-08-28T14:31:58.626Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p><p>PageHelper是MyBatis的分页插件，它能够帮助我们快速且简洁的实现分页功能。传统的分页都需要我们程序员手动在sql语句里写LIMIT语句，而PageHelper这个插件能够帮助我们过滤sql，自动添加LIMIT语句，使得sql语句看上去更加简洁，具体实现方法如下（注意：PageHelper必须在sql语句前使用，否则过滤无效）</p><p>例句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步 PageHelper.startPage  获取当前页数,每页的内容数量</span></span><br><span class="line">PageHelper.startPage((<span class="type">int</span>)分页的页数, （<span class="type">int</span>）每个分页的内容数量);</span><br><span class="line"><span class="comment">//第二步sql语句具体实现</span></span><br><span class="line"><span class="comment">// 第三步返回数据给表示层(看接口需要返回什么数据)</span></span><br></pre></td></tr></table></figure><p>某个分页查询的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> //employeePageQueryDTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(EmployeePageQueryDTO pageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="comment">//select * from employee limit 10,20</span></span><br><span class="line">    <span class="comment">//基于PageHelper插件实现动态分页查询</span></span><br><span class="line">    PageHelper.startPage(pageQueryDTO.getPage(),pageQueryDTO.getPageSize());</span><br><span class="line"></span><br><span class="line">    Page&lt;Employee&gt; page = employeeMapper.pageQuery(pageQueryDTO);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(),page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="项目模块化" scheme="https://onlyonemomo.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
    <category term="模块化" scheme="https://onlyonemomo.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>模块化之校验JWT令牌</title>
    <link href="https://onlyonemomo.github.io/2022/08/28/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BJWT%E6%A0%A1%E9%AA%8C/"/>
    <id>https://onlyonemomo.github.io/2022/08/28/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BJWT%E6%A0%A1%E9%AA%8C/</id>
    <published>2022-08-28T14:28:56.000Z</published>
    <updated>2022-08-28T14:28:56.873Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p><p>实现思路梳理：</p><h5 id="1、前端请求后端接口，在请求头中携带JWT令牌"><a href="#1、前端请求后端接口，在请求头中携带JWT令牌" class="headerlink" title="1、前端请求后端接口，在请求头中携带JWT令牌"></a>1、前端请求后端接口，在请求头中携带JWT令牌</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建jwt令牌  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(<span class="string">&quot;itcast&quot;</span>,<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>, claims);</span><br></pre></td></tr></table></figure><h6 id="图1："><a href="#图1：" class="headerlink" title="图1："></a>图1：</h6><p><img src="https://img-blog.csdnimg.cn/a7852227ca074b3786a9d7303894b0d0.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录成功,生成JWT令牌</span></span><br><span class="line">Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">claims.put(JwtClaimsConstant.EMP_ID,employee.getId());  <span class="comment">//claims（key,value）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(</span><br><span class="line">    jwtProperties.getAdminSecretKey(),</span><br><span class="line">    jwtProperties.getAdminTtl(),</span><br><span class="line">    claims);</span><br></pre></td></tr></table></figure><p>2、后端通过拦截器统一进行JWT令牌校验</p><h6 id="创建拦截器"><a href="#创建拦截器" class="headerlink" title="创建拦截器"></a>创建拦截器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt令牌校验的拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenAdminInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;jwt校验...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、从请求头获取令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getAdminTokenName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验失败会抛异常，需要自定义处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2、校验令牌</span></span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);</span><br><span class="line">            <span class="comment">//获取当前员工登录的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());</span><br><span class="line">            <span class="comment">//保存当前登录员工的到线程本地变量</span></span><br><span class="line">            BaseContext.setCurrentId(empId);</span><br><span class="line">            <span class="comment">//3、通知，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//4、不通过，响应401状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，注册Web层相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenAdminInterceptor jwtTokenAdminInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器:&#123;&#125;&quot;</span>, jwtTokenAdminInterceptor);</span><br><span class="line">        registry.addInterceptor(jwtTokenAdminInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/admin/employee/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类"></a>JWT工具类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     * 使用Hs256算法, 私匙使用固定秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis jwt过期时间(毫秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims    设置的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String secretKey, <span class="type">long</span> ttlMillis, Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定签名的时候使用的签名算法，也就是header那部分</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> System.currentTimeMillis() + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">// 设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置过期时间</span></span><br><span class="line">                .setExpiration(exp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Token解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     加密后的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String secretKey, String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 得到DefaultJwtParser</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置需要解析的jwt</span></span><br><span class="line">                .parseClaimsJws(token).getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="项目模块化" scheme="https://onlyonemomo.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
    <category term="模块化" scheme="https://onlyonemomo.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JWT工具类</title>
    <link href="https://onlyonemomo.github.io/2022/08/28/%E5%B7%A5%E5%85%B7%E7%B1%BB/JWT%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://onlyonemomo.github.io/2022/08/28/%E5%B7%A5%E5%85%B7%E7%B1%BB/JWT%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
    <published>2022-08-28T13:56:51.000Z</published>
    <updated>2022-08-28T14:13:38.938Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：在《娱乐至死》里面两个著名的预言：奥威尔害怕的是真理被隐瞒，赫胥黎担心的是真理被淹没在无聊烦琐的世事中。在互联网的世界里，我们恰恰走向了赫胥黎式的预言，有时候百度两小时，有效资讯五分钟。在工具类这个栏目，我想收集一些常用的Utils，以免书到用时方恨少的尴尬！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     * 使用Hs256算法, 私匙使用固定秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis jwt过期时间(毫秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims    设置的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String secretKey, <span class="type">long</span> ttlMillis, Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定签名的时候使用的签名算法，也就是header那部分</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> System.currentTimeMillis() + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">// 设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置过期时间</span></span><br><span class="line">                .setExpiration(exp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Token解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     加密后的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String secretKey, String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 得到DefaultJwtParser</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置需要解析的jwt</span></span><br><span class="line">                .parseClaimsJws(token).getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：在《娱乐至死》里面两个著名的预言：奥威尔害怕的是真理被隐瞒，赫胥黎担心的是真理被淹没在无聊烦琐的世事中。在互联网的世界里，我们恰恰走向了赫胥黎式的预言，有时候百度两小时，有效资讯五分钟。在工具类这个栏目，我想收集一些常用的Utils，以免书到用时方恨少的尴尬！&lt;/p&gt;</summary>
    
    
    
    <category term="工具类" scheme="https://onlyonemomo.github.io/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
    <category term="Util" scheme="https://onlyonemomo.github.io/tags/Util/"/>
    
  </entry>
  
  <entry>
    <title>UUID工具类</title>
    <link href="https://onlyonemomo.github.io/2022/08/28/%E5%B7%A5%E5%85%B7%E7%B1%BB/UUID%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://onlyonemomo.github.io/2022/08/28/%E5%B7%A5%E5%85%B7%E7%B1%BB/UUID%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
    <published>2022-08-28T13:56:51.000Z</published>
    <updated>2022-08-28T14:12:39.774Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：在《娱乐至死》里面两个著名的预言：奥威尔害怕的是真理被隐瞒，赫胥黎担心的是真理被淹没在无聊烦琐的世事中。在互联网的世界里，我们恰恰走向了赫胥黎式的预言，有时候百度两小时，有效资讯五分钟。在工具类这个栏目，我想收集一些常用的Utils，以免书到用时方恨少的尴尬！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UUIDUtils</span> &#123;</span><br><span class="line">    <span class="comment">//字符库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] chars = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>,</span><br><span class="line">            <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>,</span><br><span class="line">            <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>,</span><br><span class="line">            <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>,</span><br><span class="line">            <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUUID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用Java提供的生成随机字符串的对象：32位，十六进制，中间包含-</span></span><br><span class="line">        String uuid= UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">shortBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123; <span class="comment">//分为8组</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> uuid.substring(i * <span class="number">4</span>, i * <span class="number">4</span> + <span class="number">4</span>); <span class="comment">//每组4位</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(str, <span class="number">16</span>); <span class="comment">//输出str在16进制下的表示</span></span><br><span class="line">            shortBuffer.append(chars[x % <span class="number">0x3E</span>]); <span class="comment">//用该16进制数取模62（十六进制表示为314（14即E）），结果作为索引取出字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shortBuffer.toString();<span class="comment">//生成8位字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：在《娱乐至死》里面两个著名的预言：奥威尔害怕的是真理被隐瞒，赫胥黎担心的是真理被淹没在无聊烦琐的世事中。在互联网的世界里，我们恰恰走向了赫胥黎式的预言，有时候百度两小时，有效资讯五分钟。在工具类这个栏目，我想收集一些常用的Utils，以免书到用时方恨少的尴尬！&lt;/p&gt;</summary>
    
    
    
    <category term="工具类" scheme="https://onlyonemomo.github.io/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
    <category term="Util" scheme="https://onlyonemomo.github.io/tags/Util/"/>
    
  </entry>
  
  <entry>
    <title>Swagger文档生成操作SOP</title>
    <link href="https://onlyonemomo.github.io/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/Swagger%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E6%93%8D%E4%BD%9CSOP/"/>
    <id>https://onlyonemomo.github.io/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/Swagger%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E6%93%8D%E4%BD%9CSOP/</id>
    <published>2022-08-27T14:31:51.000Z</published>
    <updated>2022-08-27T14:31:37.498Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><h3 id="1、Swagger是什么？"><a href="#1、Swagger是什么？" class="headerlink" title="1、Swagger是什么？"></a>1、Swagger是什么？</h3><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><h6 id="Swagger的作用："><a href="#Swagger的作用：" class="headerlink" title="Swagger的作用："></a>Swagger的作用：</h6><blockquote><p><strong>使用Swagger你只需要按照它的规范去定义接口及接口相关的信息，就可以做到生成接口文档，以及在线接口调试页面。</strong></p></blockquote><h3 id="2、Swagger如何生成"><a href="#2、Swagger如何生成" class="headerlink" title="2、Swagger如何生成?"></a>2、Swagger如何生成?</h3><h5 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h5><blockquote><p><strong>1、导入knife4j的maven坐标</strong><br><strong>2、在配置类中加入knife4j相关配置</strong><br><strong>3、设置静态资源，否则接口文档页面无法访问</strong></p></blockquote><h5 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-模板代码"><a href="#2-2-模板代码" class="headerlink" title="2.2 模板代码"></a>2.2 模板代码</h5><h6 id="在配置类中加入knife4j相关配置"><a href="#在配置类中加入knife4j相关配置" class="headerlink" title="在配置类中加入knife4j相关配置"></a>在配置类中加入knife4j相关配置</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//指定生成接口需要扫描的包</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;#全包名&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射，主要是访问接口文档（html、js、css）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始设置静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>温馨提示</strong>：需要指定扫描的包，一般扫描的是controller这个包</p><h6 id="在拦截器中放行静态资源文件"><a href="#在拦截器中放行静态资源文件" class="headerlink" title="在拦截器中放行静态资源文件"></a>在拦截器中放行静态资源文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断当前拦截到的是Controller的方法还是其他资源</span></span><br><span class="line"><span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">    <span class="comment">//当前拦截到的不是动态方法，直接放行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-访问"><a href="#2-3-访问" class="headerlink" title="2.3 访问"></a>2.3 访问</h5><blockquote><p>接口文档访问路径为 <a href="http://ip:port/doc.html">http://ip:port/doc.html</a></p></blockquote><p>举例：<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p><p><img src="https://img-blog.csdnimg.cn/b9fe8ee3aef649cbbdea0018de3788a5.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>Redis下载与安装SOP</title>
    <link href="https://onlyonemomo.github.io/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/Redis%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85SOP/"/>
    <id>https://onlyonemomo.github.io/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/Redis%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85SOP/</id>
    <published>2022-08-27T14:25:51.000Z</published>
    <updated>2022-08-27T14:25:47.098Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><h4 id="1-Redis下载"><a href="#1-Redis下载" class="headerlink" title="1 Redis下载"></a>1 Redis下载</h4><p>Redis安装包分为windows版和Linux版：</p><ul><li>Windows版下载地址：<a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></li><li>Linux版下载地址： <a href="https://download.redis.io/releases/">https://download.redis.io/releases/</a></li></ul><p>下载后得到下面安装包：<br><img src="https://img-blog.csdnimg.cn/96130bb65dbc4256a4dc1462fa14c8c4.png#pic_center" alt="在这里插入图片描述"></p><h4 id="2-Redis安装"><a href="#2-Redis安装" class="headerlink" title="2 Redis安装"></a>2 Redis安装</h4><p>Redis的Windows版属于绿色软件，直接解压即可使用，解压后目录结构如下：<br><img src="https://img-blog.csdnimg.cn/5669fe80b39c499fa25054c96a8e1bf8.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-Redis服务启动与停止"><a href="#3-Redis服务启动与停止" class="headerlink" title="3 Redis服务启动与停止"></a>3 Redis服务启动与停止</h3><p>Windows系统中启动Redis：<strong>redis-server.exe redis.windows.conf</strong>，redis服务默认端口号为6379<br><strong>温馨提示：</strong>powershell窗口是要在Redis文件里面按shift+鼠标左键，也可以用cmd命令窗口</p><p><img src="https://img-blog.csdnimg.cn/d41d204818e54d469d01087638121fbc.png#pic_center" alt="在这里插入图片描述"></p><p>Ctrl + C停止Redis服务</p><p>双击 redis-cli.exe 即可启动 Redis 客户端，默认连接的是本地的 Redis 服务，而且不需要认证即可连接成功。</p><p><img src="https://img-blog.csdnimg.cn/9675fa54a19b435f8f800f745addc15f.png#pic_center" alt="在这里插入图片描述"></p><p>退出客户端可以输入 exit 或者 quit 命令。</p><h3 id="4-Redis配置文件"><a href="#4-Redis配置文件" class="headerlink" title="4 Redis配置文件"></a>4 Redis配置文件</h3><p>前面我们已经启动了Redis服务，默认情况下Redis启动后是在前台运行，而且客户端不需要密码就可以连接到Redis服务。如果我们希望Redis服务启动后是在后台运行，同时希望客户端认证通过后才能连接到Redis服务，应该如果做呢？</p><p>此时就需要修改Redis的配置文件：REDIS_HOME&#x2F;redis.windows.conf</p><p><strong>通过修改Redis配置文件可以进行如下配置：</strong></p><p><strong>1）</strong>设置Redis服务密码</p><p>​将配置文件中的 # requirepass foobared配置项取消注释，默认为注释状态。foobared为密码，可以根据情况自己指定。</p><p><strong>2）</strong>设置允许客户端远程连接Redis服务</p><p>​Redis服务默认只能客户端本地连接，不允许客户端远程连接。将配置文件中的 bind 127.0.0.1配置项注释掉。</p><p><strong>解释说明：</strong></p><blockquote><p>Redis配置文件中 #表示注释</p><p>Redis配置文件中的配置项前面不能有空格，需要顶格写</p><p>requirepass：设置Redis的连接密码</p><p>bind：如果指定了bind，则说明只允许来自指定网卡的Redis请求。如果没有指定，就说明可以接受来自任意一个网卡的Redis请求。</p></blockquote><p><strong>注意</strong>：修改配置文件后需要重启Redis服务配置才能生效：</p><p><img src="https://img-blog.csdnimg.cn/9a9d92dab21542ca86cea02a2613cf77.png#pic_center" alt="在这里插入图片描述"></p><p>由于Redis配置文件中开启了认证校验，即客户端连接时需要提供密码，此时客户端连接方式变为：</p><p><img src="https://img-blog.csdnimg.cn/ee8033255c8c4e918ce0652849f3f83e.png#pic_center" alt="在这里插入图片描述"></p><p><strong>解释说明：</strong></p><blockquote><p>-h：指定连接的Redis服务的ip地址</p><p>-p：指定连接的Redis服务的端口号</p><p>-a：指定连接的Redis服务的密码</p></blockquote><p>为了方便客户端操作，可以使用Redis的客户端工具：ARDM</p><blockquote><p>-p：指定连接的Redis服务的端口号</p><p>-a：指定连接的Redis服务的密码</p></blockquote><p>为了方便客户端操作，可以使用Redis的客户端工具：ARDM</p><p><img src="https://img-blog.csdnimg.cn/312eb8604cef457ea679cb34193f3c90.png#pic_center" alt="在这里插入图片描述"></p><h3 id="5、redis注册成windows服务"><a href="#5、redis注册成windows服务" class="headerlink" title="5、redis注册成windows服务"></a>5、redis注册成windows服务</h3><p>注册成windows服务自启动来开机自启<br>在redis的目录里面打开cmd,输入命令出现下方图片就注册成功了<br><img src="https://img-blog.csdnimg.cn/65a1398016a749a089e2df19113de6d0.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server --service-install redis.windows.conf</span><br></pre></td></tr></table></figure><p>这个时候我们可以去服务里面找到它，可以手动开启服务！<br><img src="https://img-blog.csdnimg.cn/5d5db57da82747bea7663cfd93f46f1c.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>IDEA之自定义模板SOP</title>
    <link href="https://onlyonemomo.github.io/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/IDEA%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BFSOP/"/>
    <id>https://onlyonemomo.github.io/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/IDEA%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BFSOP/</id>
    <published>2022-08-27T14:21:51.000Z</published>
    <updated>2022-08-27T14:22:09.237Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><h6 id="自定义模板可以把复杂重复的代码放进去，加快我们程序员的开发效率。"><a href="#自定义模板可以把复杂重复的代码放进去，加快我们程序员的开发效率。" class="headerlink" title="自定义模板可以把复杂重复的代码放进去，加快我们程序员的开发效率。"></a>自定义模板可以把复杂重复的代码放进去，加快我们程序员的开发效率。</h6><p>图1：<br><img src="https://img-blog.csdnimg.cn/9e8ba730427b464f8af8dfdc65fc9df3.png#pic_center" alt="在这里插入图片描述"></p><p>图2：<br><img src="https://img-blog.csdnimg.cn/ef0c2b4c60284c069a96fff17c17dd6f.png#pic_center" alt="在这里插入图片描述"></p><p>图3：<br><img src="https://img-blog.csdnimg.cn/97342d856bb54f62bbcbb0e0ba96a8da.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>阿里云对象存储OSS操作SOP</title>
    <link href="https://onlyonemomo.github.io/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8OSS%E6%93%8D%E4%BD%9CSOP/"/>
    <id>https://onlyonemomo.github.io/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8OSS%E6%93%8D%E4%BD%9CSOP/</id>
    <published>2022-08-27T14:16:51.000Z</published>
    <updated>2022-08-27T14:17:29.724Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>阿里云对象存储OSS（Object Storage Service）是一款海量、安全、低成本、高可靠的云存储服务，提供99.9999999999%(12个9)的数据持久性，99.995%的数据可用性。多种存储类型供选择，全面优化存储成本。</p><p>阿里云网址：<code>https://www.aliyun.com/</code></p><h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h4><blockquote><p>1、注册阿里云账号<br>2、创建bucket<br>3、创建AccessKeyId和AccessKeySecret<br>4、添加权限<br>5、参考示例</p></blockquote><h5 id="1-1-注册阿里云账号"><a href="#1-1-注册阿里云账号" class="headerlink" title="1.1 注册阿里云账号"></a>1.1 注册阿里云账号</h5><p>直接去阿里云官网注册即可！</p><h5 id="1-2-创建bucket"><a href="#1-2-创建bucket" class="headerlink" title="1.2 创建bucket"></a>1.2 创建bucket</h5><blockquote><p><strong>建议直接输入路径进入此页面</strong><br><img src="https://img-blog.csdnimg.cn/50c49912af1a4b00bb724ffcbb5244d0.png#pic_center" alt="在这里插入图片描述"></p></blockquote><h5 id="1-3-创建AccessKeyId和AccessKeySecret"><a href="#1-3-创建AccessKeyId和AccessKeySecret" class="headerlink" title="1.3 创建AccessKeyId和AccessKeySecret"></a>1.3 创建AccessKeyId和AccessKeySecret</h5><h6 id="图1："><a href="#图1：" class="headerlink" title="图1："></a>图1：</h6><p><img src="https://img-blog.csdnimg.cn/603d8f95974c4e299b198d7ac69fdcb2.png#pic_center" alt="在这里插入图片描述"></p><h6 id="图2："><a href="#图2：" class="headerlink" title="图2："></a>图2：</h6><p><img src="https://img-blog.csdnimg.cn/534dfc20e980402ba91d75ef002a81db.png#pic_center" alt="在这里插入图片描述"></p><h6 id="图3："><a href="#图3：" class="headerlink" title="图3："></a>图3：</h6><p><img src="https://img-blog.csdnimg.cn/d69b4786c67e4cb9af227a171e67a077.png#pic_center" alt="在这里插入图片描述"></p><h6 id="图4：记得复制-出来存放好"><a href="#图4：记得复制-出来存放好" class="headerlink" title="图4：记得复制 出来存放好"></a>图4：记得复制 出来存放好</h6><p><img src="https://img-blog.csdnimg.cn/2a8215e571b04abdbbd0a8f9d11dde08.png#pic_center" alt="在这里插入图片描述"></p><h5 id="1-4-添加权限"><a href="#1-4-添加权限" class="headerlink" title="1.4 添加权限"></a>1.4 添加权限</h5><h6 id="图5：-【AliyunOSSFullAccess】"><a href="#图5：-【AliyunOSSFullAccess】" class="headerlink" title="图5： 【AliyunOSSFullAccess】"></a>图5： 【AliyunOSSFullAccess】</h6><p><img src="https://img-blog.csdnimg.cn/9a3ec824b4b64c85b6cd7dbe0a5c8e5f.png#pic_center" alt="在这里插入图片描述"></p><h5 id="1-5-参考示例"><a href="#1-5-参考示例" class="headerlink" title="1.5 参考示例"></a>1.5 参考示例</h5><h6 id="图6："><a href="#图6：" class="headerlink" title="图6："></a>图6：</h6><p><img src="https://img-blog.csdnimg.cn/0c8d5153108b4fc7ab24d92285e45a01.png#pic_center" alt="在这里插入图片描述"><br><strong>参考实例</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>help.aliyun.com<span class="regexp">/document_detail/</span><span class="number">84781</span>.html</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>模块化之Swagger文档生成</title>
    <link href="https://onlyonemomo.github.io/2022/08/26/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BSwagger%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/"/>
    <id>https://onlyonemomo.github.io/2022/08/26/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BSwagger%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</id>
    <published>2022-08-26T12:40:56.000Z</published>
    <updated>2022-08-26T12:41:53.854Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p><h3 id="1、Swagger是什么？"><a href="#1、Swagger是什么？" class="headerlink" title="1、Swagger是什么？"></a>1、Swagger是什么？</h3><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><h6 id="Swagger的作用："><a href="#Swagger的作用：" class="headerlink" title="Swagger的作用："></a>Swagger的作用：</h6><blockquote><p><strong>使用Swagger你只需要按照它的规范去定义接口及接口相关的信息，就可以做到生成接口文档，以及在线接口调试页面。</strong></p></blockquote><h3 id="2、Swagger如何生成"><a href="#2、Swagger如何生成" class="headerlink" title="2、Swagger如何生成?"></a>2、Swagger如何生成?</h3><h5 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h5><blockquote><p><strong>1、导入knife4j的maven坐标</strong><br><strong>2、在配置类中加入knife4j相关配置</strong><br><strong>3、设置静态资源，否则接口文档页面无法访问</strong></p></blockquote><h5 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-模板代码"><a href="#2-2-模板代码" class="headerlink" title="2.2 模板代码"></a>2.2 模板代码</h5><h6 id="在配置类中加入knife4j相关配置"><a href="#在配置类中加入knife4j相关配置" class="headerlink" title="在配置类中加入knife4j相关配置"></a>在配置类中加入knife4j相关配置</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//指定生成接口需要扫描的包</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;#全包名&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射，主要是访问接口文档（html、js、css）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始设置静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>温馨提示</strong>：需要指定扫描的包，一般扫描的是controller这个包</p><h6 id="在拦截器中放行静态资源文件"><a href="#在拦截器中放行静态资源文件" class="headerlink" title="在拦截器中放行静态资源文件"></a>在拦截器中放行静态资源文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断当前拦截到的是Controller的方法还是其他资源</span></span><br><span class="line"><span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">    <span class="comment">//当前拦截到的不是动态方法，直接放行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-访问"><a href="#2-3-访问" class="headerlink" title="2.3 访问"></a>2.3 访问</h5><blockquote><p>接口文档访问路径为 <a href="http://ip:port/doc.html">http://ip:port/doc.html</a></p></blockquote><p>举例：<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p><p><img src="https://img-blog.csdnimg.cn/b9fe8ee3aef649cbbdea0018de3788a5.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="项目模块化" scheme="https://onlyonemomo.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
    <category term="模块化" scheme="https://onlyonemomo.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>自定义简单的Starter启动器</title>
    <link href="https://onlyonemomo.github.io/2022/08/26/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AE%80%E5%8D%95%E7%9A%84Starter%E5%90%AF%E5%8A%A8%E5%99%A8/"/>
    <id>https://onlyonemomo.github.io/2022/08/26/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AE%80%E5%8D%95%E7%9A%84Starter%E5%90%AF%E5%8A%A8%E5%99%A8/</id>
    <published>2022-08-26T10:56:36.000Z</published>
    <updated>2022-08-26T10:56:51.303Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p><h5 id="1、创建一个Maven工程"><a href="#1、创建一个Maven工程" class="headerlink" title="1、创建一个Maven工程"></a>1、创建一个Maven工程</h5><p><img src="https://img-blog.csdnimg.cn/3c684a5c63f04e1ea8efdada6e934eee.png#pic_center" alt="在这里插入图片描述"></p><h5 id="2、导入Spring的关键必要的依赖"><a href="#2、导入Spring的关键必要的依赖" class="headerlink" title="2、导入Spring的关键必要的依赖"></a>2、导入Spring的关键必要的依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入父依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注解处理器:生成配置元数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3、创建类完成相关逻辑"><a href="#3、创建类完成相关逻辑" class="headerlink" title="3、创建类完成相关逻辑"></a>3、创建类完成相关逻辑</h5><p><img src="https://img-blog.csdnimg.cn/1442da26e63b4dc08dc3440c7ad87464.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、定义配置类完成Bean的初始化"><a href="#4、定义配置类完成Bean的初始化" class="headerlink" title="4、定义配置类完成Bean的初始化"></a>4、定义配置类完成Bean的初始化</h5><p><img src="https://img-blog.csdnimg.cn/84335c4ddd4d4af994a7fac230841ca8.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HelloWorld <span class="title function_">helloWord</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、设置spring-factories配置文件"><a href="#5、设置spring-factories配置文件" class="headerlink" title="5、设置spring.factories配置文件"></a>5、设置spring.factories配置文件</h5><p><img src="https://img-blog.csdnimg.cn/4adf7a711567451bb8ebb0459cff19a7.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.only.config.HelloWorldConfiguration</span><br></pre></td></tr></table></figure><h5 id="6、打包安装即可-导入依赖即可使用"><a href="#6、打包安装即可-导入依赖即可使用" class="headerlink" title="6、打包安装即可,导入依赖即可使用"></a>6、打包安装即可,导入依赖即可使用</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mvn</span> package<span class="comment">//打包</span></span><br><span class="line"><span class="keyword">mvn</span> install <span class="comment">//安装依赖</span></span><br></pre></td></tr></table></figure><h6 id="在Maven-仓库可以看到这个包"><a href="#在Maven-仓库可以看到这个包" class="headerlink" title="在Maven 仓库可以看到这个包"></a>在Maven 仓库可以看到这个包</h6><p><img src="https://img-blog.csdnimg.cn/5c78eed3fb684cec83e88c354a997b68.png#pic_center" alt="在这里插入图片描述"></p><h6 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h6><p><img src="https://img-blog.csdnimg.cn/b21686ba90de483fb017e5e919fa4298.png#pic_center" alt="在这里插入图片描述"></p><h6 id="注入依赖"><a href="#注入依赖" class="headerlink" title="注入依赖"></a>注入依赖</h6><p><img src="https://img-blog.csdnimg.cn/330d895b74754645b4c4a0ca4010289e.png#pic_center" alt="在这里插入图片描述"></p><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p><img src="https://img-blog.csdnimg.cn/ba6c99eddd8c419f94033bf4b35e1c61.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。&lt;/p&gt;</summary>
    
    
    
    <category term="通往java之路" scheme="https://onlyonemomo.github.io/categories/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>德鲁克谈【自我管理】史上最受欢迎的文章</title>
    <link href="https://onlyonemomo.github.io/2022/08/26/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/%E5%BE%B7%E9%B2%81%E5%85%8B%E8%B0%88%E3%80%90%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86%E3%80%91%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <id>https://onlyonemomo.github.io/2022/08/26/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/%E5%BE%B7%E9%B2%81%E5%85%8B%E8%B0%88%E3%80%90%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86%E3%80%91%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E6%96%87%E7%AB%A0/</id>
    <published>2022-08-26T08:52:39.000Z</published>
    <updated>2022-08-26T12:21:16.983Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导读</strong>：本文最早刊登于《哈佛商业评论》，是其历史最佳文章之一。作者彼得·德鲁克是现代管理学之父，其著作影响了数代追求创新以及最佳管理实践的学者和企业家们，各类商业管理课程也都深受彼得·德鲁克思想的影响。本文后被收录在德鲁克的著作《21 世纪的管理挑战》中。非常值得一读再读。</p><p>我们生活的时代充满着前所未有的机会：<strong>如果你有雄心，又不乏智慧，那么不管你从何处起步，你都可以沿着自己所选择的道路登上事业的顶峰。</strong></p><p>不过，有了机会，也就有了责任。今天的公司并不怎么管员工的职业发展；实际上，知识工作者必须成为自己的首席执行官。你应该在公司中开辟自己的天地，知道何时改变发展道路，并在可能长达 50 年的职业生涯中不断努力、干出实绩。</p><p>要做好这些事情，你首先要对自己有深刻的认识——不仅清楚自己的优点和缺点，也知道自己是怎样学习新知识和与别人共事的，并且还明白自己的价值观是什么、自己又能在哪些方面做出最大贡献。</p><p>因为<strong>只有当所有工作都从自己的长处着眼，你才能真正做到卓尔不群。</strong></p><p>历史上的伟人——拿破仑、达芬奇、莫扎特——都很善于自我管理。这在很大程度上也是他们成为伟人的原因。不过，他们属于不可多得的奇才，不但有着不同于常人的天资，而且天生就会管理自己，因而才取得了不同于常人的成就。</p><p>而我们当中的大多数人，甚至包括那些还算有点天赋的人，都不得不通过学习来掌握自我管理的技巧。</p><p>我们必须学会自我发展，必须知道把自己放在什么样的位置上，才能做出最大的贡献，而且还必须在长达 50 年的职业生涯中保持着高度的警觉和投入。</p><p>1</p><p><strong>我们的长处是什么</strong></p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/a917c3d3472841509b65b02401932e20.jpeg" alt="img"></p><p>多数人都以为他们知道自己擅长什么。其实不然，更多的情况是，人们只知道自己不擅长什么——即便是在这一点上，人们也往往认识不清。</p><p>然而，<strong>一个人要有所作为，只能靠发挥自己的长处</strong>，而如果从事自己不太擅长的工作是无法取得成就的，更不用说那些自己根本干不了的事情了。</p><p><strong>我们需要知己所长，才能知己所属。</strong></p><p><strong>要发现自己的长处，唯一途径就是回馈分析法（feedback analysis）。</strong>每当做出重要决定或采取重要行动时，你都可以事先记录下自己对结果的预期。9 到 12 个月后，再将实际结果与自己的预期比较。</p><p>我本人采用这种方法已有 15 到 20 年了，而每次使用都有意外的收获。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/7f4bca92ee5f456099480e4e535b1e4e.jpeg" alt="img"></p><p>我们只要持之以恒地运用这个简单的方法，就能在较短的时间内，发现自己的长处。在采用这种方法之后，你就能知道，自己正在做（或没有做）的哪些事情会让你的长处无法发挥出来。</p><p>同时，你也将看到自己在哪些方面能力不是特别强。最后，你还将了解到自己在哪些方面完全不擅长，做不出成绩来。</p><p>根据回馈分析的启示，你需要在几方面采取行动。</p><p><strong>首先最重要的是，专注于你的长处，</strong>把自己放到那些能发挥长处的地方。</p><p><strong>其次，加强你的长处。</strong>回馈分析会迅速地显示，你在哪些方面需要改善自己的技能或学习新技能。它还将显示你在知识上的差距——这些差距通常都可以弥补。</p><p><strong>第三，发现任何由于恃才傲物而造成的偏见和无知，并且加以克服。</strong>有太多的人，尤其是那些术业有专攻的人，往往对其他领域的知识不屑一顾，或者认为聪明的头脑就可取代知识。</p><p>比如，很多一流的工程师遇上与人相关的事就束手无策，他们还以此为荣——因为他们觉得，对条理清晰的工程师头脑来说，人太混乱无序了。与此形成鲜明对照的是，人力资源方面的专业人员常常以他们连基本的会计知识或数量分析都一无所知而自傲。</p><p>不过，人们要是对这样的无知还沾沾自喜的话，那无异于自取灭亡。其实，<strong>要让自己的长处得到充分发挥，你就应该努力学习新技能、汲取新知识。</strong></p><p><strong>另外一点也同样重要——纠正你的不良习惯。</strong>所谓不良习惯，是指那些会影响你的工作成效和工作表现的事情。这样的习惯能很快地在回馈中反映出来。</p><p>与此同时，回馈还会反映出哪些问题是由缺乏礼貌造成的。礼貌是一个组织的润滑剂。</p><p><strong>礼貌，其实也很简单。****无非是说声「请」和「谢谢」，记住别人的名字，或问候对方家人这样的小事。</strong>许多聪明人，尤其是聪明的年轻人，没有意识到这一点。</p><p>如果回馈分析表明某个人只要一遇到需要别人合作的事就屡屡失败，那么很可能就意味着这个人的举止不大得体——也就是缺乏礼貌。</p><p><strong>把预期和实际结果进行比较，也会发现自己不能做什么。</strong>我们每个人都有许多一窍不通、毫无天分的领域，在这些领域我们甚至连平庸的水平都达不到。人们，尤其是知识工作者，就不应该试图去完成这些领域的工作和任务。他们应该尽量少把精力浪费在那些不能胜任的领域上，因为从无能到平庸要比从一流到卓越需要人们付出多得多的努力。</p><p>2</p><p><strong>我们的工作方式是怎样的</strong></p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/2c7c5d4b42e646c087d153a9926356da.jpeg" alt="img"></p><p>很少有人知道自己平时是怎样把事情给做成的。</p><p>实际上，我们当中的大多数人甚至不知道，不同人有着不同的工作方式和表现。</p><p><strong>许多人不是以他们习惯的方式工作，这当然就容易造成无所作为。</strong></p><p>对于知识工作者来说，「我的工作方式是怎样的？」可能比「我的长处是什么？」这个问题更加重要。</p><p>同一个人的长处一样，一个人的工作方式也是独一无二的，这由人的个性决定。</p><p>通常，几个常见的个性特征就决定了一个人的工作方式。</p><p>我属于读者型，还是听者型？</p><p>首先，<strong>你要搞清楚的是，你是读者型（习惯阅读信息）还是听者型（习惯听取信息）的人。</strong>绝大多数人甚至都不知道还有读者型和听者型之说，而且很少有人既是读者型又是听者型。知道自己属于哪种类型的人更少。</p><p>没有几个听者型的人可以通过努力变成合格的读者型——不管是主动还是被动的努力，反之亦然。<strong>不了解你的工作方式不可能发挥才干或取得成就。</strong></p><p>3</p><p><strong>我们如何学习</strong></p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/df8b460bb3c548ef8e6c53b5d50f3a17.jpeg" alt="img"></p><p>要了解一个人的工作方式，需要弄清的第二点是，他是如何学习的。</p><p>许多一流的笔杆子都不是好学生——温斯顿·邱吉尔就是一例。</p><p>有关这个问题的解释是，<strong>笔头好的人一般不靠听和读来学习，而靠写来学习，这已成了一种规律。</strong>学校不让他们以这种方式学习，所以他们的成绩总是很糟糕。</p><p>实际上，<strong>学习大概有六七种不同的方式。</strong></p><p><strong>像邱吉尔这样的人靠写来学习，还有些人以详尽的笔记来学习。有些人在实干中学习，另一些人通过听自己讲话学习。</strong></p><p>我属于读者型还是听者型？我如何学习？这是你首先要问自己的问题。</p><p>但光这些问题显然不够。要想做好自我管理，你还需要问这样的问题：我能与别人合作得好吗？还是喜欢单枪匹马？如果你确实有与别人进行合作的能力，你还得问问这个问题：我在怎样的关系下与他人共事？</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/dfe0002a710a43cbb3ecba4850b1e56e.jpeg" alt="img"></p><p>有些人最适合当部属。</p><blockquote><p>二战时期美国的大英雄乔治·巴顿将军是一个很好的例子。巴顿是美军的一名高级将领。然而，当有人提议他担任独立指挥官时，美国陆军参谋长、可能也是美国历史上最成功的伯乐，乔治·马歇尔将军说：「巴顿是美国陆军造就的最优秀的部下，但是，他会成为最差劲的司令官。」</p></blockquote><p><strong>一些人作为团队成员工作最出色。另一些人单独工作最出色。一些人当教练和导师特别有天赋，另一些人却没能力做导师。</strong></p><p>另一个关键的问题是，我如何才能取得成果——是作为决策者还是作为顾问？许多人做顾问时的表现会很出色，但是不能够承担决策的负担和压力。与此相反，也有许多人需要顾问来迫使他们思考，随后他们才能做出决定，接着迅速、自信和大胆地执行决定。</p><p>顺便说一下，<strong>一个组织的二号人物在提升到一号职位时常常失败</strong>，也正是因为这个原因。最高职位需要一个决策者，而一个强势的决策者常常把其信赖的人放在二号位置，当他的顾问。</p><p>其他有助于认识自我的重要问题包括：</p><blockquote><p>我是在压力下表现出色，还是适应一种按部就班、可预测的工作环境？</p><p>我是在一个大公司还是在一个小公司中工作表现最佳？</p></blockquote><p>我不止一次地看到有些人在大公司中十分成功，换到小公司中则很不顺利。</p><p>反过来也是如此。</p><p>下面这个结论值得我们反复强调：<strong>不要试图改变自我，因为这样你不大可能成功。但是，你****应该努力改进你的工作方式。另外，不要从事你干不了或干不好的工作。</strong></p><p>4</p><p><strong>我们的价值观是什么</strong></p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/92a9c64f448d4d8db8c5eb2460f6346e.jpeg" alt="img"></p><p>要能够自我管理，你最后不得不问的问题是：我的价值观是什么？这不是一个有关伦理道德的问题。道德准则对每一个人都一样。要对一个人的道德进行测试，方法很简单，我把它称为<strong>「镜子测试」</strong>。</p><blockquote><p>20 世纪初，德国驻英国大使是当时在伦敦所有大国中最受尊重的一位外交官。显然，他命中注定会承担重任，即使不当本国的总理，至少也要当外交部长。</p><p>然而，在 1906 年，他突然辞职，不愿主持外交使团为英国国王爱德华七世举行的晚宴。这位国王是一个臭名昭著的色鬼，并且明确表示他想出席什么样的晚宴。据有关报道，这位德国大使曾说：「我不想早晨刮脸时在镜子里看到一个皮条客。」</p></blockquote><p>这就是镜子测试。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/31b302e81ac5435c916964acd1b03fb1.jpeg" alt="img"></p><p>我们所尊从的伦理道德要求你问自己：我每天早晨在镜子里想看到一个什么样的人？在一个组织或一种情形下合乎道德的行为，在另一个组织或另一种情形下也是合乎道德的。但是，道德只是价值体系的一部分——尤其对于一个组织的价值体系来说。</p><p><strong>如果一个组织的价值体系不为自己所接受或者与自己的价值观不相容，人们就会备感沮丧，工作效力低下。</strong></p><p>一个人的工作方式和他的长处很少发生冲突，相反，两者能产生互补。但是，<strong>一个人的价值观有时会与他的长处发生冲突。</strong></p><p>5</p><p><strong>我们属于何处</strong></p><p>少数人很早就知道他们属于何处。</p><p>比如，数学家、音乐家和厨师，通常在四五岁的时候就知道自己会成为数学家、音乐家和厨师了。物理学家通常在十几岁甚至更早的时候就决定了自己的工作生涯。</p><p>但是，大多数人，尤其是很有天赋的人，至少要过了二十五六岁才知道他们将身属何处。</p><p>然而，到这个时候，他们应该知道上面所谈的三个问题的答案：</p><blockquote><p>我的长处是什么？</p><p>我的工作方式是怎样的？</p><p>我的价值观是什么？</p></blockquote><p>随后，他们就能够并且应该决定自己该向何处投入精力。或者，他们应该能够决定自己不属于何处。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/6939ccf2fb6b4dfdbfd76f5f60bd1dd7.jpeg" alt="img"></p><p>已经知道自己在大公司里干不好的人，应该学会拒绝在一个大公司中任职。已经知道自己不适合担任决策者的人，应该学会拒绝做决策工作。</p><p><strong>成功的事业不是预先规划的，而是在人们知道了自己的长处、工作方式和价值观后，准备把握机遇时水到渠成的。知道自己属于何处，可使一个勤奋、有能力但原本表现平平的普通人，变成出类拔萃的工作者。</strong></p><p>6</p><p><strong>我该做什么贡献</strong></p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/0c5382aa1d5142d6a6524ae8c13b116d.jpeg" alt="img"></p><p>综观人类的发展史，绝大多数人永远都不需要提出这样一个问题：我该做出什么贡献？因为他们该做出什么贡献是由别人告知的，他们的任务或是由工作本身决定的（例如农民或工匠的任务），或是由主人决定的（例如佣人的任务）。</p><p>对于知识工作者来说，他们不得不提出一个以前从来没有提出过的问题：我的贡献应该是什么？</p><p>要回答这个问题，他们必须考虑三个不同的因素：</p><blockquote><p>当前形势的要求是什么？</p><p>鉴于我的长处、我的工作方式以及我的价值观，我怎样才能对需要完成的任务做出最大贡献？</p><p>最后，必须取得什么结果才能产生重要影响？</p></blockquote><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/35696f4e893d47e9986701976a6e3a79.jpeg" alt="img"></p><p>一般来说，<strong>一项计划的时间跨度如果超过了 18 个月，就很难做到明确和具体。</strong></p><p>因此，在多数情况下我们应该提出的问题是：</p><blockquote><p>我在哪些方面能取得将在今后一年半内见效的结果？</p><p>如何取得这样的结果？</p></blockquote><p>回答这个问题时必须对几个方面进行权衡。</p><p>首先，<strong>这些结果应该是比较难实现的，要有「张力」 （stretching）。</strong>但这些结果也应该是能力所及的。</p><p>其次，<strong>这些结果应该富有意义，要能够产生一定影响。</strong></p><p>最后，结果应该明显可见，如果可能的话，还应当能够衡量。<strong>确定了要实现的结****果之后，接着就可以制订行动方针：做什么，从何处着手，如何开始，目标是什么，在多长时间内完成。</strong></p><p>7</p><p><strong>对人际关系负责</strong></p><p>除了少数伟大的艺术家、科学家和运动员，很少有人是靠自己单枪匹马而取得成果的。<strong>不管是组织成员还是个体职业者，大多数人都要与别人进行合作，并且是有效的合作。</strong>要实现自我管理，你需要对自己的人际关系负起责任。这包括两部分内容。</p><p><strong>首先要接受别人是和你一样的个体这个事实。</strong></p><p>他们有自己的长处，自己的做事方式和价值观。因此，<strong>要想卓有成效，你就必须知道共事者的长处、工作方式和价值观。</strong></p><p>这个道理听起来让人很容易明白，但是没有几个人真正会去注意。</p><p>一个习惯于写报告的人就是个典型的例子——他在第一份工作时就培养起写报告的习惯，因为他的老板是一个读者型的人，而即使下一个老板是个听者型，此人也会继续写着那肯定没有任何结果的报告。这位老板因此肯定会认为这个员工愚蠢、无能、懒惰，肯定干不好工作。但是，如果这个员工事先研究过新老板的情况，并分析过这位老板的工作方式，这种情况本来可以避免。</p><p><strong>老板既不是组织结构图上的一个头衔，也不是一个「职能」。他们是有个性的人，他们有权以自己最得心应手的方式来工作。与他们共事的人有责任观察他们，了解他们的工作方式，并做出相应的自我调整，去适应老板最有效的工作方式。</strong></p><p>事实上，这就是「管理」上司的秘诀。</p><p>这种方法适用于所有与你共事的人。至于工作方式，人各有别。提高效力的第一个秘诀是了解跟你合作和你要依赖的人，以利用他们的长处、工作方式和价值观。工作关系应当既以工作为基础，也以人为基础。</p><p><strong>人际关系责任的第二部分内容是沟通责任。</strong></p><p>在我或是其他人开始给一个组织做咨询时，我们听到的第一件事都与个性冲突有关。其中大部分冲突都是因为：人们不知道别人在做什么，他们又是采取怎样的工作方式，专注于做出什么样的贡献以及期望得到怎样的结果。而这些人不了解情况的原因是，他们没有去问，结果也就不得而知。</p><p>即使一些人懂得负起人际关系责任的重要性，他们和同事的交流也往往不够。他们总是有所顾虑，怕别人把自己看成是一个冒昧、愚蠢、爱打听的人。他们错了。</p><p>因为我们看到，每当有人找到他的同事说「这是我所擅长的工作。这是我的做事方式。这是我的价值观。这是我计划做出的贡献和应当取得的成果」，这个人总会得到如此回答：「这太有帮助了，可你为什么不早点告诉我？」</p><p>如果一个人继续问道：「那么，关于你的长处、你的工作方式、你的价值观以及你计划做出的贡献，我需要知道什么？」他也会得到类似的答复——据我的经验，无一例外。</p><p>事实上，知识工作者应该向与他们共事的每一个人，不管是下属、上司、同事还是团队成员，都发出这样的疑问。</p><p><strong>组织已不再建立在强权的基础上，而是建立在信任的基础上。</strong>人与人之间相互信任，不一定意味着他们彼此喜欢对方，而是意味着彼此了解。<strong>因此，人们绝对有必要对自己的人际关系负责****。</strong></p><p>这是一种义务。不管一个人是公司的一名成员，还是公司的顾问、供应商或经销商，他都需要对他的所有共事者负起这种责任。所谓共事者，是指在工作上他所依赖的同事以及依赖他的同事。</p><p>8</p><p><strong>管理后半生</strong></p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/33e6344cbc9f4cd393a0f727949091ae.jpeg" alt="img"></p><p>我们听到了许多有关经理人中年危机的谈论，「厌倦」这个词在其中频频出现。</p><p>45 岁时，多数经理人的职业生涯达到了顶峰。但是他们学不到新东西，也没有什么新贡献，从工作中得不到挑战，因而也谈不上满足感。在他们面前，还有 20 到 25 年的职业道路要走。这就是为什么经理人在进行自我管理后，越来越多地开始发展第二职业的原因。</p><p>发展第二职业有三种方式：</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/8f00c5c2d0284fa3875a696105ea4908.jpeg" alt="img"></p><p><strong>第一种是完全投身于新工作。</strong></p><p>这常常只需要从一种组织转到另一种组织。</p><p>例如，一家大公司某事业部的会计师成为一家中型医院的财务总监。</p><p>但是也有越来越多的人转入完全不同的职业。还有许多人在第一份职业中取得的成功有限，于是改行从事第二职业。这样的人有很多技能，他们也知道该如何工作。</p><p><strong>为后半生做准备的第二种方式是，发展一个平行的职业。</strong></p><p>许多人的第一职业十分成功，他们还会继续从事原有工作。除此之外，他们会开创一项平行的工作，通常是在非营利机构。</p><p><strong>最后一种方法是社会创业。</strong></p><p>社会创业者通常是在第一职业中非常成功的人士。他们都热爱自己的工作，但是这种工作对他们已经不再有挑战性。</p><p>他们虽然继续做着原来的工作，但在这份工作上花的时间越来越少。他们同时开创了另一项事业，通常是非营利性活动。</p><p>管理好自己后半生的人可能总是少数。多数人可能数着年头一年一年过去，直至退休。<strong>但正是这些少数人，这些把漫长的工作寿命看做是自己和社会之机会的人，才会成为领袖和模范。</strong></p><p><strong>管理好后半生有一个先决条件：你必须早在你进入后半生之前就开始行动。</strong>当 30 年前人们首次认识到工作寿命正在迅速延长时，许多观察家（包括我自己）认为，退休人员会越来越多地成为非营利机构的志愿者。可是，这种情况并没有发生。一个人如果不在 40 岁之前就开始做志愿者，那他 60 岁之后也不会去做志愿者。</p><p>同样，我认识的所有社会创业者，都是早在他们原有的事业达到顶峰之前就开始从事他们的第二事业。</p><p><strong>发展第二兴趣还有一个原因：任何人都不能指望在生活或工作中很长时间都不遭遇严重挫折。</strong>在这样的时刻，第二兴趣——不仅仅是业余爱好——可能发挥重要作用。</p><p><strong>在一个崇尚成功的社会里，拥有各种选择变得越来越重要。</strong>在知识社会里，我们期望每一个人都能取得成功。这显然是不可能的。</p><p>对许多人来说，能避免失败就行。可是有成功的地方，就会有失败。因此，有一个能够让人们做出贡献、发挥影响力或成为「大人物」的领域，这不仅对个人十分重要，对个人的家庭也同样重要。</p><p>这意味着人们需要找到一个能够有机会成为领袖、受到尊重、取得成功的第二领域——可能是第二份职业。</p><p>自我管理中面临的挑战看上去比较明显。但自我管理需要我们做出以前从未做过的事情。自我管理需要每一个知识工作者在思想和行动上都要成为自己的首席执行官。</p><p>更进一步来看，这样的转变——从一切听从别人吩咐的体力劳动者到不得不自我管理的知识工作者——也使得社会结构发生了深刻变化。</p><p>历史上每一个社会，甚至是个人主义倾向最强的社会，都认为两件事情理所当然（即使只是下意识的）：</p><blockquote><p>第一，组织比员工更长寿；</p><p>第二，大多数人从不挪地方。</p></blockquote><p>如今，情况恰恰相反。<strong>知识工作者的寿命超过了组织寿命，而且他们来去自如。</strong></p><p>于是，人们对自我管理的需要在人类事务中掀起了一场革命。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导读&lt;/strong&gt;：本文最早刊登于《哈佛商业评论》，是其历史最佳文章之一。作者彼得·德鲁克是现代管理学之父，其著作影响了数代追求创新以及最佳管理实践的学者和企业家们，各类商业管理课程也都深受彼得·德鲁克思想的影响。本文后被收录在德鲁克的著作《21 世纪的管理挑战》中。非常值得一读再读。&lt;/p&gt;</summary>
    
    
    
    <category term="每周转载" scheme="https://onlyonemomo.github.io/categories/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="每周转载" scheme="https://onlyonemomo.github.io/tags/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Linux搭建java环境SOP</title>
    <link href="https://onlyonemomo.github.io/2022/08/25/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/Linux%E6%90%AD%E5%BB%BAjava%E7%8E%AF%E5%A2%83SOP/"/>
    <id>https://onlyonemomo.github.io/2022/08/25/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/Linux%E6%90%AD%E5%BB%BAjava%E7%8E%AF%E5%A2%83SOP/</id>
    <published>2022-08-25T12:39:51.000Z</published>
    <updated>2022-08-25T12:42:49.442Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><ul><li><p>软件安装</p></li><li><p>项目部署</p></li></ul><h2 id="1-防火墙配置【重点】"><a href="#1-防火墙配置【重点】" class="headerlink" title="1. 防火墙配置【重点】"></a>1. 防火墙配置【重点】</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol><li>防火墙的管理命令</li><li>开放端口允许外部连接，移除端口不允许外部连接</li></ol><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>linux默认防火墙是开启，而且所有的端口对外都是不可访问的。这么做的目的：安全。 问题：比如我等会在linux上安装tomcat的软件的。 tomcat软件需要使用8080端口。但是由于端口对外都是不可访问的，所以windows没法访问linux的tomcat。</p><p>&#x3D;&#x3D;解决上述问题的方案有两种：&#x3D;&#x3D;</p><ol><li><p>直接关闭防火墙，释放所有的端口，允许外界去访问全部的端口 ， 方便省心，弊端不安全(开发阶段)</p></li><li><p>只开放8080端口。开放指定的端口  (生产阶段，项目上线)</p></li></ol><p>防火墙类似于一个关卡检查人员，当你访问其他人的电脑，或者其他人访问你的电脑，都要进行拦截并进行处理，有的阻止，有的放行，有的转发。默认情况下防火墙在开机以后就自动启动了。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>操作服务命令： systemctl  动作命令    服务的名称</p><p>防火墙服务</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>systemctl start   firewalld</td><td>开启</td></tr><tr><td>systemctl stop   firewalld</td><td>关闭</td></tr><tr><td>systemctl   enable firewalld</td><td>开机自启动&#x3D;&#x3D;(默认状态)&#x3D;&#x3D;</td></tr><tr><td>systemctl   disable firewalld</td><td>关闭开机自启</td></tr><tr><td>systemctl   status firewalld</td><td>查看当前防火墙状态</td></tr></tbody></table><h3 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h3><ol><li>确认当前是管理员的账户，查看防火墙当前的状态</li><li>关闭防火墙，再查看防火墙的状态</li><li>再次开启防火墙，查看防火墙的状态</li></ol><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><p><img src="https://img-blog.csdnimg.cn/ef01ab4467c844c5b6b871177bd8a4f2.png#pic_center" alt="在这里插入图片描述"></p><h3 id="firewall-cmd"><a href="#firewall-cmd" class="headerlink" title="firewall-cmd"></a><font color="red">firewall-cmd</font></h3><p> 外网或内网需要连接到当前系统内的程序进行操作，需要linux系统开放程序端口，否则无法访问。</p><table><thead><tr><th>firewall-cmd</th><th>参数说明</th></tr></thead><tbody><tr><td>–zone&#x3D;public</td><td>开放哪个网络，默认是public</td></tr><tr><td>–add-port&#x3D;端口&#x2F;tcp</td><td>添加到防火墙中端口号，对外是打开的</td></tr><tr><td>–remove-port&#x3D;端口&#x2F;tcp</td><td>从防火墙的规则中删除端口号</td></tr><tr><td>–permanent</td><td>永久添加规则</td></tr><tr><td>–list-all</td><td>显示现有的规则，展示所有开放端口</td></tr><tr><td>–reload</td><td>重新加载规则，让新加的端口号起作用，重启防火墙的服务 systemctl restart firewalld</td></tr></tbody></table><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>永久开放443端口，添加到公开区域，允许外部连接</li><li>重新加载防火墙的规则</li><li>显示所有打开的端口号 </li><li>从公共区域中，永久移除443端口，不允许外部连接</li><li>重新加载防火墙规则</li><li>显示打开的端口号</li></ol><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/b04dcab908fa4207bbe090cee7edc9ba.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/d4ee1ca87ae3442e8ea628de02a85b53.png#pic_center" alt="在这里插入图片描述"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>说说下面代码的作用</p><ol><li><p>关闭、开启防火墙、设置自启、关闭自启服务命令？</p><blockquote><p>systemctl  stop|start|enable|disable   firewalld</p></blockquote></li><li><p>开放(添加)指定端口命令</p><blockquote><p>firewall-cmd  –zone&#x3D;public –add-port&#x3D;端口&#x2F;tcp   –permanent</p></blockquote></li><li><p>删除开放端口命令：</p><blockquote><p>firewall-cmd  –zone&#x3D;public –remove-port&#x3D;端口&#x2F;tcp   –permanent</p></blockquote></li><li><p>重新加载，展示列表</p><blockquote><p>firewall-cmd –reload</p><p>firewall-cmd –list-all</p></blockquote></li></ol><h2 id="2-软件安装"><a href="#2-软件安装" class="headerlink" title="2. 软件安装"></a>2. 软件安装</h2><h3 id="2-1-软件安装方式"><a href="#2-1-软件安装方式" class="headerlink" title="2.1 软件安装方式"></a>2.1 软件安装方式</h3><p>在Linux系统中，安装软件的方式主要有四种，这四种安装方式的特点如下：</p><table><thead><tr><th>安装方式</th><th>特点</th></tr></thead><tbody><tr><td>二进制发布包安装</td><td>软件已经针对具体平台编译打包发布，只要解压，修改配置即可 , tomcat\jdk</td></tr><tr><td>rpm安装（ 软件管家）</td><td>软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，&#x3D;&#x3D;不能自行解决库依赖问题&#x3D;&#x3D;</td></tr><tr><td>yum安装</td><td>一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题(安装过程需要联网)</td></tr><tr><td>源码编译安装</td><td>软件以源码工程的形式发布，需要自己编译打包 , redis</td></tr></tbody></table><h3 id="2-2-安装JDK"><a href="#2-2-安装JDK" class="headerlink" title="2.2 安装JDK"></a>2.2 安装JDK</h3><p>上述我们介绍了Linux系统软件安装的四种形式，接下来我们就通过第一种(二进制发布包)形式来安装JDK。 JDK对应的二进制发布包，在课程资料中已经提供，如下：<img src="https://img-blog.csdnimg.cn/87d2177dd1b54950a1b6b72e96c3736a.png#pic_center" alt="在这里插入图片描述"></p><p>JDK具体安装步骤如下： </p><p><strong>1). 上传安装包</strong></p><h4 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h4><p>在Linux下安装JDK </p><h4 id="JDK安装步骤"><a href="#JDK安装步骤" class="headerlink" title="JDK安装步骤"></a>JDK安装步骤</h4><ol><li><p>在&#x2F;下创建soft目录，将提供的”软件”复制到Linux的soft目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /soft</span><br><span class="line"><span class="built_in">cd</span> /soft</span><br></pre></td></tr></table></figure></li><li><p>进入“&#x2F;soft”目录，解压jdk到指定目录&#x2F;usr&#x2F;local下</p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf jdk-<span class="number">8</span>u221-linux-x64.tar.gz -C <span class="regexp">/usr/</span>local/</span><br></pre></td></tr></table></figure><ol start="3"><li>查看解压后的目录,目录中有jdk1.8.0_221为jdk解压的目录</li></ol><p><img src="https://img-blog.csdnimg.cn/8eea1a75e4554727b62d05462617f349.png#pic_center" alt="在这里插入图片描述"></p><ol start="4"><li>编辑&#x2F;etc&#x2F;profile文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><ol><li><p>配置jdk环境变量，打开&#x2F;etc&#x2F;profile配置文件，将下面配置拷贝进去，注：放在文件的最后面。</p><p>export命令用于将shell变量输出为环境变量</p></li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set java environment</span></span><br><span class="line"><span class="attribute">JAVA_HOME</span>=/usr/local/jdk1.8.0_221</span><br><span class="line"><span class="attribute">PATH</span>=<span class="variable">$JAVA_HOME</span>/bin:$PATH</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME PATH</span><br></pre></td></tr></table></figure><p> 命令1：vim &#x2F;etc&#x2F;profile</p><p> 命令2：在文件末尾处，输入o(表示在光标下插入新行)，复制上面的环境变量配置粘贴，并写入保存</p><ol start="5"><li>重新加载&#x2F;etc&#x2F;profile配置文件</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><ol start="6"><li>判断JDK是否安装成功</li></ol><p><img src="https://img-blog.csdnimg.cn/7458cdf8c5be4bc8b0ea31817f16c78b.png#pic_center" alt="在这里插入图片描述"></p><h4 id="JDK安装小结"><a href="#JDK安装小结" class="headerlink" title="JDK安装小结"></a>JDK安装小结</h4><ol><li>解压</li><li>配置环境变量</li><li>source 命令重新在家 &#x2F;etc&#x2F;profile</li></ol><h3 id="2-3-安装Tomcat"><a href="#2-3-安装Tomcat" class="headerlink" title="2.3 安装Tomcat"></a>2.3 安装Tomcat</h3><h4 id="2-3-1-Tomcat安装"><a href="#2-3-1-Tomcat安装" class="headerlink" title="2.3.1 Tomcat安装"></a>2.3.1 Tomcat安装</h4><h4 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h4><p>在Linux上安装Tomcat</p><h4 id="安装Tomcat的步骤"><a href="#安装Tomcat的步骤" class="headerlink" title="安装Tomcat的步骤"></a>安装Tomcat的步骤</h4><ol><li>进入soft文件夹，解压Tomcat到&#x2F;usr&#x2F;local下</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> -xvf apache-tomcat-<span class="number">8</span>.<span class="number">5</span>.<span class="number">51</span>.tar.gz  -C /usr/local</span><br></pre></td></tr></table></figure><ol start="2"><li>开放Linux的对外访问的端口8080</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=8080/tcp --permanent</span><br></pre></td></tr></table></figure><ol start="3"><li>重启防火墙</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl restart firewalld</span></span><br></pre></td></tr></table></figure><ol start="4"><li>进入&#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.51&#x2F;bin目录，启动Tomcat</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b08154217fca4a9999af206486224b41.png#pic_center" alt="在这里插入图片描述"></p><ol start="5"><li>在Windows下打开浏览器访问Linux的8080端口</li></ol><p><img src="https://img-blog.csdnimg.cn/1ebaa8df9e2b4af48af7d4d4f0eff936.png#pic_center" alt="在这里插入图片描述"></p><ol start="6"><li>进入bin目录下，关闭服务器。关闭服务器以后，浏览器不能再访问。</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d8c99f6ceb9f49b0848f2968f4908c21.png#pic_center" alt="在这里插入图片描述"></p><h4 id="2-3-4-停止Tomcat"><a href="#2-3-4-停止Tomcat" class="headerlink" title="2.3.4 停止Tomcat"></a>2.3.4 停止Tomcat</h4><p>在Linux系统中，停止Tomcat服务的方式主要有两种： </p><p><strong>1). 运行Tomcat提供的脚本文件</strong></p><p>在Tomcat安装目录下有一个bin目录，这个目录中存放的是tomcat的运行脚本文件，其中有一个脚本就是用于停止tomcat服务的。</p><p><img src="https://img-blog.csdnimg.cn/32620420f0b643dba59a733414d08d17.png#pic_center" alt="在这里插入图片描述"></p><p>我们可以切换到bin目录，并执行如下指令，来停止Tomcat服务：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span> shutdown.<span class="keyword">sh</span></span><br><span class="line">./shutdown.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><strong>2). 结束Tomcat进程</strong></p><p>我们可以先通过 <code>ps -ef|grep tomcat</code> 指令查看tomcat进程的信息，从进程信息中获取tomcat服务的进程号。然后通过kill -9 的形式，来杀死系统进程。</p><p><img src="https://img-blog.csdnimg.cn/26e4f74eeca94ba78b2628b57d4174d4.png#pic_center" alt="在这里插入图片描述"></p><p>通过上述的指令，我们可以获取到tomcat的进程号为 79947。接下来，我们就可以通过指令 ，来杀死tomcat的进程 ：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kill</span> -<span class="number">9</span> <span class="number">79947</span> </span><br></pre></td></tr></table></figure><p>执行完上述指令之后，我们再访问Linux系统中的Tomcat，就访问不到了。</p><blockquote><p>注意：</p><p>​kill命令是Linux提供的用于结束进程的命令，-9表示强制结束</p></blockquote><blockquote><p>注意 ： </p><p>​虽然上述讲解的两种方式，都可以停止Tomcat服务，但是推荐使用第一种方式(.&#x2F;shutdown.sh)执行脚本来关闭tomcat服务，如果通过第一种方式停止不了tomcat了，这个时候，我们可以考虑使用第二种方式，强制杀死进程。</p></blockquote><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>​<strong>tomcat安装步骤：</strong></p><pre><code>    1. 解压      2. 进入bin目录使用./startup.sh启动            3. 开放8080端口</code></pre><h3 id="2-4-安装MySQL"><a href="#2-4-安装MySQL" class="headerlink" title="2.4 安装MySQL"></a>2.4 安装MySQL</h3><h4 id="2-4-1-MySQL安装"><a href="#2-4-1-MySQL安装" class="headerlink" title="2.4.1 MySQL安装"></a>2.4.1 MySQL安装</h4><p>对于MySQL数据库的安装，我们将要使用前面讲解的第二种安装方式rpm进行安装。那么首先我们先了解一下什么rpm？</p><blockquote><p><strong>RPM：</strong>全称为 Red-Hat Package Manager，RPM软件包管理器（相当于windows的软件管家），是红帽Linux用于管理和安装软件的工具。</p></blockquote><p>我们要通过rpm，进行MySQL数据库的安装，主要的步骤如下：</p><p><strong>1). 检测当前系统是否安装过MySQL相关数据库</strong></p><p>需要通过rpm相关指令，来查询当前系统中是否存在已安装的mysql软件包，执行指令如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span>查询当前系统中安装的所有软件</span><br><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> mysql查询当前系统中安装的名称带mysql的软件</span><br><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> mariadb查询当前系统中安装的名称带mariadb的软件</span><br></pre></td></tr></table></figure><p>通过rpm -qa 查询到系统通过rpm安装的所有软件，太多了，不方便查看，所以我们可以通过管道符 | 配合着grep进行过滤查询。</p><p><img src="https://img-blog.csdnimg.cn/bec5196b2c214db09f0386203dc524ba.png#pic_center" alt="在这里插入图片描述"></p><p>通过查询，我们发现在当前系统中存在mariadb数据库，是CentOS7中自带的，而这个数据库和MySQL数据库是冲突的，所以要想保证MySQL成功安装，需要卸载mariadb数据库。</p><p><strong>2). 卸载现有的MySQL数据库</strong></p><p>在rpm中，卸载软件的语法为： </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e <span class="comment">--nodeps  软件名称</span></span><br></pre></td></tr></table></figure><p>那么，我们就可以通过指令，卸载 mariadb，具体指令为： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rpm</span> -e --nodeps mariadb-libs-<span class="number">5</span>.<span class="number">5</span>.<span class="number">56</span>-<span class="number">2</span>.el7.x86_64</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4e7b556b9a1048a0b4fc89a49c14063a.png#pic_center" alt="在这里插入图片描述"></p><p>我们看到执行完毕之后， 再次查询 mariadb，就查不到了，因为已经被成功卸载了。</p><p><strong>3). 将资料中提供的MySQL安装包上传到Linux并解压</strong></p><p>A. 上传MySQL安装包</p><p>在课程资料中，提供的有MySQL的安装包 ，我们需要将该安装包上传到Linux系统的根目录 &#x2F; 下面。<br><img src="https://img-blog.csdnimg.cn/2587e1f7e1214d2eb7c732b0cdbeca75.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/539a6ebe86f44dce849f7a1bff9aa100.png#pic_center" alt="在这里插入图片描述"></p><p>B. 解压到&#x2F;usr&#x2F;local&#x2F;mysql</p><p>执行如下指令: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /soft</span><br><span class="line"><span class="built_in">mkdir</span> mysql</span><br><span class="line">tar -xvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz  -C ./mysql</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /soft/mysql</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/27273b2771f24e148dfb7534af63c2cc.png#pic_center" alt="在这里插入图片描述"></p><p><strong>4). 安装顺序安装rpm安装包  (要求一条一条命令执行)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">yum install net-tools</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><blockquote><p>说明: </p><ul><li>因为rpm安装方式，是不会自动处理依赖关系的，需要我们自己处理，所以对于上面的rpm包的安装顺序不能随意修改。</li><li>安装过程中提示缺少net-tools依赖，使用yum安装(yum是一种在线安装方式，需要保证联网)</li><li>可以通过指令(yum update)升级现有软件及系统内核</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/d8c5abea902a47fd9cb6de7b4bca2597.png#pic_center" alt="在这里插入图片描述"></p><h4 id="1-4-2-MySQL启动"><a href="#1-4-2-MySQL启动" class="headerlink" title="1.4.2 MySQL启动"></a>1.4.2 MySQL启动</h4><p>MySQL安装完成之后，会自动注册为系统的服务，服务名为mysqld。那么，我们就可以通过systemctl指令来查看mysql的状态、启动mysql、停止mysql。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">system</span>ctl status mysqld查看mysql服务状态</span><br><span class="line"><span class="params">system</span>ctl start mysqld启动mysql服务</span><br><span class="line"><span class="params">system</span>ctl stop mysqld停止mysql服务</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/30efbcf3df8546c0b347175f5db0a0db.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>说明： </p><p>​可以设置开机时启动mysql服务，避免每次开机启动mysql。执行如下指令： </p><p>​systemctl enable mysqld</p></blockquote><p>我们可以通过如下方式，来判定mysql是否启动：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">ps</span> –ef | <span class="keyword">grep</span> mysql查看mysql进程</span><br></pre></td></tr></table></figure><blockquote><p>​<font color='red'>B. ps命令用于查看Linux中的进程数据。</font></p></blockquote><h4 id="1-4-3-MySQL登录"><a href="#1-4-3-MySQL登录" class="headerlink" title="1.4.3 MySQL登录"></a>1.4.3 MySQL登录</h4><h5 id="1-4-3-1-查阅临时密码"><a href="#1-4-3-1-查阅临时密码" class="headerlink" title="1.4.3.1 查阅临时密码"></a>1.4.3.1 查阅临时密码</h5><p>MySQL启动起来之后，我们就可以测试一下登录操作，但是我们要想登录MySQL，需要一个访问密码，而刚才在安装MySQL的过程中，并没有看到让我们设置访问密码，那这个访问密码是多少呢? 那实际上，对于rpm安装的mysql，在mysql第一次启动时，会自动帮我们生成root用户的访问密码，并且输出在mysql的日志文件 &#x2F;var&#x2F;log&#x2F;mysqld.log中，我们可以查看这份日志文件，从而获取到访问密码。</p><p>可以执行如下指令：</p><p>1). cat &#x2F;var&#x2F;log&#x2F;mysqld.log</p><p><img src="https://img-blog.csdnimg.cn/a588797069934d40945cbc6b8a95e238.png#pic_center" alt="在这里插入图片描述"></p><p>这种方式，可以看到所有的日志数据，文件比较大时，很不方便查看数据。我们可以通过管道符 | 配合grep来对数据进行过滤。</p><p>2). cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep password</p><p>我们可以通过上述指令，查询日志文件内容中包含password的行信息。</p><p><img src="https://img-blog.csdnimg.cn/23ebb1075cd64beabce617b6d5eb6bd2.png#pic_center" alt="在这里插入图片描述"></p><h5 id="1-4-3-2-登录MySQL"><a href="#1-4-3-2-登录MySQL" class="headerlink" title="1.4.3.2 登录MySQL"></a>1.4.3.2 登录MySQL</h5><p>获取到root用户的临时密码之后，我们就可以登录mysql数据库，修改root的密码，为root设置一个新的密码。并且我们还需要开启root用户远程访问该数据库的权限，这样的话，我们就可以在windows上来访问这台MySQL数据库。</p><p>执行如下指令： </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">①. 登录mysql（复制日志中的临时密码登录）</span><br><span class="line">mysql -uroot -p</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">②. 修改密码</span><br><span class="line">    <span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">4</span>;设置密码长度最低位数</span><br><span class="line">    <span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=LOW;设置密码安全等级低，便于密码可以修改成root</span><br><span class="line">    <span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">&#x27;root&#x27;</span>);设置密码为root</span><br><span class="line">    </span><br><span class="line">③. 开启访问权限(允许外界可以远程连接mysql，默认只能是本机连接)</span><br><span class="line">    <span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    flush <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>操作完上述的指令之后，数据库root用户的密码以及远程访问我们就配置好了，接下来，可以执行exit退出mysql，再次通过新的密码进行登录。</p><p><img src="https://img-blog.csdnimg.cn/01d504c6552e411aa8d2b9cfa10406fb.png#pic_center" alt="在这里插入图片描述"></p><p>&#x3D;&#x3D;注意： 要想在windows上能够访问MySQL，还需要开放防火墙的3306端口，执行如下指令：&#x3D;&#x3D;</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">zone=public</span> <span class="literal">--</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=3306/tcp</span> <span class="literal">--</span><span class="comment">permanent</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">reload</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/54bd439718624b2a93221408216adc6a.png#pic_center" alt="在这里插入图片描述"></p><p>当然我们也可以使用安装在windows系统中的sqlyog或者Navicat来远程连接linux上的MySQL。</p><p><img src="https://img-blog.csdnimg.cn/b0eedc38ba6340778068cad8b5ef2d35.png#pic_center" alt="在这里插入图片描述"></p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><h5 id="安装mysql的步骤小结："><a href="#安装mysql的步骤小结：" class="headerlink" title="安装mysql的步骤小结："></a>安装mysql的步骤小结：</h5><ol><li><p>卸载原本的mysql</p><ol start="2"><li>解压</li><li>安装</li><li>开启mysqld的服务</li><li>登录，查找你初始化密码&#x2F;var&#x2F;log&#x2F;mysqld.log</li><li>修改密码</li><li>授权允许root用户在任意地址都可以登录</li><li>开放3306端口</li><li>使用windows的小海豚链接。</li></ol></li></ol><h2 id="3-项目部署"><a href="#3-项目部署" class="headerlink" title="3. 项目部署"></a>3. 项目部署</h2><p>之前我们讲解Linux操作系统时，就提到，我们服务端开发工程师学习Linux系统的目的就是将来我们开发的项目绝大部分情况下都需要部署在Linux系统中。那么在本章节，我们将通过两种方式，来演示项目部署，分别是：手动部署项目 和 基于shell脚本自动部署。</p><h3 id="3-1-手动部署项目"><a href="#3-1-手动部署项目" class="headerlink" title="3.1 手动部署项目"></a>3.1 手动部署项目</h3><p><strong>1). 在IDEA中开发SpringBoot项目并打成jar包</strong></p><p>项目是一个很简单的springboot项目(可以自己开发一个，也可以直接导入资料中提供的)，结构如下： </p><p><img src="https://img-blog.csdnimg.cn/0a9297d740844909b8a6f0e454e91252.png#pic_center" alt="在这里插入图片描述"></p><p>可以在本地的idea中先启动当前的demo工程，然后访问一下，看看工程是否正常访问。</p><p><img src="https://img-blog.csdnimg.cn/122466f9a4e54b2db55b426106f17637.png#pic_center" alt="在这里插入图片描述"></p><p>执行package指令，进行打包操作，将当前的springboot项目，打成一个jar包。 </p><p><strong>操作步骤</strong></p><ul><li><p>第一步: 引入Spring Boot打包插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--指定jar的名字--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二步: 执行命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理、打包 跳过测试</span></span><br><span class="line"><span class="attr">mvn</span> <span class="string">clean package -Dmaven.test.skip=true</span></span><br></pre></td></tr></table></figure></li><li><p>第三步: 运行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">java</span> <span class="string">-jar xxx.jar</span></span><br></pre></td></tr></table></figure></li><li><p>第四步: 浏览器访问 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p></li></ul><p><strong>2). 将jar包上传到Linux服务器</strong></p><p>通过 rz 指令，将打好的jar包上传至Linux服务器的 &#x2F;usr&#x2F;local&#x2F;app 目录下。 先执行指令创建app目录。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A. 在/usr/<span class="keyword">local</span>下创建目录<span class="keyword">app</span></span><br><span class="line"><span class="keyword">mkdir</span> /usr/<span class="keyword">local</span>/<span class="keyword">app</span></span><br><span class="line"></span><br><span class="line">B. 切换到<span class="keyword">app</span>目录下</span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/<span class="keyword">app</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/248b1278807c44c39d1609a3fbf67def.png#pic_center" alt="在这里插入图片描述"></p><p>此时这个jar包就上传到 &#x2F;usr&#x2F;local&#x2F;app 目录了。</p><p><img src="https://img-blog.csdnimg.cn/24423f13b7324f6f8b6eb8ab51db6af5.png#pic_center" alt="在这里插入图片描述"></p><p><strong>3). 启动SpringBoot程序</strong></p><p>由于我们的项目已经打成jar包上传上来到Linux服务器，我们只需要运行这个jar包项目就启动起来了，所以只需要执行如下指令即可： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar helloworld-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dbeb0be9e8bd4494a60f950203fdc6fa.png#pic_center" alt="在这里插入图片描述"></p><p>&#x3D;&#x3D;注意： 由于前面安装的Tomcat在启动时，会占用端口号8080，而当前springboot项目我们没有配置端口号，默认也是8080，所以我们要想启动springboot项目，需要把之前运行的Tomcat停止掉。&#x3D;&#x3D;</p><p><strong>4). 检查防火墙，确保8080端口对外开放，访问SpringBoot项目</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd  <span class="comment">--list-all</span></span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/79e77482aec346189c181746863c0f7e.png#pic_center" alt="在这里插入图片描述"></p><p>如果防火墙没有放开8080端口，还需要放开对应的端口号，执行如下指令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=8080/tcp --permanent</span><br></pre></td></tr></table></figure><p><strong>5). 访问测试</strong></p><p><a href="http://192.168.138.130:8080/hello">http://192.168.138.130:8080/hello</a></p><p><img src="https://img-blog.csdnimg.cn/89255793fdd2457780fbfa8f8714fb9a.png#pic_center" alt="在这里插入图片描述"></p><p><strong>6). 后台运行项目</strong></p><p>当前这个demo工程我们已经部署成功了，并且我们也可以访问项目了。但是这个工程目前是存在问题的，就是当前我们项目启动的这个窗口被霸屏占用了，&#x3D;&#x3D;如果我们把这个窗口关闭掉(或ctrl+c)，当前服务也就访问不到了&#x3D;&#x3D;，我们可以试一下。</p><p><img src="https://img-blog.csdnimg.cn/a0ce9065d9dc4146b60fc688dffd1010.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/f50520c505d84bfd8c776803270820ba.png#pic_center" alt="在这里插入图片描述"></p><p><strong>目前程序运行的问题：</strong></p><p>A. 线上程序不会采用控制台&#x3D;&#x3D;霸屏&#x3D;&#x3D;的形式运行程序，而是将程序在后台运行</p><p>B. 线上程序不会将日志输出到控制台，而是输出到日志文件，而且一旦关闭客户端窗口，我们程序就会关闭</p><p><strong>后台运行程序:</strong></p><p>要想让我们部署的项目进行后台运行，这个时候我们需要使用到linux中的一个命令 nohup ，接下来，就来介绍一下nohup命令。</p><blockquote><p><strong>nohup命令：</strong>英文全称 no hang up（不挂断），用于不挂断地运行指定命令，退出终端不会影响程序的运行</p><p><strong>语法格式：</strong> nohup Command [ Arg … ] [&amp;]</p><p><strong>参数说明：</strong></p><p>​Command：要执行的命令</p><p>​Arg：一些参数，可以指定输出文件</p><p>​&amp;：让命令在后台运行</p><p><strong>举例：</strong></p><p>​nohup java -jar boot工程.jar &amp;&gt; hello.log &amp;</p><p>​上述指令的含义为： 后台运行 java -jar 命令，并将日志输出到hello.log文件</p></blockquote><p>那么经过上面的介绍，我们可以推测中，我们要想让当前部署的项目后台运行，就可以使用下面的指令： </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="keyword">java </span>-<span class="keyword">jar </span>helloworld<span class="number">-1</span>.<span class="number">0</span>-SNAPSHOT.<span class="keyword">jar </span>&amp;&gt; hello.log &amp;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/08f9781688f74631ab0437d621fed2b7.png#pic_center" alt="在这里插入图片描述"></p><p>这样的话，我们的项目就已经启动成功了，我们可以通过ps指令，查看到系统的进程。</p><p><img src="https://img-blog.csdnimg.cn/297896425c134716884ccef5fe1e1a76.png#pic_center" alt="在这里插入图片描述"></p><p>接下来，我们再次访问我们的项目，来看看服务是否可用。</p><p><img src="https://img-blog.csdnimg.cn/4519053a58e048ddafc108b5174bafe8.png#pic_center" alt="在这里插入图片描述"></p><p><strong>7). 停止SpringBoot项目</strong></p><p><img src="https://img-blog.csdnimg.cn/5078116cd7734420a44b542a751613a9.png#pic_center" alt="在这里插入图片描述"></p><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li><p><strong>手动部署需要经历那些步骤</strong></p><ul><li><p>打包jar</p></li><li><p>把jar上传到linux</p></li><li><p>运行jar包。    nohup  java -jar   jar的名称    &amp; &gt;日志文件 &amp;</p></li></ul></li></ul><h3 id="3-2-基于Shell脚本自动部署"><a href="#3-2-基于Shell脚本自动部署" class="headerlink" title="3.2 基于Shell脚本自动部署"></a>3.2 基于Shell脚本自动部署</h3><h4 id="3-2-1-介绍"><a href="#3-2-1-介绍" class="headerlink" title="3.2.1 介绍"></a>3.2.1 介绍</h4><p>前面介绍的项目部署是手动部署，也就是部署过程中的每一步操作都需要我们手动操作。接下来，我们需要再讲解一下项目的自动部署，从而来简化项目部署的操作，那么我们先来整体上了解一下项目自动部署的流程及操作步骤。</p><p><img src="https://img-blog.csdnimg.cn/d207895177d0486e9ba2166d58b4bac4.png#pic_center" alt="在这里插入图片描述"></p><p>操作步骤如下： </p><p>1). 在Gitee上创建远程仓库，并将本地的项目代码推送到远程仓库中</p><p>2). 在Linux中安装Git,克隆代码</p><p>3). 在Linux中安装maven</p><p>4). 编写Shell脚本（拉取代码、编译、打包、启动）</p><p>5). 为用户授予执行Shell脚本的权限</p><p>6). 执行Shell脚本</p><h4 id="3-2-2-推送代码到远程"><a href="#3-2-2-推送代码到远程" class="headerlink" title="3.2.2 推送代码到远程"></a>3.2.2 推送代码到远程</h4><p>这部分操作，大家只需要参考之前讲解的Git，来完成helloworld工程代码推送即可。</p><p>A. 创建远程仓库</p><p><img src="https://img-blog.csdnimg.cn/57ca0a1c59574b36af27a8561b9fc71e.png#pic_center" alt="在这里插入图片描述"></p><p>B. 将idea中的代码提交并推送到远程仓库</p><p><img src="https://img-blog.csdnimg.cn/e91e077e0a704d549ea8a25c7c1db3de.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/87f9e73593b1436c952474aace9a560c.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2-3-Git操作"><a href="#3-2-3-Git操作" class="headerlink" title="3.2.3 Git操作"></a>3.2.3 Git操作</h4><p>1). Git软件安装（可以省略）</p><p>通过yum命令在线安装git，执行如下指令： </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">list</span> git列出git安装包</span><br><span class="line">yum <span class="keyword">install</span> git在线安装git</span><br></pre></td></tr></table></figure><p>通过上述指令，安装好git之后，我们就可以通过 git –version去验证git的环境。</p><p><img src="https://img-blog.csdnimg.cn/9a79f3a815fe43b882d3c4d8b8a20fe5.png#pic_center" alt="在这里插入图片描述"></p><p>2). Git克隆代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local/</span><br><span class="line">git clone https:<span class="regexp">//gi</span>tee.com<span class="regexp">/ChuanZhiBoKe/</span>helloworld.git</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1ad99dd17cbc4e238b438a24e4e028da.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2-4-Maven安装"><a href="#3-2-4-Maven安装" class="headerlink" title="3.2.4 Maven安装"></a>3.2.4 Maven安装</h4><p>由于我们的工程是maven工程，我们要想进行项目的编译打包，需要用到maven的指令，所以需要安装maven。具体操作步骤如下：</p><p><strong>1). 上传资料中提供的maven的安装包</strong></p><p>上传课程资料中的maven安装包到soft目录</p><p><strong>2). 解压maven安装包到&#x2F;usr&#x2F;local目录</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cd</span> /soft</span><br><span class="line"></span><br><span class="line"><span class="attribute">tar</span> -zxvf apache-maven-<span class="number">3</span>.<span class="number">5</span>.<span class="number">4</span>-bin.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/670b01c762e549ec983f831aa26c5cd5.png#pic_center" alt="在这里插入图片描述"></p><p><strong>3). 在&#x2F;etc&#x2F;profile配置文件中配置环境变量</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>profile</span><br><span class="line"></span><br><span class="line">修改配置文件，进入到命令模式，按G切换到最后一行，按a<span class="regexp">/i/</span>o进入插入模式，然后在最后加入如下内容 :</span><br><span class="line">JAVA_HOME=<span class="regexp">/usr/</span>local<span class="regexp">/jdk1.8.0_221/</span></span><br><span class="line">MAVEN_HOME=<span class="regexp">/usr/</span>local<span class="regexp">/apache-maven-3.5.4/</span></span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span><span class="regexp">/bin:$PATH:$MAVEN_HOME/</span>bin</span><br><span class="line">export JAVA_HOME PATH MAVEN_HOME</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后按ESC进入到命令模式，输入 :wq 保存并退出</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fb26c9c177554ccd80911c733165a669.png#pic_center" alt="在这里插入图片描述"></p><p>要想让配置的环境变量生效,还需要执行如下指令:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aec24aeb6c8f48fa953ccc901c668c4d.png#pic_center" alt="在这里插入图片描述"></p><p><strong>4). 修改maven的settings.xml配置文件,配置本地仓库地址</strong></p><p>A. 切换目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/apache-maven-3.5.4/</span>conf</span><br></pre></td></tr></table></figure><p>B. 编辑settings.xml配置文件</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim settings.<span class="built_in">xml</span></span><br></pre></td></tr></table></figure><p>在其中增加如下配置,配置本地仓库地址:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;<span class="regexp">/usr/</span>local<span class="regexp">/repo&lt;/</span>localRepository&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c7d9cf97973f4f0fbe93139ae6bc45ed.png#pic_center" alt="在这里插入图片描述"></p><p>并在settings.xml中的<mirrors>标签中,配置阿里云的私服</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/db5aee2562944a158134a80111b8d433.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2-5-Shell脚本准备"><a href="#3-2-5-Shell脚本准备" class="headerlink" title="3.2.5 Shell脚本准备"></a>3.2.5 Shell脚本准备</h4><blockquote><p>Shell脚本（shell script），是一种Linux系统中的脚本程序。使用Shell脚本编程跟 JavaScript、Java编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。 </p><p>对于Shell脚本编写不作为本课程重点内容，直接使用课程资料中提供的脚本文件bootStart.sh即可。</p></blockquote><p>在&#x2F;usr&#x2F;local&#x2F;目录下创建一个目录 sh(mkdir sh)，并将shell脚本上传到该目录下。或者直接在sh目录下创建一个脚本bootStart.sh，然后将资料中的bootStart.sh文件打开,内容拷贝过来即可。</p><p><img src="https://img-blog.csdnimg.cn/d2735ac7d46e4d0db39122a3dc359a4d.png#pic_center" alt="在这里插入图片描述"></p><p><strong>脚本解读:</strong> </p><p><img src="https://img-blog.csdnimg.cn/ea1dd5cd56644180b8296faee5606032.png#pic_center" alt="在这里插入图片描述"></p><h4 id="2-2-6-Linux权限"><a href="#2-2-6-Linux权限" class="headerlink" title="2.2.6 Linux权限"></a>2.2.6 Linux权限</h4><p>前面我们已经把Shell脚本准备好了，但是Shell脚本要想正常的执行，还需要给Shell脚本分配执行权限。 由于linux系统是一个多用户的操作系统，并且针对每一个用户，Linux会严格的控制操作权限。接下来，我们就需要介绍一下Linux系统的权限控制。</p><blockquote><p>1). &#x3D;&#x3D;chmod&#x3D;&#x3D;（英文全拼：change mode）命令是控制用户对文件的权限的命令</p><p>2). Linux中的权限分为三种 ：读(r)、写(w)、执行(x)</p><p>3). Linux文件权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）</p><p>4). 只有文件的所有者和超级用户可以修改文件或目录的权限</p><p>5). 要执行Shell脚本需要有对此脚本文件的执行权限(x)，如果没有则不能执行</p></blockquote><p>Linux系统中权限描述如下: </p><p><img src="https://img-blog.csdnimg.cn/9e597737491d4d8e90ed384ecc692c77.png#pic_center" alt="在这里插入图片描述"></p><p>解析当前脚本的权限情况: </p><p><img src="https://img-blog.csdnimg.cn/85453fe9567b4927950b7ef306ae4153.png#pic_center" alt="在这里插入图片描述"></p><p>chmod命令可以使用八进制数来指定权限(0 - 代表无 , 1 - 执行x , 2 - 写w , 4 - 读r):</p><table><thead><tr><th>值</th><th>权限</th><th>rwx</th></tr></thead><tbody><tr><td>7</td><td>读 + 写 + 执行</td><td>rwx</td></tr><tr><td>6</td><td>读 + 写</td><td>rw-</td></tr><tr><td>5</td><td>读 + 执行</td><td>r-x</td></tr><tr><td>4</td><td>只读</td><td>r–</td></tr><tr><td>3</td><td>写 + 执行</td><td>-wx</td></tr><tr><td>2</td><td>只写</td><td>-w-</td></tr><tr><td>1</td><td>只执行</td><td>–x</td></tr><tr><td>0</td><td>无</td><td>—</td></tr></tbody></table><p><strong>举例:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">777</span> bootStart.sh   为所有用户授予读、写、执行权限</span><br><span class="line"><span class="attribute">chmod</span> <span class="number">755</span> bootStart.sh   为文件拥有者授予读、写、执行权限，同组用户和其他用户授予读、执行权限</span><br><span class="line"><span class="attribute">chmod</span> <span class="number">210</span> bootStart.sh   为文件拥有者授予写权限，同组用户授予执行权限，其他用户没有任何权限</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p>三个数字分别代表不同用户的权限</p><ul><li>第1位表示文件拥有者的权限</li><li>第2位表示同组用户的权限</li><li>第3位表示其他用户的权限</li></ul><h4 id="2-2-7-授权并执行脚本"><a href="#2-2-7-授权并执行脚本" class="headerlink" title="2.2.7 授权并执行脚本"></a>2.2.7 授权并执行脚本</h4><p>在测试阶段，我们可以给所有的人都赋予执行该shell脚本的权限。所以可以执行如下指令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">777</span> bootStart.sh</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9140dcf0c1ca469cb057524f4011df37.png#pic_center" alt="在这里插入图片描述"></p><p>权限解读: </p><p>A. 第一个7，代表当前文件所有者root用户，对该文件具有读写执行权限；</p><p>B. 第二个7，代表当前文件所有者所属组的用户，对该文件具有读写执行权限；</p><p>B. 第三个7，代表其他用户，对该文件具有读写执行权限；</p><p>执行该shell脚本:</p><p> <img src="https://img-blog.csdnimg.cn/7e894795394c456dab5714df42d394b9.png#pic_center" alt="在这里插入图片描述"></p><p>&#x3D;&#x3D;注意： 在执行maven指令进行打包时，第一次执行可能会耗时比较长，因为在进行maven工程的打包时，需要到中央仓库下载工程依赖的jar包和插件(可以在settings.xml中配置阿里云私服加速下载)。&#x3D;&#x3D;</p><p>启动完成之后, 我们可以查看java进程：</p><p><img src="https://img-blog.csdnimg.cn/50166e298b5a47939389ff6fb427d2ae.png#pic_center" alt="在这里插入图片描述"></p><p>访问项目：</p><p><img src="https://img-blog.csdnimg.cn/442b8345638d45b4a235b18400b6a103.png#pic_center" alt="在这里插入图片描述"></p><h2 id="4-虚拟机克隆"><a href="#4-虚拟机克隆" class="headerlink" title="4. 虚拟机克隆"></a>4. 虚拟机克隆</h2><h3 id="虚拟机克隆的作用"><a href="#虚拟机克隆的作用" class="headerlink" title="虚拟机克隆的作用"></a>虚拟机克隆的作用</h3><p>以后我们需要玩集群，那么就需要有多台服务器，而且每台服务都需要安装相应的软件，这样子我们的工作就会重复了，解决方案：我们先在一台机器安装好所有的软件，然后克隆出来另外的机器。被克隆出来机器环境与供体是一模一样的。</p><h3 id="如何克隆"><a href="#如何克隆" class="headerlink" title="如何克隆"></a>如何克隆</h3><ol><li>克隆</li></ol><p><img src="https://img-blog.csdnimg.cn/5239cde5b8244937aefffcced770d3df.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2ff2bd9763af4b32ae0f48d57e17bedb.png#pic_center" alt="在这里插入图片描述"></p><ol start="2"><li>修改ip地址，否则会互相ip冲突</li></ol><p><img src="https://img-blog.csdnimg.cn/569b3d13e4d440c0858b536597cefea6.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e4258620183040b18016ad346b706907.png#pic_center" alt="在这里插入图片描述"></p><ol start="3"><li>重启网卡服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-镜像还原"><a href="#5-镜像还原" class="headerlink" title="5. 镜像还原"></a>5. 镜像还原</h2><h3 id="镜像还原的应用场景"><a href="#镜像还原的应用场景" class="headerlink" title="镜像还原的应用场景"></a>镜像还原的应用场景</h3><ol><li><p>某些同学晚上关机的时候是强制关机的，导致文件出现损坏，机器没法启动。</p><ol start="2"><li>后面我们的项目里面linux需要安装大量的软件的，这些软件目前都是在安装在老师的机器上，学生机器还没有，如果学生挨个安装耗时太久了，这时候老师可以把linux 的镜像拷贝给你们，然后还原出来与老师一模一样的机器。</li></ol></li></ol><h3 id="如何实现镜像还原"><a href="#如何实现镜像还原" class="headerlink" title="如何实现镜像还原"></a>如何实现镜像还原</h3><ol><li><strong>先把镜像文件拷贝给目标群体</strong></li></ol><p>​</p><p><img src="https://img-blog.csdnimg.cn/a667e0b8b0544abd983913877e2051c4.png#pic_center" alt="在这里插入图片描述"></p><ol start="2"><li>还原镜像</li></ol><p><img src="https://img-blog.csdnimg.cn/c9e8cf3439e94c2eb2abad0c3e4debe5.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/f7091c60b6a444b581eccb38a9aa9fd3.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/a14725ed587e42acba28b7e1cd301cc6.png#pic_center" alt="在这里插入图片描述"></p><ol start="3"><li>查看你本机的vm的网关</li></ol><p><img src="https://img-blog.csdnimg.cn/9336b6347a1a4fae813639634c22e643.png#pic_center" alt="在这里插入图片描述"></p><ol start="4"><li>修改ip（前三位）地址与网关一致</li></ol><p><img src="https://img-blog.csdnimg.cn/3f28259942034cef824274db64a31754.png#pic_center" alt="在这里插入图片描述"></p><ol start="5"><li>重启网卡</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot之入门案例</title>
    <link href="https://onlyonemomo.github.io/2022/08/25/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/SpringBoot%E4%B9%8B%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://onlyonemomo.github.io/2022/08/25/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/SpringBoot%E4%B9%8B%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</id>
    <published>2022-08-25T12:23:36.000Z</published>
    <updated>2022-08-25T12:31:19.497Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p><h3 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--1. 凡是springboot项目都必须要继承一个父模块--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 以后你需要使用哪个框架，那么就导入对应框架的启动器即可。</span></span><br><span class="line"><span class="comment"> 比如：springmvc - starter-web--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、编写SpringBoot项目启动类"><a href="#2、编写SpringBoot项目启动类" class="headerlink" title="2、编写SpringBoot项目启动类"></a>2、编写SpringBoot项目启动类</h3><blockquote><p>启动类就是带 @SpringBootApplication 注解的普通Java类【是运行SpringBoot项目的入口类】</p></blockquote><p><strong>核心代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootDemoApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6a053cda12f047d3b7d5cd06f3d189e1.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3、编写Controller"><a href="#3、编写Controller" class="headerlink" title="3、编写Controller"></a>3、编写Controller</h3><p><strong>核心代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">quick</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入<code>localhost:8080/quick</code><br><img src="https://img-blog.csdnimg.cn/abc240985e2a4aab97c280f8d661bcaa.png#pic_center" alt="在这里插入图片描述"><br>入门案例已编写完成了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。&lt;/p&gt;</summary>
    
    
    
    <category term="通往java之路" scheme="https://onlyonemomo.github.io/categories/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot之java打包SOP</title>
    <link href="https://onlyonemomo.github.io/2022/08/25/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/SpringBoot%E4%B9%8Bjava%E6%89%93%E5%8C%85SOP/"/>
    <id>https://onlyonemomo.github.io/2022/08/25/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/SpringBoot%E4%B9%8Bjava%E6%89%93%E5%8C%85SOP/</id>
    <published>2022-08-25T12:21:51.000Z</published>
    <updated>2022-08-25T12:24:13.424Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><h3 id="第一、先配置Maven环境变量"><a href="#第一、先配置Maven环境变量" class="headerlink" title="第一、先配置Maven环境变量"></a>第一、先配置Maven环境变量</h3><p><strong>图1：点击高级系统设置</strong><br><img src="https://img-blog.csdnimg.cn/8fdc10cdb43f41a9aa3a1c95bee3a104.png#pic_center" alt="在这里插入图片描述"></p><p><strong>图2：点击环境变量</strong><br><img src="https://img-blog.csdnimg.cn/ad233281f95249cf902791dbdf6947c4.png#pic_center" alt="在这里插入图片描述"></p><p><strong>图3：新建<code>MAVEN_HOME</code>系统变量</strong><br><img src="https://img-blog.csdnimg.cn/51812a58bdbc461fad6e68244e203313.png#pic_center" alt="在这里插入图片描述"></p><p><strong>图4：编辑path，在系统变量中引用MAVEN_HOME变量，指向MAVEN_HOME中的bin目录</strong>  <code>%MAVEN_HOME%\bin</code><br><img src="https://img-blog.csdnimg.cn/b99a906655dd48939f88b14724ab8fad.png#pic_center" alt="在这里插入图片描述"></p><p><strong>图5：输入mvn -v命令，如果出现maven版本号，就表明安装成功。</strong><br><img src="https://img-blog.csdnimg.cn/11de7a768b914f7dbe114efe2a35b90f.png#pic_center" alt="在这里插入图片描述"></p><h3 id="第二、在SpringBoot里面打包"><a href="#第二、在SpringBoot里面打包" class="headerlink" title="第二、在SpringBoot里面打包"></a>第二、在SpringBoot里面打包</h3><h5 id="第一步-引入Spring-Boot打包插件"><a href="#第一步-引入Spring-Boot打包插件" class="headerlink" title="第一步: 引入Spring Boot打包插件"></a>第一步: 引入Spring Boot打包插件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包的插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改jar的名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ROOT<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步-在IDEA-左下方的Terminal里执行命令"><a href="#第二步-在IDEA-左下方的Terminal里执行命令" class="headerlink" title="第二步: 在IDEA-左下方的Terminal里执行命令"></a>第二步: 在IDEA-左下方的Terminal里执行命令</h5><p><strong>温馨提示：</strong>要在对应的项目路径里面输入此命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理、打包 跳过测试</span></span><br><span class="line"><span class="attr">mvn</span> <span class="string">clean package -Dmaven.test.skip=true</span></span><br></pre></td></tr></table></figure><h5 id="第三步-在jar目录下，打开cmd运行"><a href="#第三步-在jar目录下，打开cmd运行" class="headerlink" title="第三步: 在jar目录下，打开cmd运行"></a>第三步: 在jar目录下，打开cmd运行</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure><p>: 在jar目录下，打开cmd运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure><h5 id="第四步：在浏览器输入访问路径"><a href="#第四步：在浏览器输入访问路径" class="headerlink" title="第四步：在浏览器输入访问路径"></a>第四步：在浏览器输入访问路径</h5>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>世界级天后中岛美雪的歌曲</title>
    <link href="https://onlyonemomo.github.io/2022/08/24/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/%E4%B8%96%E7%95%8C%E7%BA%A7%E5%A4%A9%E5%90%8E%E4%B8%AD%E5%B2%9B%E7%BE%8E%E9%9B%AA%E7%9A%84%E6%AD%8C%E6%9B%B2/"/>
    <id>https://onlyonemomo.github.io/2022/08/24/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/%E4%B8%96%E7%95%8C%E7%BA%A7%E5%A4%A9%E5%90%8E%E4%B8%AD%E5%B2%9B%E7%BE%8E%E9%9B%AA%E7%9A%84%E6%AD%8C%E6%9B%B2/</id>
    <published>2022-08-24T15:25:39.000Z</published>
    <updated>2022-08-25T12:48:28.138Z</updated>
    
    <content type="html"><![CDATA[<p><strong>中岛美雪号称养活了半个华语娱乐圈的人</strong>！中岛美雪，这个名字或许你会觉得陌生，但很多歌曲就是翻唱她的。<br>(1)比如邓丽君的《漫步人生路》，是根据中岛美雪1980年的单曲《习惯孤独》改编的，这首单曲曾创下了40万张销量的奇迹。<br>(2)1992年，《容易受伤的女人》红遍香港，王菲在各大音乐颁奖礼中获奖无数，就此跃入香港一线女歌手的行列。这首歌的原版歌曲《口红》，同样是中岛美雪作词、作曲并演唱的。<br>(3)还有范玮琪这首旋律激昂，引发无数听众共鸣的《最初的梦想》，日文原版名为《骑在银龙的背上》，中岛美雪用这首歌歌颂了一位孤岛医生，用“银龙飞跃”的形象，表达了对善良、纯真的追求与向往。</p><p>话不多说，一起来听一下我选出来的三首经典歌曲吧！！！</p><h5 id="第一首《骑在银龙的背上》"><a href="#第一首《骑在银龙的背上》" class="headerlink" title="第一首《骑在银龙的背上》"></a>第一首《骑在银龙的背上》</h5><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=69799435&bvid=BV1pE411Q7TQ&cid=269615233&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h5 id="第二首《幸福》"><a href="#第二首《幸福》" class="headerlink" title="第二首《幸福》"></a>第二首《幸福》</h5><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=628262163&bvid=BV1Qt4y1k7E9&cid=271284248&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h5 id="第三首《ひとり上手》漫步人生路原曲"><a href="#第三首《ひとり上手》漫步人生路原曲" class="headerlink" title="第三首《ひとり上手》漫步人生路原曲"></a>第三首《ひとり上手》漫步人生路原曲</h5><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=841414544&bvid=BV1C54y1q7QU&cid=215222372&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;中岛美雪号称养活了半个华语娱乐圈的人&lt;/strong&gt;！中岛美雪，这个名字或许你会觉得陌生，但很多歌曲就是翻唱她的。&lt;br&gt;(1)比如邓丽君的《漫步人生路》，是根据中岛美雪1980年的单曲《习惯孤独》改编的，这首单曲曾创下了40万张销量的奇迹。&lt;br&gt;(2)1992年，《容易受伤的女人》红遍香港，王菲在各大音乐颁奖礼中获奖无数，就此跃入香港一线女歌手的行列。这首歌的原版歌曲《口红》，同样是中岛美雪作词、作曲并演唱的。&lt;br&gt;(3)还有范玮琪这首旋律激昂，引发无数听众共鸣的《最初的梦想》，日文原版名为《骑在银龙的背上》，中岛美雪用这首歌歌颂了一位孤岛医生，用“银龙飞跃”的形象，表达了对善良、纯真的追求与向往。&lt;/p&gt;</summary>
    
    
    
    <category term="三千世界" scheme="https://onlyonemomo.github.io/categories/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/"/>
    
    
    <category term="歌曲" scheme="https://onlyonemomo.github.io/tags/%E6%AD%8C%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装和SSH连接工具使用SOP</title>
    <link href="https://onlyonemomo.github.io/2022/08/24/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/Linux%E5%AE%89%E8%A3%85%E5%92%8CSSH%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8SOP/"/>
    <id>https://onlyonemomo.github.io/2022/08/24/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/Linux%E5%AE%89%E8%A3%85%E5%92%8CSSH%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8SOP/</id>
    <published>2022-08-24T10:34:51.000Z</published>
    <updated>2022-08-24T10:34:34.444Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><h3 id="1-1-安装方式介绍"><a href="#1-1-安装方式介绍" class="headerlink" title="1.1 安装方式介绍"></a>1.1 安装方式介绍</h3><p>Linux系统的安装方式，主要包含以下两种：</p><p><img src="https://img-blog.csdnimg.cn/362a0c47299849cb8098c912a5ac5729.png#pic_center" alt="在这里插入图片描述"></p><table><thead><tr><th>方式</th><th>概述</th><th>场景</th></tr></thead><tbody><tr><td>物理机安装</td><td>直接将操作系统安装到服务器硬件&#96;</td><td>企业开发中，我们使用的服务器基本都是采用这种方式</td></tr><tr><td>虚拟机安装</td><td>通过虚拟机软件安装</td><td>我们在学习阶段，没有自己服务器，而我们又需要学Linux，就可以安装在虚拟机上(&#x3D;&#x3D;虚拟机的作用就是可以帮你模拟一台或者多台裸机出来&#x3D;&#x3D;)</td></tr></tbody></table><p><strong>虚拟机</strong>（Virtual Machine）指通过<strong>软件</strong>模拟的具有完整硬件系统功能、运行在完全隔离环境中的完整计算机系统。常用虚拟机软件： </p><ul><li><p>VMWare </p></li><li><p>VirtualBox</p></li><li><p>VMLite WorkStation</p></li><li><p>Qemu</p></li><li><p>HopeddotVOS</p></li></ul><p>那么我们就可以在课程中将Linux操作系统安装在虚拟机中，我们课上选择的虚拟机软件是VMware。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>安装linux系统方式有几种，虚拟机的作用？  <ul><li>物理机直接安装</li><li>通过虚拟机的软件模拟出裸机然后安装操作系统</li></ul></li></ul><h3 id="1-2-安装VMware"><a href="#1-2-安装VMware" class="headerlink" title="1.2 安装VMware"></a>1.2 安装VMware</h3><p><img src="https://img-blog.csdnimg.cn/a53a72e5ce674479a9fe573407ecf139.png#pic_center" alt="在这里插入图片描述"></p><p>在我们的课程资料中提供了VMware的安装程序。直接双击运行VMware安装程序，根据提示完成安装即可。</p><p><img src="https://img-blog.csdnimg.cn/8c706ad40fc442bda2599422d713752f.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/5b0683c1018747df9dff3a25a85bdfab.png#pic_center" alt="在这里插入图片描述"></p><p>以上就是VMware在安装时的每一步操作，基本上就是点击 “下一步” 一直进行安装。</p><p>&#x3D;&#x3D;注意： 安装完毕vm的时候检查一下的网卡，是否存在vm1与vm8这两张网卡,缺少这两张网卡任意一张以后要不就是不能够与windows通讯，要不就是不能够上外网 ,解决办法： 卸载重装vm，如果还不行，换vm的版本&#x3D;&#x3D;<br><img src="https://img-blog.csdnimg.cn/10e186c0777a4c1b8c832e98fbd5f2ad.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-3-安装Linux"><a href="#1-3-安装Linux" class="headerlink" title="1.3 安装Linux"></a>1.3 安装Linux</h3><p>VMware虚拟机安装完毕之后，我们就可以打开VMware，并在上面来安装Linux操作系统。具体步骤如下： </p><p><strong>1). 选择创建新的虚拟机</strong></p><p><img src="https://img-blog.csdnimg.cn/46fa4fa1ebb4471c93c49ee0d5efa39c.png#pic_center" alt="在这里插入图片描述"></p><p><strong>2). 选择”典型”配置</strong></p><p><img src="https://img-blog.csdnimg.cn/48ff36d3d21b4a41bf696d81c8ede3a0.png#pic_center" alt="在这里插入图片描述"></p><p><strong>3). 选择”稍后安装操作系统(S)”</strong><br><img src="https://img-blog.csdnimg.cn/6844a2057584455ab30ad5d112483396.png#pic_center" alt="在这里插入图片描述"></p><p><strong>4). 选择”Linux”操作系统,”CentOS7 64位”版本</strong></p><p><img src="https://img-blog.csdnimg.cn/554a27525c63404183c50bc40a4fbc6c.png#pic_center" alt="在这里插入图片描述"></p><p><strong>5). 设置虚拟机的名称及系统文件存放路径</strong></p><p><img src="https://img-blog.csdnimg.cn/2d5efb2425544fc58c387a6c565fa6e9.png#pic_center" alt="在这里插入图片描述"></p><p><strong>6). 设置磁盘容量</strong></p><p><img src="https://img-blog.csdnimg.cn/f3b6f6dab8554099b39436986e472043.png#pic_center" alt="在这里插入图片描述"></p><p><strong>7). 自定义硬件信息</strong></p><p><img src="https://img-blog.csdnimg.cn/8a639032a3da4ddd99a70516257defa9.png#pic_center" alt="在这里插入图片描述"></p><p><strong>8). 启动上述创建的新虚拟机</strong></p><p><img src="https://img-blog.csdnimg.cn/e964e944b0b64283bc797c0781b13fc1.png#pic_center" alt="在这里插入图片描述"></p><p><strong>9). 选择”Install CentOS7”</strong></p><p><img src="https://img-blog.csdnimg.cn/4ead6d664018407291585e8190a63e87.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>进入到Linux系统里面, 我们发现光标无法移动到windows操作系统中了, 这个时候, 我们可以通过快捷键 “Ctrl+Alt” 切换光标到windows系统中。</p></blockquote><p><strong>10). 选择语言为 “简体中文”</strong></p><p><img src="https://img-blog.csdnimg.cn/fff3eb4606e5424699e0c2fe60ec6442.png#pic_center" alt="在这里插入图片描述"></p><p><strong>11). 选择”自动配置分区”</strong></p><p><img src="https://img-blog.csdnimg.cn/2aa35fa7ee0a47c7815a53c11b034f33.png#pic_center" alt="在这里插入图片描述"></p><p>12). 选择”最小安装”</p><p><img src="https://img-blog.csdnimg.cn/884031b5bd4e4cf39538df625b8d53fe.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/b2cbf5a2b5864b1588c5f8f4783f4d1f.png#pic_center" alt="在这里插入图片描述"></p><p><strong>13). 启动网卡</strong></p><p><img src="https://img-blog.csdnimg.cn/d08cde2b3cf1428cb27ee3ef7d69adad.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/a77b89742f75425ca6e2bb68aafaa198.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/33bacaff11f44f3c948037d33c65d6ad.png#pic_center" alt="在这里插入图片描述"></p><p><strong>13). 设置”root”用户密码</strong></p><p><img src="https://img-blog.csdnimg.cn/d159abaae2144a409f81a2bdcecfec7a.png#pic_center" alt="在这里插入图片描述"></p><p>安装完毕后，点击窗口中的蓝色的 “重启” 按钮，重启Linux系统。</p><p><strong>14). 登录系统</strong></p><p><img src="https://img-blog.csdnimg.cn/ec966e2d86ca4e6c9b225ff5ea8d5384.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p><font color='red'>注意 : 在Linux系统中，在命令行中输入密码信息，为了保证安全性，密码是不显示的(看似没有输入，实际已经输入了)；</font></p></blockquote><p>2). 重新启动虚拟机</p><p><img src="https://img-blog.csdnimg.cn/0cd0de4a414343f69a4f2951343c7ba0.png#pic_center" alt="在这里插入图片描述"></p><p>有可能会出现的问题：</p><p><img src="https://img-blog.csdnimg.cn/fee2c27a2d64455f96b7d94af5fff58a.png#pic_center" alt="在这里插入图片描述"><br>    <strong>解决方案的步骤：</strong></p><p>​1. 根据你机器的型号百度如何进入bios</p><pre><code>                  2.  在bios里面开启虚拟化即可。</code></pre><h3 id="1-4-安装SSH连接工具"><a href="#1-4-安装SSH连接工具" class="headerlink" title="1.4 安装SSH连接工具"></a>1.4 安装SSH连接工具</h3><p>以后我们进入企业工作，每个开发人员都是通过客户端软件连接公司的服务器， 所以我们需要使用客户端</p><p>客户端操作效果非常好</p><h4 id="虚拟机操作linux系统的问题"><a href="#虚拟机操作linux系统的问题" class="headerlink" title="虚拟机操作linux系统的问题"></a>虚拟机操作linux系统的问题</h4><p><img src="https://img-blog.csdnimg.cn/8fe83e81e3f94f6b85e28142573d5ac7.png#pic_center" alt="在这里插入图片描述"></p><h4 id="常见的客户端软件"><a href="#常见的客户端软件" class="headerlink" title="常见的客户端软件"></a>常见的客户端软件</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.SecureCRT</span>(操作客户端命令)，SecureFx（用于传输文件）</span><br><span class="line"><span class="number">2</span><span class="selector-class">.XShell</span>(操作客户端命令),XFtp（用于传输文件）</span><br><span class="line"><span class="number">3</span><span class="selector-class">.ModaXterm</span>软件（简单好用，推荐使用）</span><br><span class="line">上面的软件根据文档安装（《资料\<span class="number">03</span>_使用客户端连接工具连接linux系统操作\客户端软件<span class="number">3</span><span class="built_in">_MobaXterm</span>(推荐)》）</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/df069f1cf0514f629213d390e540e543.png#pic_center" alt="在这里插入图片描述"></p><p>进入目录, 下一步下一步安装即可</p><h4 id="ModaXterm软件的使用"><a href="#ModaXterm软件的使用" class="headerlink" title="ModaXterm软件的使用"></a>ModaXterm软件的使用</h4><p>1.建立连接服务器linux的会话， 查看linux 的机器的ip地址的命令： ifconfig</p><p><img src="https://img-blog.csdnimg.cn/d050b305eab442c7960641631e4c5ea3.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/14b8a2650d4e4b98a0f5b9a0ae415e1c.png#pic_center" alt="在这里插入图片描述"></p><p>使用界面</p><p><img src="https://img-blog.csdnimg.cn/f8b18e6de21c4d8a9d9a2cf6e9ff96c2.png#pic_center" alt="在这里插入图片描述"></p><h4 id="客户端的好处"><a href="#客户端的好处" class="headerlink" title="客户端的好处"></a>客户端的好处</h4><p><img src="https://img-blog.csdnimg.cn/7eea7c7da93b4bfa8e726f8aabd610d0.png#pic_center" alt="在这里插入图片描述"></p><h4 id="传递文件"><a href="#传递文件" class="headerlink" title="传递文件"></a>传递文件</h4><p><img src="https://img-blog.csdnimg.cn/28cdba66c12148e4807d97aae01d5a7a.png#pic_center" alt="在这里插入图片描述"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><strong>为什么我们需要使用linux的客户端软件？</strong></p><ul><li><p>远程连接linux的服务器，方便我们查看日志信息</p></li><li><p>我们写好的代码可以直接上传到服务器上。</p></li></ul><h3 id="1-5-Linux目录结构"><a href="#1-5-Linux目录结构" class="headerlink" title="1.5 Linux目录结构"></a>1.5 Linux目录结构</h3><p>登录到Linux系统之后，我们需要先来熟悉一下Linux的目录结构。在Linux系统中，也是存在目录的概念的，但是Linux的目录结构和Windows的目录结构是存在比较多的差异的 在Windows目录下，是一个一个的盘符(C盘、D盘、E盘)，目录是归属于某一个盘符的。Linux系统中的目录有以下特点： </p><p><strong>A. &#x2F; 是所有目录的顶点</strong></p><p><strong>B. 目录结构像一颗倒挂的树</strong></p><p><strong>Linux 和 Windows的目录结构对比:</strong> </p><p><img src="https://img-blog.csdnimg.cn/8337d26dac0e499782671a5761fe5c9c.png#pic_center" alt="在这里插入图片描述"></p><p>Linux的目录结构，如下： </p><p><img src="https://img-blog.csdnimg.cn/037d0ef581c44fb2bf7e99d2470e32c7.png#pic_center" alt="在这里插入图片描述"></p><p>根目录&#x2F; 下各个目录的作用及含义说明:  </p><table><thead><tr><th>编号</th><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>&#x2F;bin</td><td>存放二进制可执行文件</td></tr><tr><td>2</td><td>&#x2F;boot</td><td>存放系统引导时使用的各种文件</td></tr><tr><td>3</td><td>&#x2F;dev</td><td>存放设备文件</td></tr><tr><td>4</td><td>&#x3D;&#x3D;&#x2F;etc&#x3D;&#x3D;</td><td>存放系统配置文件，  比如：安装完毕jdk，安装maven、配置环境变量</td></tr><tr><td>5</td><td>&#x3D;&#x3D;&#x2F;home&#x3D;&#x3D;</td><td>用户的主目录,存放用户的个人资料的。比如：linux是一个多用户的操作系统，创建了zhangsan用户，那么在home目录里面有zhangsan文件夹。</td></tr><tr><td>6</td><td>&#x2F;lib</td><td>存放程序运行所需的共享库和内核模块</td></tr><tr><td>7</td><td>&#x2F;opt</td><td>额外安装的可选应用程序包所放置的位置</td></tr><tr><td>8</td><td>&#x3D;&#x3D;&#x2F;root&#x3D;&#x3D;</td><td>超级管理员的主目录</td></tr><tr><td>9</td><td>&#x2F;sbin</td><td>存放二进制可执行文件，只有root用户才能访问</td></tr><tr><td>10</td><td>&#x2F;tmp</td><td>存放临时文件</td></tr><tr><td>11</td><td>&#x3D;&#x3D;&#x2F;usr&#x3D;&#x3D;</td><td>以后我们安装软件都存储在该目录中</td></tr><tr><td>12</td><td>&#x2F;var</td><td>存放运行时需要改变数据的文件，例如日志文件</td></tr></tbody></table><h4 id="小结：常用的目录"><a href="#小结：常用的目录" class="headerlink" title="小结：常用的目录"></a>小结：常用的目录</h4><ul><li>etc 存放系统的配置信息，比如：环境变量</li><li>home: 存放用户的主目录的，当你有一个张三的用户，里面就有一个张三的文件夹</li><li>root”: 超级管理员的主目录<br>                                  |<br>| 11   | &#x3D;&#x3D;&#x2F;usr&#x3D;&#x3D;  | 以后我们安装软件都存储在该目录中                             |<br>| 12   | &#x2F;var      | 存放运行时需要改变数据的文件，例如日志文件                   |</li></ul><h4 id="小结：常用的目录-1"><a href="#小结：常用的目录-1" class="headerlink" title="小结：常用的目录"></a>小结：常用的目录</h4><ul><li>etc 存放系统的配置信息，比如：环境变量</li><li>home: 存放用户的主目录的，当你有一个张三的用户，里面就有一个张三的文件夹</li><li>root”: 超级管理员的主目录</li><li>usr: 一般软件的安装都在改目录</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>Springboot自动装配的原理</title>
    <link href="https://onlyonemomo.github.io/2022/08/24/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/Springboot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E7%9A%84%E5%8E%9F%E7%90%86%E4%B9%8B%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/"/>
    <id>https://onlyonemomo.github.io/2022/08/24/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/Springboot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E7%9A%84%E5%8E%9F%E7%90%86%E4%B9%8B%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</id>
    <published>2022-08-24T10:12:40.000Z</published>
    <updated>2022-08-26T10:58:27.673Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p><h3 id="一、springboot是如何实现自动装配的呢-？"><a href="#一、springboot是如何实现自动装配的呢-？" class="headerlink" title="一、springboot是如何实现自动装配的呢 ？"></a>一、springboot是如何实现自动装配的呢 ？</h3><h5 id="1、-SpringBootApplication注解"><a href="#1、-SpringBootApplication注解" class="headerlink" title="1、@SpringBootApplication注解"></a>1、@SpringBootApplication注解</h5><p>首先我们得看源码，springboot类中有一个注解<code>@SpringBootApplication</code>,这是一个组合注解。我们点击进去看一下：<br>图1：<br><img src="https://img-blog.csdnimg.cn/7c13fd147fdf4822a72e57eb91cbff10.png#pic_center" alt="在这里插入图片描述"></p><p>图2：点进去之后可以看到如下图<br><img src="https://img-blog.csdnimg.cn/1ce9583c02b54ac0a42ec3636e6f8d12.png#pic_center" alt="在这里插入图片描述"></p><p>(1) 第一类: JDK原生注解4个</p><blockquote><p>@Target(ElementType.TYPE) &#x2F;&#x2F;当前注解的使用范围<br>@Retention(RetentionPolicy.RUNTIME) &#x2F;&#x2F;生命周期<br>@Documented &#x2F;&#x2F;声明在生成doc文档时是否带着注解<br>@Inherited &#x2F;&#x2F;声明是否子类会显示父类的注解</p></blockquote><p>@SpringBootApplication中有3个主要注解 </p><blockquote><p>1.@SpringBootConfiguration   &#x2F;&#x2F;表示该类是一个配置类<br>2.@ComponentScan &#x2F;&#x2F;包扫描，扫描启动类所在的包与启动类所在的子包<br>3.@EnableAutoConfiguration  &#x2F;&#x2F;开启自动装配</p></blockquote><h5 id="2、-EnableAutoConfiguration"><a href="#2、-EnableAutoConfiguration" class="headerlink" title="2、@EnableAutoConfiguration"></a>2、@EnableAutoConfiguration</h5><p>@EnableAutoConfiguration这个注解是开启自动装配的注解核心，它的作用就是获取配置类，扫描并注入IOC容器中管理，它也是一个组合注解。我们点进去看源码。<br>图3：<br><img src="https://img-blog.csdnimg.cn/75039d26741642749047542cf8ee9e99.png#pic_center" alt="在这里插入图片描述"></p><p>我们可以看到**@Import({AutoConfigurationImportSelector.class})** 导入<strong>AutoConfigurationImportSelector.class</strong>这个类，这里面有一个selectImports方法里面调用了getCandidateConfigurations方法去加载META-INF&#x2F;spring.factories文件。<br>图4：进入AutoConfigurationImportSelector类可看到selectImports方法<br><img src="https://img-blog.csdnimg.cn/0ec3b28c750144888588398b804d4161.png#pic_center" alt="在这里插入图片描述"></p><p>图5：点击getAutoConfigurationEntry方法进入可看到getCandidateConfigurations<br><img src="https://img-blog.csdnimg.cn/a29b62a07bd74993b1ba8e012798f727.png#pic_center" alt="在这里插入图片描述"></p><p>图6：从这里可以看到getCandidateConfigurations加载了META-INF&#x2F;spring.factories文件<br><img src="https://img-blog.csdnimg.cn/9a0a0ce2e1624ebfb17678338ca445c4.png#pic_center" alt="在这里插入图片描述"></p><h5 id="3、META-INF-x2F-spring-factories是用来干嘛的？"><a href="#3、META-INF-x2F-spring-factories是用来干嘛的？" class="headerlink" title="3、META-INF&#x2F;spring.factories是用来干嘛的？"></a>3、META-INF&#x2F;spring.factories是用来干嘛的？</h5><blockquote><p>该文件是定义了springboot自动装配的框架自动装配类</p></blockquote><p>图7：</p><p><img src="https://img-blog.csdnimg.cn/cbd933b0b0d5454885b75c61e1de1aea.png#pic_center" alt="在这里插入图片描述"></p><p>怎么确认自动装配类不会把所有的装配类加载进来呢？这个时候我们点进去RedisAutoConfiguration这个装配类，可以看到@ConditionalOnClass(RedisOperations.class)，也就是说有这个类在内存中，这个类才会被加载。<br>图8：<br><img src="https://img-blog.csdnimg.cn/fb86b23ad9724cda98f5fa6db9e6961a.png#pic_center" alt="在这里插入图片描述"></p><h5 id="4、这个类在哪里呢？怎么样才会被自动装配加载？"><a href="#4、这个类在哪里呢？怎么样才会被自动装配加载？" class="headerlink" title="4、这个类在哪里呢？怎么样才会被自动装配加载？"></a>4、这个类在哪里呢？怎么样才会被自动装配加载？</h5><p>一旦导入这个类的启动器，那么就会被自动装配加载。<br>图9：<br><img src="https://img-blog.csdnimg.cn/1bdf0ee391484cb6aa74ed284dd4be6a.png#pic_center" alt="在这里插入图片描述"></p><p>总结：Spring Boot启动的时候会通过@EnableAutoConfiguration注解找到META-INF&#x2F;spring.factories配置文件中的所有自动配置类，并对其进行加载，而这些自动配置类都是以AutoConfiguration结尾来命名的。通过SpringFactoriesLoader机制创建对应的bean，注入到容器中，完成了自动注入spring容器，本来需要在spring的xml配置文件中去配置bean的操作就免去了 ，也就是springboot完成了自动装配。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。&lt;/p&gt;</summary>
    
    
    
    <category term="通往java之路" scheme="https://onlyonemomo.github.io/categories/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
</feed>
