<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  <subtitle>世界好大，修行好难</subtitle>
  <link href="https://onlyonemomo.github.io/atom.xml" rel="self"/>
  
  <link href="https://onlyonemomo.github.io/"/>
  <updated>2022-10-22T08:37:58.675Z</updated>
  <id>https://onlyonemomo.github.io/</id>
  
  <author>
    <name>onlyone Mo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>致无苗族-神选之子</title>
    <link href="https://onlyonemomo.github.io/2022/10/22/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/%E8%87%B4%E6%97%A0%E8%8B%97%E6%97%8F-%E7%A5%9E%E9%80%89%E4%B9%8B%E5%AD%90/"/>
    <id>https://onlyonemomo.github.io/2022/10/22/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/%E8%87%B4%E6%97%A0%E8%8B%97%E6%97%8F-%E7%A5%9E%E9%80%89%E4%B9%8B%E5%AD%90/</id>
    <published>2022-10-22T08:34:39.000Z</published>
    <updated>2022-10-22T08:37:58.675Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="致无苗族-神选之子"><a href="#致无苗族-神选之子" class="headerlink" title="致无苗族-神选之子"></a>致无苗族-神选之子</h3><script type="text/javascript" src="https://web-1253780623.cos.ap-shanghai.myqcloud.com/zhf-blog/js/ckplayer.js"></script>  <div class="videosamplex"><script type="text/javascript" src="https://web-1253780623.cos.ap-shanghai.myqcloud.com/zhf-blog/js/gotoplayer.js"> </script><div class="videosamplex">   <video id="videoplayer"    src="http://ftp6553344.host124.sanfengyun.cn/sp/VT_g3GoJpktrBz-9.mp4"></video>  </div>  <script>     gotoplayer("http://ftp6553344.host124.sanfengyun.cn/sp/VT_g3GoJpktrBz-9.mp4");</script>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;</summary>
    
    
    
    <category term="三千世界" scheme="https://onlyonemomo.github.io/categories/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>面试题答案</title>
    <link href="https://onlyonemomo.github.io/2022/09/24/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/"/>
    <id>https://onlyonemomo.github.io/2022/09/24/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/</id>
    <published>2022-09-24T09:03:39.000Z</published>
    <updated>2022-10-20T06:01:08.463Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="面试宝典"><a href="#面试宝典" class="headerlink" title="面试宝典"></a>面试宝典</h3><h5 id="1、多态的前提"><a href="#1、多态的前提" class="headerlink" title="1、多态的前提"></a>1、多态的前提</h5><blockquote><p>多态是同一个行为具有多种不同表现形式。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">多态的前提：</span><br><span class="line"><span class="code">    1.有继承/实现的关系</span></span><br><span class="line"><span class="code">    2.有方法重写</span></span><br><span class="line"><span class="code">    3.父类引用指向子类对象</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">多态下方法的访问：编译看左边，运行看右边</span></span><br><span class="line"><span class="code">多态下变量的访问：编译看左边，运行看左边（变量没有多态）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">多态的缺点：</span><br><span class="line"><span class="code">    多态下，无法使用子类独有的方法</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">多态的优点：提高代码的扩展性。</span><br><span class="line">定义方法时，如果将父类 或 接口 作为参数，在调用方法时，可以传递任意子类对象极大提高方法的通用性。</span><br></pre></td></tr></table></figure><h5 id="2、方法重写的要求"><a href="#2、方法重写的要求" class="headerlink" title="2、方法重写的要求"></a>2、方法重写的要求</h5><blockquote><p>方法重写：子类继承了父类的某一个方法，对父类的方法进行升级和改造<br>@Override &#x2F;&#x2F;注解, 可以检查重写的语法是否正确</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法重写的要求：</span><br><span class="line">    <span class="number">1.</span>方法名，参数列表要相同</span><br><span class="line">    <span class="number">2.</span>返回值如果是基本类型，必须一样，如果是引用类型，子类可以是更小的类型</span><br><span class="line">    <span class="number">3.</span>重写的方法，权限 大于或等于父类的方法 （<span class="keyword">public</span> &gt; <span class="keyword">protected</span>  &gt; 缺省 &gt;  <span class="keyword">private</span>）</span><br><span class="line">    <span class="number">4.</span>父类私有的方法，不能重写</span><br></pre></td></tr></table></figure><h5 id="3、重载和重写的区别"><a href="#3、重载和重写的区别" class="headerlink" title="3、重载和重写的区别"></a>3、重载和重写的区别</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 重载：</span><br><span class="line">发生在同一个类中，方法名相同，参数列表不一致，构成重载，与返回值类型无关。</span><br><span class="line">参数列表 :<span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> b)</span></span>&#123; <span class="keyword">return</span> a+b&#125; 方法的参数列表就是(<span class="type">int</span>,<span class="type">int</span>)</span><br><span class="line"><span class="number">2.</span> 重写：</span><br><span class="line">发生在父子类中，方法名.参数列表必须相同，返回值范围小于等于父类，抛出的异</span><br><span class="line">常范围小于等于父类，</span><br></pre></td></tr></table></figure><h5 id="4、泛型的作用-lt-gt-和-的使用场景-和区别"><a href="#4、泛型的作用-lt-gt-和-的使用场景-和区别" class="headerlink" title="4、泛型的作用  &lt;?&gt; 和  的使用场景 和区别"></a>4、泛型的作用  &lt;?&gt; 和 <T> 的使用场景 和区别</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">T</span>：表示确定的类型，最常用的泛型表示方法。 </span><br><span class="line">? ：表示不确定的类型，类似于通配符。</span><br><span class="line"></span><br><span class="line"><span class="built_in">T</span>和? 运用的地方有点不同, ?是定义在引用变量上, <span class="built_in">T</span>是类上或方法上</span><br></pre></td></tr></table></figure><h5 id="5、java集合有哪些数据结构"><a href="#5、java集合有哪些数据结构" class="headerlink" title="5、java集合有哪些数据结构"></a>5、java集合有哪些数据结构</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">栈    先进后出  弹夹</span><br><span class="line">队列  先进先出  排队</span><br><span class="line"></span><br><span class="line">数组  查询快，增删慢 （索引）定义的时候就指定空间  <span class="built_in">ArrayList</span></span><br><span class="line">链表  查询慢，增删快 （节点）空间不受限制   LinkedList</span><br></pre></td></tr></table></figure><h5 id="6、hashmap和currenthashmap的区别"><a href="#6、hashmap和currenthashmap的区别" class="headerlink" title="6、hashmap和currenthashmap的区别"></a>6、hashmap和currenthashmap的区别</h5><blockquote><p>1、HashMap 是<strong>非线程安全</strong>的，HashTable 是线程<strong>安全</strong>的。 </p><p>2、HashMap 的键和值都<strong>允许有</strong> <strong>null</strong> <strong>值</strong>存在，而 HashTable 则<strong>不行</strong>。 </p><p>3、因为线程安全的问题，HashMap <strong>效率</strong>比 HashTable 的<strong>要高</strong>。 </p><p>4、Hashtable 是同步的，而 HashMap 不是。因此，HashMap 更适合于单线 <strong>程环境</strong>，而 Hashtable 适合于多线程环境。一般现在不建议用 HashTable, ① 是 HashTable 是遗留类，内部实现很多没优化和冗余。②即使在多线程环境下， 现在也有同步的 ConcurrentHashMap 替代，没有必要因为是多线程而用HashTable。</p></blockquote><h5 id="7、多线程synchronized和lock锁的区别"><a href="#7、多线程synchronized和lock锁的区别" class="headerlink" title="7、多线程synchronized和lock锁的区别"></a>7、多线程synchronized和lock锁的区别</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="keyword">synchronized</span>是java关键字，而Lock是java中的一个接口</span><br><span class="line"><span class="number">2</span>、<span class="keyword">synchronized</span>会自动释放锁，而Lock必须手动释放锁</span><br><span class="line"><span class="number">3</span>、<span class="keyword">synchronized</span>是不可中断的，Lock可以中断也可以不中断</span><br><span class="line"><span class="number">4</span>、通过Lock可以知道线程有没有拿到锁，而<span class="keyword">synchronized</span>不能</span><br><span class="line"><span class="number">5</span>、<span class="keyword">synchronized</span>能锁住方法和代码块，而Lock只能锁住代码块</span><br><span class="line"><span class="number">6</span>、Lock可以使用读锁提高多线程读效率</span><br><span class="line"><span class="number">7</span>、<span class="keyword">synchronized</span>是非公平锁，ReentranLock可以控制是否公平锁</span><br></pre></td></tr></table></figure><h5 id="8、volatile的作用"><a href="#8、volatile的作用" class="headerlink" title="8、volatile的作用"></a>8、volatile的作用</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、保证内存可见性</span><br><span class="line"><span class="number">2</span>、禁止指令重排序</span><br><span class="line"><span class="number">3</span>、<span class="keyword">volatile</span>并不能保证原子性</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span>应用：</span><br><span class="line">①状态量标记（如上flag）</span><br><span class="line">②懒汉式单例模式</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Singleton</span>():完成<span class="number">3</span>步  分配内存空间<span class="number">1</span>、初始化对象<span class="number">2</span>、将Singleton对象指向分配的内存地址<span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="9、hashset去重原理"><a href="#9、hashset去重原理" class="headerlink" title="9、hashset去重原理"></a>9、hashset去重原理</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashSet集合存储自定义元素，需要重写<span class="keyword">equals</span>和hashCode方法，才能根据属性值去重</span><br></pre></td></tr></table></figure><h5 id="10、list、set、map的存储区别"><a href="#10、list、set、map的存储区别" class="headerlink" title="10、list、set、map的存储区别"></a>10、list、set、map的存储区别</h5><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>和<span class="built_in">Set</span>是存储单列数据的集合，<span class="built_in">Map</span>是存储键值对这样的双列数据的集合；</span><br><span class="line"><span class="built_in">List</span>中存储的数据是有顺序的，并且值允许重复；</span><br><span class="line"><span class="built_in">Map</span>中存储的数据是无序的，它的键是不允许重复的，但是值是允许重复的；</span><br><span class="line"><span class="built_in">Set</span>中存储的数据是无顺序的，并且不允许重复，<span class="variable">HashSet</span>是靠<span class="variable">hashCode</span>和<span class="variable">equals</span>确定位置<span class="operator">,</span><span class="variable">TreeSet</span>靠元素实现的<span class="variable">Comparable</span>接口方法或比较器<span class="variable">Comparator</span>确定位置。</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span></span><br><span class="line">存入和取出无序</span><br><span class="line">元素不重复</span><br><span class="line">无索引</span><br></pre></td></tr></table></figure><h5 id="11、cookies和session的区别"><a href="#11、cookies和session的区别" class="headerlink" title="11、cookies和session的区别"></a>11、cookies和session的区别</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cookies是属于<span class="keyword">Session</span>对象的一种。但有不同，Cookies不会占服务器资源，是存在客服端内存或者一个cookie的文本文件中；而“<span class="keyword">Session</span>”则会占用服务器资源。<span class="keyword">Session</span>过多时，会增加服务器压力</span><br><span class="line"></span><br><span class="line"><span class="keyword">Session</span>比Cookie更具有安全性</span><br><span class="line">使用cookie时不可以存入重要信息,以防信息泄露造成损失.</span><br><span class="line"><span class="keyword">session</span> 能够存储任意的 java 对象，cookie 只能存储 String 类型的对象</span><br></pre></td></tr></table></figure><h5 id="12、http和https的区别"><a href="#12、http和https的区别" class="headerlink" title="12、http和https的区别"></a>12、http和https的区别</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="keyword">https</span>的端口是<span class="number">443</span>，而<span class="keyword">http</span>的端口是<span class="number">80</span>，且两者的连接方式不同；</span><br><span class="line"><span class="number">2</span>、<span class="keyword">http</span>传输是明文的，而<span class="keyword">https</span>是用ssl进行加密的，<span class="keyword">https</span>的安全性更高；</span><br><span class="line"><span class="number">3</span>、<span class="keyword">https</span>是需要申请证书的，而<span class="keyword">http</span>不需要。</span><br></pre></td></tr></table></figure><h5 id="13、http请求体的请求格式"><a href="#13、http请求体的请求格式" class="headerlink" title="13、http请求体的请求格式"></a>13、http请求体的请求格式</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>、请求行：请求数据的第一行。其中GET表示请求方式， / 表示请求资源路径，HTTP/<span class="number">1</span>,<span class="number">1</span>表示协议版本</span><br><span class="line"><span class="attribute">2</span>、请求头：第二行开始，格式为key：value形式</span><br><span class="line"><span class="attribute">3</span>、请求体：POST请求的最后一部分，存放请求参数</span><br></pre></td></tr></table></figure><h5 id="14、sql语句的执行流程"><a href="#14、sql语句的执行流程" class="headerlink" title="14、sql语句的执行流程"></a>14、sql语句的执行流程</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、最先执行<span class="keyword">from</span> tab；</span><br><span class="line"><span class="number">2</span>、<span class="keyword">where</span>语句是对条件加以限定；</span><br><span class="line"><span class="number">3</span>、分组语句【<span class="keyword">group</span> <span class="keyword">by</span>…… <span class="keyword">having</span>】；</span><br><span class="line"><span class="number">4</span>、聚合函数；</span><br><span class="line"><span class="number">5</span>、<span class="keyword">select</span>语句；</span><br><span class="line"><span class="number">6</span>、<span class="keyword">order</span> <span class="keyword">by</span>排序语句。</span><br></pre></td></tr></table></figure><h5 id="15、ThreadLocal-有两种典型的使用场景"><a href="#15、ThreadLocal-有两种典型的使用场景" class="headerlink" title="15、ThreadLocal 有两种典型的使用场景"></a>15、ThreadLocal 有两种典型的使用场景</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">场景<span class="number">1</span>：</span><br><span class="line">ThreadLocal 用作保存每个线程独享的对象，为每个线程都创建一个副本，这样每个线程都可以修改自己所拥有的副本, 而不会影响其他线程的副本，确保了线程安全。</span><br><span class="line"></span><br><span class="line">场景<span class="number">2</span>：</span><br><span class="line">ThreadLocal 用作每个线程内需要独立保存信息，以便供其他方法更方便地获取该信息的场景。每个线程获取到的信息可能都是不一样的，前面执行的方法保存了信息后，后续方法可以通过ThreadLocal 直接获取到，避免了传参，类似于全局变量的概念。</span><br><span class="line"></span><br><span class="line">ThreadLocal 使用注意事项</span><br><span class="line">remove</span><br><span class="line"><span class="number">1.</span>要注意使用remove, 如果不清理，会有内存泄露问题</span><br><span class="line"><span class="number">2.</span>要注意remove,一个请求线程中的多个层之间，只需要保证最后一层去清除。否则容易误清。</span><br><span class="line">案例：</span><br><span class="line">LogUtil, 添加日志的功能是用切面方式实现的，在切面中向ThreadLocal里存值，然后启动异步线程去存日志。然后对ThreadLocal做了清理。造成的影响是，这个操作后面的操作都无法获取ThreadLocal里的缓存。比如 userId 等用户信息。</span><br></pre></td></tr></table></figure><h5 id="16、seata的模式"><a href="#16、seata的模式" class="headerlink" title="16、seata的模式"></a>16、seata的模式</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">Seata有四种模式: XA、AT(默认)、TCC、Seaga</span></span><br><span class="line">(1)XA：强一致性，基于数据库隔离，无代码侵入，在一阶段不提交事务</span><br><span class="line"></span><br><span class="line">(2)AT：默认模式，基于全局锁隔离，无代码侵入，一阶段提交事务，在提交事务前，会记录undolog日志，性能比XA模式好，二阶段TC通知回滚，则根据undolog回滚，通知提交，则删除undolog日志。</span><br><span class="line"></span><br><span class="line"><span class="section">(3)TCC:性能最好，不需要依赖关系型数据库，但代码入侵读高。Try:冻结可用数据，Confirm:确认提交数据，删除冻结数据  Canel:恢复数据，将冻结数据恢复</span></span><br><span class="line"></span><br><span class="line"><span class="section">(4)Seaga: 用于长事务，例如A项目调另外一个公司的项目接口。</span></span><br></pre></td></tr></table></figure><h5 id="17、sql语句优化"><a href="#17、sql语句优化" class="headerlink" title="17、sql语句优化"></a>17、sql语句优化</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>语句务必指明字段名称（避免直接使用<span class="keyword">select</span> <span class="operator">*</span> ）</span><br><span class="line"><span class="keyword">SQL</span>语句要避免造成索引失效的写法</span><br><span class="line"><span class="keyword">SQL</span>语句中<span class="keyword">IN</span>包含的值不应过多</span><br><span class="line">当只需要一条数据的时候，使用limit <span class="number">1</span></span><br><span class="line">如果排序字段没有用到索引，就尽量少排序</span><br><span class="line">如果限制条件中其他字段没有索引，尽量少用<span class="keyword">or</span></span><br><span class="line">尽量用<span class="keyword">union</span> <span class="keyword">all</span>代替<span class="keyword">union</span></span><br><span class="line">避免在<span class="keyword">where</span>子句中对字段进行<span class="keyword">null</span>值判断</span><br><span class="line">不建议使用<span class="operator">%</span>前缀模糊查询</span><br><span class="line">避免在<span class="keyword">where</span>子句中对字段进行表达式操作</span><br><span class="line"><span class="keyword">Join</span>优化 能用innerjoin 就不用<span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">right</span> <span class="keyword">join</span>，如必须使用 一定要已小表为驱动</span><br></pre></td></tr></table></figure><h5 id="18、如何优雅的管理线程池"><a href="#18、如何优雅的管理线程池" class="headerlink" title="18、如何优雅的管理线程池"></a>18、如何优雅的管理线程池</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">手动创建线程池 </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span>;</span><br><span class="line"></span><br><span class="line">这个构造方法有<span class="number">7</span>个参数，我们逐一来进行分析。</span><br><span class="line"><span class="number">1</span>）corePoolSize，线程池中的核心线程数</span><br><span class="line"><span class="number">2</span>）maximumPoolSize，线程池中的最大线程数</span><br><span class="line"><span class="number">3</span>）keepAliveTime，空闲时间，当线程池数量超过核心线程数时，多余的空闲线程存活的时间，</span><br><span class="line">即：这些线程多久被销毁。</span><br><span class="line"><span class="number">4</span>）unit，空闲时间的单位，可以是毫秒、秒、分钟、小时和天，等等</span><br><span class="line"><span class="number">5</span>）workQueue，等待队列，线程池中的线程数超过核心线程数时，任务将放在等待队列，它是一个BlockingQueue类型的对象</span><br><span class="line"><span class="number">6</span>）threadFactory，线程工厂，我们可以使用它来创建一个线程，一般用默认的即可</span><br><span class="line"><span class="number">7</span>）handler，拒绝策略，当线程池和等待队列都满了之后，需要通过该对象的回调函数进行回调处理</span><br></pre></td></tr></table></figure><h5 id="19、docker如何部署到外部服务器"><a href="#19、docker如何部署到外部服务器" class="headerlink" title="19、docker如何部署到外部服务器"></a>19、docker如何部署到外部服务器</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Docker</span>容器迁移到其他服务器的<span class="number">5</span>种方法</span><br><span class="line"></span><br><span class="line"><span class="attribute">1</span>、导出和导入容器</span><br><span class="line"><span class="attribute">2</span>、容器镜像迁移</span><br><span class="line"><span class="attribute">3</span>、保存和加载镜像</span><br><span class="line"><span class="attribute">4</span>、迁移数据卷</span><br><span class="line"><span class="attribute">5</span>、迁移整个Docker容器</span><br></pre></td></tr></table></figure><h5 id="20、redis分布式锁超时"><a href="#20、redis分布式锁超时" class="headerlink" title="20、redis分布式锁超时"></a>20、redis分布式锁超时</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分布式锁不要用于较长时间的任务，如果真的偶尔出现了问题，造成的数据小错乱，可能需要人工介入解决。</span><br></pre></td></tr></table></figure><h5 id="21、mysql索引数据结构，为什么用的是b-树不用红黑树"><a href="#21、mysql索引数据结构，为什么用的是b-树不用红黑树" class="headerlink" title="21、mysql索引数据结构，为什么用的是b+树不用红黑树"></a>21、mysql索引数据结构，为什么用的是b+树不用红黑树</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）Hash哈希，只适合等值查询，不适合范围查询   </span><br><span class="line"><span class="number">2</span>）一般二叉树，可能会特殊化为一个链表，相当于全表扫描</span><br><span class="line"><span class="number">3</span>）红黑树，是一种特化的平衡二叉树，MySQL 数据量很大的时候，索引的体积也会很大，内存放不下的而从磁盘读取，树的层次太高的话，读取磁盘的次数就多了。</span><br><span class="line"><span class="number">4</span>）<span class="selector-tag">B</span>树在范围查询时，存在回旋查找的问题，导致性能不高。<span class="selector-tag">B</span>+树叶子节点是有序链表，更有利于范围查询。</span><br><span class="line"></span><br><span class="line">综上所述，MySQL的索引数据结构最适合采用<span class="selector-tag">B</span>+树来实现。而且为了提高索引前后范围检索效率，MySQL改造了传统的<span class="selector-tag">B</span>+树，形成了双向链指针。</span><br></pre></td></tr></table></figure><h5 id="22、JWT认证和session认证对比？"><a href="#22、JWT认证和session认证对比？" class="headerlink" title="22、JWT认证和session认证对比？"></a>22、JWT认证和session认证对比？</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> HTTP是一种没有状态的协议，</span><br><span class="line"><span class="comment">--服务端为登录的用户生成 Session，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session</span></span><br><span class="line"><span class="comment">--session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。扩展性很低</span></span><br><span class="line"></span><br><span class="line">Token是以<span class="type">JSON</span>加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持</span><br><span class="line">不需要在服务端保存回话信息，特别适用于分布式微服务。有很强的扩展性</span><br></pre></td></tr></table></figure><h5 id="23、什么是无状态服务？有什么好处？"><a href="#23、什么是无状态服务？有什么好处？" class="headerlink" title="23、什么是无状态服务？有什么好处？"></a>23、什么是无状态服务？有什么好处？</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的</span><br><span class="line">(<span class="number">2</span>)无状态协议有两个显著的好处，第一是容易实现高并发；第二是实现诸如代理<span class="regexp">/转发/</span>过滤等机制非常简单而且不容易出错。</span><br></pre></td></tr></table></figure><h5 id="24、JWT"><a href="#24、JWT" class="headerlink" title="24、JWT"></a>24、JWT</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)<span class="keyword">JWT的构成？</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">JWT由三部分构成：Header </span>(头)、Payload (有效载荷)、 Signature (签名)</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)<span class="keyword">JWT如何做到防篡改？</span></span><br><span class="line"><span class="keyword"></span>signature = 加密算法(header + “.” + payload, 密钥)，然后对比 signature 是否一致，如果一致则说明没有被篡改。</span><br></pre></td></tr></table></figure><h5 id="25、多线程synchronized和lock锁的区别"><a href="#25、多线程synchronized和lock锁的区别" class="headerlink" title="25、多线程synchronized和lock锁的区别"></a>25、多线程synchronized和lock锁的区别</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Lock接口和<span class="keyword">synchronized的区别</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">JDK1.5之前，synchronized性能低，使用Lock提高性能</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">JDK1.6开始，java把synchronized性能做了优化，现在使用synchronized可有一样效果</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">区别<span class="number">1</span>：<span class="keyword">Synchronized </span>是<span class="keyword">Java的一个关键字，而Lock是java.util.concurrent.Locks </span>包下的一个接口；</span><br><span class="line">区别<span class="number">2</span>：<span class="keyword">Synchronized </span>使用过后，会自动释放锁，而Lock需要手动上锁、手动释放锁。（在 finally 块中）</span><br><span class="line">区别<span class="number">3</span>：Lock提供了更多的实现方法，而且 可响应中断、可定时， 而<span class="keyword">synchronized </span>关键字不能响应中断；</span><br><span class="line">区别<span class="number">4</span>：<span class="keyword">synchronized关键字是非公平锁，即，不能保证等待锁的那些线程们的顺序，而Lock的子类ReentrantLock默认是非公平锁，但是可通过一个布尔参数的构造方法实例化出一个公平锁；</span></span><br><span class="line"><span class="keyword"></span>区别<span class="number">5</span>：<span class="keyword">synchronized无法判断，是否已经获取到锁，而Lock通过tryLock()方法可以判断，是否已获取到锁；</span></span><br><span class="line"><span class="keyword"></span>区别<span class="number">6</span>：Lock可以通过分别定义读写锁提高多个线程读操作的效率。</span><br><span class="line">区别<span class="number">7</span>：二者的底层实现不一样：<span class="keyword">synchronized是同步阻塞，采用的是悲观并发策略；Lock是同步非阻塞，采用的是乐观并发策略（底层基于volatile关键字和CAS算法实现）</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="number">1</span>. <span class="keyword">synchronized </span>是内部锁,自动化的上锁与释放锁,而lock是手动的,需要人为的上锁和释放锁,lock比较灵活,但是代码量多</span><br><span class="line"><span class="number">2</span>、lock是一个接口，而<span class="keyword">synchronized是Java中的关键字</span></span><br><span class="line"><span class="keyword"></span><span class="number">3</span>、性能上来说，在资源竞争不激烈的情形下，Lock性能稍微比<span class="keyword">synchronized差点。但是当并发非常激烈的时候，synchronized的性能就会下降几十倍。而ReentrantLock确还能维持常态。</span></span><br></pre></td></tr></table></figure><h5 id="26、创建线程的方式"><a href="#26、创建线程的方式" class="headerlink" title="26、创建线程的方式"></a>26、创建线程的方式</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-  </span>继承Thread类创建线程类 </span><br><span class="line"><span class="bullet">-  </span>通过Runnable接口创建线程类 </span><br><span class="line"><span class="bullet">-  </span>通过Callable和Future创建线程 </span><br></pre></td></tr></table></figure><h5 id="27、SpringMVC执行流程"><a href="#27、SpringMVC执行流程" class="headerlink" title="27、SpringMVC执行流程"></a>27、SpringMVC执行流程</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）处理器映射器，作用：根据用户的url地址匹配到对应Controller的方法</span><br><span class="line"><span class="number">2</span>）处理器适配器，作用：执行Controller的方法，返回结果</span><br><span class="line">执行Controller的方法是否存在异常：</span><br><span class="line">    <span class="number">2.1</span> 没有异常，执行第<span class="number">3</span>步</span><br><span class="line">    <span class="number">2.2</span>  发生异常</span><br><span class="line">        如果自定义异常拦截，执行我们写的异常拦截器方法（<span class="meta">@ExceptionHandler</span>的方）</span><br><span class="line">        如果没有异常拦截，则执行ExceptionHandlerResolver接口的resolveException方法完成异常处理（封装异常数据，转换json，返回页面） </span><br><span class="line">        </span><br><span class="line"><span class="number">3</span>）视图解析器，作用：判断方法是否存在<span class="meta">@ResponseBody</span>（<span class="meta">@RestController</span>）注解</span><br><span class="line">如果方法没有<span class="meta">@ResponseBody</span>（<span class="meta">@RestController</span>）注解，根据返回字符串，拼接视图解析器前缀和后缀，组成页面地址，转发到该页面。</span><br><span class="line">如果方法存在<span class="meta">@ResponseBody</span>（<span class="meta">@RestController</span>）注解，直接将返回值对象转换为json字符串，写回响应体中。</span><br></pre></td></tr></table></figure><h5 id="28、线程运行的6种状态"><a href="#28、线程运行的6种状态" class="headerlink" title="28、线程运行的6种状态"></a>28、线程运行的6种状态</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">6</span>种状态：</span><br><span class="line">    <span class="number">1.</span>新建状态  NEW</span><br><span class="line">    <span class="number">2.</span>可运行状态 RUNNABLE</span><br><span class="line">    <span class="number">3.</span>阻塞状态  BLOCKED</span><br><span class="line">    <span class="number">4.</span>无限等待状态 WAITING</span><br><span class="line">    <span class="number">5.</span>计时等待  TIMED_WAITING</span><br><span class="line">    <span class="number">6.</span>终止状态  TERMINATED</span><br></pre></td></tr></table></figure><h5 id="29、线程死锁及产生的原因"><a href="#29、线程死锁及产生的原因" class="headerlink" title="29、线程死锁及产生的原因"></a>29、线程死锁及产生的原因</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.线程死锁：</span><br><span class="line"><span class="code">在多线程程序中，使用了多把锁，造成线程之间相互等待锁，程序无法向下执行。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">2.死锁产生的条件：</span><br><span class="line"><span class="code">    有多个线程</span></span><br><span class="line"><span class="code">    有多把锁</span></span><br><span class="line"><span class="code">    有同步代码块嵌套</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">3.避免死锁：</span><br><span class="line"><span class="code">开发多线程程序时，应该避免三种条件同时出现在代码中，以免造成线程死锁。</span></span><br></pre></td></tr></table></figure><h5 id="30、Lambda表达式的使用前提"><a href="#30、Lambda表达式的使用前提" class="headerlink" title="30、Lambda表达式的使用前提"></a>30、Lambda表达式的使用前提</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Lambda使用的前提</span><br><span class="line">    ①.方法的参数是接口</span><br><span class="line">    ②.接口中只能有一个抽象方法</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>什么是函数式接口</span><br><span class="line">    接口中有且仅有一个抽象方法，这样的接口称为函数式接口。</span><br><span class="line">    函数式接口可以使用<span class="meta">@FunctionalInterface</span>注解标记。</span><br></pre></td></tr></table></figure><h5 id="31、递归"><a href="#31、递归" class="headerlink" title="31、递归"></a>31、递归</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.什么是递归?</span><br><span class="line"><span class="code">递归指的是在一个方法中，自己调用自己。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">2.递归注意事项:</span><br><span class="line"><span class="code">    1.递归调用要有结束条件。</span></span><br><span class="line"><span class="code">    2.递归次数不能太多，否则容易有栈溢出异常</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：掌握递归的求和案例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    需求：递归求1-n的和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2_GetSum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> getSum(<span class="number">5</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1-5的和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          5 +  1-4的和</span></span><br><span class="line"><span class="comment">               4  +  1-3的和</span></span><br><span class="line"><span class="comment">                     3 + 1-2的和</span></span><br><span class="line"><span class="comment">                         2 + 1-1的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + getSum(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="32、Java-的数据结构有哪些"><a href="#32、Java-的数据结构有哪些" class="headerlink" title="32、Java 的数据结构有哪些"></a>32、Java 的数据结构有哪些</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、数组；</span><br><span class="line"><span class="number">2</span>、链表，一种递归的数据结构；</span><br><span class="line"><span class="number">3</span>、栈，按照“后进先出”、“先进后出”的原则来存储数据；</span><br><span class="line"><span class="number">4</span>、队列；</span><br><span class="line"><span class="number">5</span>、树，是由 n（n&gt;<span class="number">0</span>）个有限节点组成的一个具有层次关系的集合；</span><br><span class="line"><span class="number">6</span>、堆；</span><br><span class="line"><span class="number">7</span>、图；</span><br><span class="line"><span class="number">8</span>、哈希表。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;</summary>
    
    
    
    <category term="面试宝典" scheme="https://onlyonemomo.github.io/categories/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/"/>
    
    
    <category term="面试必看" scheme="https://onlyonemomo.github.io/tags/%E9%9D%A2%E8%AF%95%E5%BF%85%E7%9C%8B/"/>
    
  </entry>
  
  <entry>
    <title>014-seata的部署和集成SOP</title>
    <link href="https://onlyonemomo.github.io/2022/09/15/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/014-seata%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E9%9B%86%E6%88%90SOP/"/>
    <id>https://onlyonemomo.github.io/2022/09/15/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/014-seata%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E9%9B%86%E6%88%90SOP/</id>
    <published>2022-09-15T10:58:21.000Z</published>
    <updated>2022-09-15T10:58:10.999Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><span id="more"></span><h1 id="一、部署Seata的tc-server"><a href="#一、部署Seata的tc-server" class="headerlink" title="一、部署Seata的tc-server"></a>一、部署Seata的tc-server</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>首先我们要下载seata-server包，地址在<a href="http://seata.io/zh-cn/blog/download.html">http</a><a href="http://seata.io/zh-cn/blog/download.html">:&#x2F;&#x2F;seata.io&#x2F;zh-cn&#x2F;blog&#x2F;download</a><a href="http://seata.io/zh-cn/blog/download.html">.</a><a href="http://seata.io/zh-cn/blog/download.html">html</a> </p><p>课前资料已下载好 <code>资料\seata-server-1.5.1.zip</code></p><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h2><p>在非中文目录解压缩这个zip包，其目录结构如下：</p><p><img src="https://img-blog.csdnimg.cn/47f85c7653234ec6aa0211530f36285c.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h2><p>修改conf目录下的application.yml文件：</p><p><img src="https://img-blog.csdnimg.cn/d89c3e755f184bf2bcccd7c52c096da4.png#pic_center" alt="在这里插入图片描述"></p><p>内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">7091</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">seata-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">config</span>: <span class="string">classpath:logback-spring.xml</span></span><br><span class="line">  <span class="attr">file</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">$&#123;user.home&#125;/logs/seata</span></span><br><span class="line"></span><br><span class="line"><span class="attr">console</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">user</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">seata</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">seata</span></span><br><span class="line"></span><br><span class="line"><span class="attr">seata</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">config</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    # 读取tc服务端的配置文件的方式，这里是从nacos配置中心读取，这样如果tc是集群，可以共享配置</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">server-addr</span>: <span class="string">127.0.0.1:8848</span></span><br><span class="line">      <span class="attr">namespace</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">group</span>: <span class="string">SEATA_GROUP</span></span><br><span class="line">      <span class="attr">username</span>: <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password</span>: <span class="string">nacos</span></span><br><span class="line"><span class="comment">      ##if use MSE Nacos with auth, mutex with username/password attribute</span></span><br><span class="line"><span class="comment">      #access-key: &quot;&quot;</span></span><br><span class="line"><span class="comment">      #secret-key: &quot;&quot;</span></span><br><span class="line">      <span class="attr">data-id</span>: <span class="string">seataServer.properties</span></span><br><span class="line">  <span class="attr">registry</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    # tc服务的注册中心类，这里选择nacos，也可以是eureka、zookeeper等</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">application</span>: <span class="string">seata-server</span></span><br><span class="line">      <span class="attr">server-addr</span>: <span class="string">127.0.0.1:8848</span></span><br><span class="line">      <span class="attr">group</span>: <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">namespace</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">cluster</span>: <span class="string">GZ</span></span><br><span class="line">      <span class="attr">username</span>: <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password</span>: <span class="string">nacos</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#  server:</span></span><br><span class="line"><span class="comment">#    service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span></span><br><span class="line">  <span class="attr">security</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">secretKey</span>: <span class="string">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span></span><br><span class="line">    <span class="attr">tokenValidityInMilliseconds</span>: <span class="string">1800000</span></span><br><span class="line">    <span class="attr">ignore</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">urls</span>: <span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login</span></span><br></pre></td></tr></table></figure><h2 id="4-在nacos添加配置"><a href="#4-在nacos添加配置" class="headerlink" title="4.在nacos添加配置"></a>4.在nacos添加配置</h2><p>特别注意，为了让tc服务的集群可以共享配置，我们选择了nacos作为统一配置中心。因此服务端配置文件<code>seataServer.properties</code>文件需要在nacos中配好。</p><p>格式如下：</p><p><img src="https://img-blog.csdnimg.cn/c2391225f8394104b05f453f731fc77d.png#pic_center" alt="在这里插入图片描述"></p><p>配置内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据存储方式，db代表数据库</span></span><br><span class="line"><span class="attr">store.mode</span>=<span class="string">db</span></span><br><span class="line"><span class="attr">store.db.datasource</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">store.db.dbType</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">store.db.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">store.db.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">store.db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.minConn</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">store.db.maxConn</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">store.db.globalTable</span>=<span class="string">global_table</span></span><br><span class="line"><span class="attr">store.db.branchTable</span>=<span class="string">branch_table</span></span><br><span class="line"><span class="attr">store.db.queryLimit</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">store.db.lockTable</span>=<span class="string">lock_table</span></span><br><span class="line"><span class="attr">store.db.maxWait</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 事务、日志等配置</span></span><br><span class="line"><span class="attr">server.recovery.committingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.rollbackingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.timeoutRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.maxCommitRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.maxRollbackRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.undo.logSaveDays</span>=<span class="string">7</span></span><br><span class="line"><span class="attr">server.undo.logDeletePeriod</span>=<span class="string">86400000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 客户端与服务端传输方式</span></span><br><span class="line"><span class="attr">transport.serialization</span>=<span class="string">seata</span></span><br><span class="line"><span class="attr">transport.compressor</span>=<span class="string">none</span></span><br><span class="line"><span class="comment"># 关闭metrics功能，提高性能</span></span><br><span class="line"><span class="attr">metrics.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">metrics.registryType</span>=<span class="string">compact</span></span><br><span class="line"><span class="attr">metrics.exporterList</span>=<span class="string">prometheus</span></span><br><span class="line"><span class="attr">metrics.exporterPrometheusPort</span>=<span class="string">9898</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;其中的数据库地址、用户名、密码都需要修改成你自己的数据库信息。&#x3D;&#x3D;</p><h2 id="5-创建数据库表"><a href="#5-创建数据库表" class="headerlink" title="5.创建数据库表"></a>5.创建数据库表</h2><p>特别注意：tc服务在管理分布式事务时，需要记录事务相关数据到数据库中，你需要提前创建好这些表。</p><p>新建一个名为<code>seata</code>的数据库，运行课前资料提供的sql文件：</p><p><img src="https://img-blog.csdnimg.cn/57dbf060986e4ff4bc96f4f855085f69.png#pic_center" alt="在这里插入图片描述"></p><p>这些表主要记录全局事务、分支事务、全局锁信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 分支事务表</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `branch_table`;</span><br><span class="line">CREATE TABLE `branch_table`  (</span><br><span class="line">  `branch_id` bigint(20) NOT NULL,</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint(20) NULL DEFAULT NULL,</span><br><span class="line">  `resource_group_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `resource_id` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `branch_type` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint(4) NULL DEFAULT NULL,</span><br><span class="line">  `client_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime(6) NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime(6) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`branch_id`) USING BTREE,</span><br><span class="line">  INDEX `idx_xid`(`xid`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 全局事务表</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `global_table`;</span><br><span class="line">CREATE TABLE `global_table`  (</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint(20) NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint(4) NOT NULL,</span><br><span class="line">  `application_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_service_group` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `timeout` int(11) NULL DEFAULT NULL,</span><br><span class="line">  `begin_time` bigint(20) NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`xid`) USING BTREE,</span><br><span class="line">  INDEX `idx_gmt_modified_status`(`gmt_modified`, `status`) USING BTREE,</span><br><span class="line">  INDEX `idx_transaction_id`(`transaction_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure><h2 id="6-启动TC服务"><a href="#6-启动TC服务" class="headerlink" title="6.启动TC服务"></a>6.启动TC服务</h2><p>进入bin目录，运行其中的<code>seata-server.bat</code>即可：</p><p><img src="https://img-blog.csdnimg.cn/45ba0d0d42db43cfab3b634523a39368.png#pic_center" alt="在这里插入图片描述"></p><p>启动成功后，seata-server应该已经注册到nacos注册中心了。</p><p>打开浏览器，访问seata控制台；地址：<a href="http://localhost:7091/">http://localhost:7091</a></p><p><img src="https://img-blog.csdnimg.cn/d85b2b2e1e34454ba844630c1435efa7.png#pic_center" alt="在这里插入图片描述"></p><p>打开浏览器，访问nacos地址：<a href="http://localhost:8848/nacos%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%9B%E5%85%A5%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0seata-server%E7%9A%84%E4%BF%A1%E6%81%AF%EF%BC%9A">http://localhost:8848/nacos，然后进入服务列表页面，可以看到seata-server的信息：</a></p><p><img src="https://img-blog.csdnimg.cn/bb6b226013604c8aa8d823e10ebda873.png#pic_center" alt="在这里插入图片描述"></p><h1 id="二、微服务集成seata"><a href="#二、微服务集成seata" class="headerlink" title="二、微服务集成seata"></a>二、微服务集成seata</h1><p>需要进行分布式事务处理的每个微服务上都配置如下：</p><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h2><p>首先，我们需要在每个微服务中引入seata依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--seata starter 采用1.5.1版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h2><p>需要修改每个微服务中的application.yml文件，添加一些配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class="line">    <span class="comment"># 参考tc服务自己的application.yml中的配置</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span> <span class="comment"># tc</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span> <span class="comment"># tc服务在nacos中的服务名称</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">GZ</span>  <span class="comment">#无效</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组，根据这个获取tc服务的cluster名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与TC服务cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">GZ</span></span><br></pre></td></tr></table></figure><h1 id="三、TC服务的高可用和异地容灾"><a href="#三、TC服务的高可用和异地容灾" class="headerlink" title="三、TC服务的高可用和异地容灾"></a>三、TC服务的高可用和异地容灾</h1><h2 id="1-模拟异地容灾的TC集群"><a href="#1-模拟异地容灾的TC集群" class="headerlink" title="1.模拟异地容灾的TC集群"></a>1.模拟异地容灾的TC集群</h2><p>计划启动两台seata的tc服务节点：</p><table><thead><tr><th>节点名称</th><th>ip地址</th><th>端口号</th><th>集群名称</th></tr></thead><tbody><tr><td>seata</td><td>127.0.0.1</td><td>8091</td><td>GZ</td></tr><tr><td>seata2</td><td>127.0.0.1</td><td>8092</td><td>HZ</td></tr></tbody></table><p>之前我们已经启动了一台seata服务，端口是8091，集群名为GZ。</p><p>现在，将seata目录复制一份，起名为seata2</p><p>修改seata2&#x2F;conf&#x2F;application.yml内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7092</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: seata-<span class="attribute">server</span></span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  config: classpath:logback-spring.xml</span><br><span class="line">  file:</span><br><span class="line">    path: $&#123;user.home&#125;/logs/<span class="attribute">seata</span></span><br><span class="line"></span><br><span class="line">console:</span><br><span class="line">  user:</span><br><span class="line">    username: seata</span><br><span class="line">    password: seata</span><br><span class="line"></span><br><span class="line">seata:</span><br><span class="line">  config:</span><br><span class="line">    <span class="comment"># 读取tc服务端的配置文件的方式，这里是从nacos配置中心读取，这样如果tc是集群，可以共享配置</span></span><br><span class="line">    type: nacos</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: <span class="number">127.0.0.1:8848</span></span><br><span class="line">      namespace:</span><br><span class="line">      group: SEATA_GROUP</span><br><span class="line">      username: nacos</span><br><span class="line">      password: nacos</span><br><span class="line">      <span class="comment">##if use MSE Nacos with auth, mutex with username/password attribute</span></span><br><span class="line">      <span class="comment">#access-key: &quot;&quot;</span></span><br><span class="line">      <span class="comment">#secret-key: &quot;&quot;</span></span><br><span class="line">      data-id: seataServer.properties</span><br><span class="line">  registry:</span><br><span class="line">    <span class="comment"># tc服务的注册中心类，这里选择nacos，也可以是eureka、zookeeper等</span></span><br><span class="line">    type: nacos</span><br><span class="line">    nacos:</span><br><span class="line">      application: seata-server</span><br><span class="line">      server-addr: <span class="number">127.0.0.1:8848</span></span><br><span class="line">      group: DEFAULT_GROUP</span><br><span class="line">      namespace:</span><br><span class="line">      cluster: HZ</span><br><span class="line">      username: nacos</span><br><span class="line">      password: nacos</span><br><span class="line"></span><br><span class="line">  server:</span><br><span class="line">    service-port: <span class="number">8092</span> <span class="comment">#If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span></span><br><span class="line">  security:</span><br><span class="line">    secretKey: SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span><br><span class="line">    tokenValidityInMilliseconds: <span class="number">1800000</span></span><br><span class="line">    ignore:</span><br><span class="line">      urls: /,/**/<span class="regexp">*.css</span>,/**/<span class="regexp">*.js</span>,/**/<span class="regexp">*.html</span>,/**/<span class="regexp">*.map</span>,/**/<span class="regexp">*.svg</span>,/**/<span class="regexp">*.png</span>,/**/<span class="regexp">*.ico</span>,/console-fe/public/**,/api/v1/auth/login</span><br></pre></td></tr></table></figure><p>进入seata2&#x2F;bin目录，然后运行双击 <code>seata-server.bat</code></p><p>打开nacos控制台，查看服务列表：</p><p><img src="https://img-blog.csdnimg.cn/1408f814d00a4226a83d4d84937770ca.png#pic_center" alt="在这里插入图片描述"></p><p>点进详情查看：</p><p><img src="https://img-blog.csdnimg.cn/72e3cb1c90a64742addf53a98e77e370.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2-将事务组映射配置到nacos"><a href="#2-将事务组映射配置到nacos" class="headerlink" title="2.将事务组映射配置到nacos"></a>2.将事务组映射配置到nacos</h2><p>接下来，我们需要将tx-service-group与cluster的映射关系都配置到nacos配置中心。</p><p>新建一个配置：</p><p><img src="https://img-blog.csdnimg.cn/be9d4303c8f84bda8bafa402f252ebcb.png#pic_center" alt="在这里插入图片描述"></p><p>配置的内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 事务组映射关系</span></span><br><span class="line"><span class="attr">service.vgroupMapping.seata-demo</span>=<span class="string">GZ</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service.enableDegrade</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">service.disableGlobalTransaction</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 与TC服务的通信配置</span></span><br><span class="line"><span class="attr">transport.type</span>=<span class="string">TCP</span></span><br><span class="line"><span class="attr">transport.server</span>=<span class="string">NIO</span></span><br><span class="line"><span class="attr">transport.heartbeat</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">transport.enableClientBatchSendRequest</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">transport.threadFactory.bossThreadPrefix</span>=<span class="string">NettyBoss</span></span><br><span class="line"><span class="attr">transport.threadFactory.workerThreadPrefix</span>=<span class="string">NettyServerNIOWorker</span></span><br><span class="line"><span class="attr">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class="string">NettyServerBizHandler</span></span><br><span class="line"><span class="attr">transport.threadFactory.shareBossWorker</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class="string">NettyClientSelector</span></span><br><span class="line"><span class="attr">transport.threadFactory.clientSelectorThreadSize</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class="string">NettyClientWorkerThread</span></span><br><span class="line"><span class="attr">transport.threadFactory.bossThreadSize</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">transport.threadFactory.workerThreadSize</span>=<span class="string">default</span></span><br><span class="line"><span class="attr">transport.shutdown.wait</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># RM配置</span></span><br><span class="line"><span class="attr">client.rm.asyncCommitBufferLimit</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">client.rm.lock.retryInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">client.rm.lock.retryTimes</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.rm.reportRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">client.rm.tableMetaCheckEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">client.rm.tableMetaCheckerInterval</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">client.rm.sqlParserType</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">client.rm.reportSuccessEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">client.rm.sagaBranchRegisterEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># TM配置</span></span><br><span class="line"><span class="attr">client.tm.commitRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">client.tm.rollbackRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">client.tm.defaultGlobalTransactionTimeout</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">client.tm.degradeCheck</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">client.tm.degradeCheckAllowTimes</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">client.tm.degradeCheckPeriod</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># undo日志配置</span></span><br><span class="line"><span class="attr">client.undo.dataValidation</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.undo.logSerialization</span>=<span class="string">jackson</span></span><br><span class="line"><span class="attr">client.undo.onlyCareUpdateColumns</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.undo.logTable</span>=<span class="string">undo_log</span></span><br><span class="line"><span class="attr">client.undo.compress.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.undo.compress.type</span>=<span class="string">zip</span></span><br><span class="line"><span class="attr">client.undo.compress.threshold</span>=<span class="string">64k</span></span><br><span class="line"><span class="attr">client.log.exceptionRate</span>=<span class="string">100</span></span><br></pre></td></tr></table></figure><h2 id="3-微服务读取nacos配置"><a href="#3-微服务读取nacos配置" class="headerlink" title="3.微服务读取nacos配置"></a>3.微服务读取nacos配置</h2><p>接下来，需要修改每一个微服务的application.yml文件，添加如下配置内容，让微服务读取nacos中的client.properties文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">      <span class="attr">data-id:</span> <span class="string">client.properties</span></span><br></pre></td></tr></table></figure><blockquote><p>也注释掉原来文件中的如下内容（如果不注释也可以；则作为一个默认，对动态切换集群不受影响）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与TC服务cluster的映射关系</span></span><br><span class="line">    <span class="attr">seata-demo:</span> <span class="string">GZ</span></span><br></pre></td></tr></table></figure></blockquote><p>重启微服务，现在微服务到底是连接tc的GZ集群，还是tc的HZ集群，都统一由nacos的client.properties来决定了。</p><p>cos中的client.properties文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">      <span class="attr">data-id:</span> <span class="string">client.properties</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>013-Sentinel规则持久化SOP</title>
    <link href="https://onlyonemomo.github.io/2022/09/14/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/013-sentinel%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96SOP/"/>
    <id>https://onlyonemomo.github.io/2022/09/14/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/013-sentinel%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96SOP/</id>
    <published>2022-09-14T09:04:51.000Z</published>
    <updated>2022-09-14T09:13:29.084Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><span id="more"></span><h2 id="一、修改order-service服务"><a href="#一、修改order-service服务" class="headerlink" title="一、修改order-service服务"></a>一、修改order-service服务</h2><p>修改OrderService，让其监听Nacos中的sentinel规则配置。</p><p>具体步骤如下：</p><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><p>在order-service中引入sentinel监听nacos的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置nacos地址"><a href="#2-配置nacos地址" class="headerlink" title="2.配置nacos地址"></a>2.配置nacos地址</h3><p>在order-service中的application.yml文件配置nacos地址及监听的配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">flow:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">orderservice-flow-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span> <span class="comment"># 还可以是：degrade、authority、param-flow</span></span><br></pre></td></tr></table></figure><h2 id="二、修改sentinel-dashboard源码"><a href="#二、修改sentinel-dashboard源码" class="headerlink" title="二、修改sentinel-dashboard源码"></a>二、修改sentinel-dashboard源码</h2><p>SentinelDashboard默认不支持nacos的持久化，需要修改源码。</p><h3 id="1-解压"><a href="#1-解压" class="headerlink" title="1. 解压"></a>1. 解压</h3><p>解压课前资料中的sentinel源码包：</p><p><img src="https://img-blog.csdnimg.cn/ac8137a0d87548469528e2114079d4ee.png#pic_center" alt="在这里插入图片描述"></p><p>然后并用IDEA打开这个项目，结构如下：</p><p><img src="https://img-blog.csdnimg.cn/ff520973a0be45c482e0222d3a9968ff.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-修改nacos依赖"><a href="#2-修改nacos依赖" class="headerlink" title="2. 修改nacos依赖"></a>2. 修改nacos依赖</h3><p>在sentinel-dashboard源码的pom文件中，nacos的依赖默认的scope是test，只能在测试时使用，这里要去除：</p><p><img src="https://img-blog.csdnimg.cn/c885f61bc4554539bb68be721e66299d.png#pic_center" alt="在这里插入图片描述"></p><p>将sentinel-datasource-nacos依赖的scope去掉：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-添加nacos支持"><a href="#3-添加nacos支持" class="headerlink" title="3. 添加nacos支持"></a>3. 添加nacos支持</h3><p>在sentinel-dashboard的test包下，已经编写了对nacos的支持，我们需要将其拷贝到main下。</p><p><img src="https://img-blog.csdnimg.cn/201547063ab34fabaa1ee72ef024ee0c.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-修改nacos地址"><a href="#4-修改nacos地址" class="headerlink" title="4. 修改nacos地址"></a>4. 修改nacos地址</h3><p>然后，还需要修改测试代码中的NacosConfig类：</p><p><img src="https://img-blog.csdnimg.cn/96bbf87f026e4f7fb5380ca566fc1a97.png#pic_center" alt="在这里插入图片描述"></p><p>修改其中的nacos地址，让其读取application.properties中的配置：</p><p><img src="https://img-blog.csdnimg.cn/175689e45a8a4ceba9d866c13c6f6b95.png#pic_center" alt="在这里插入图片描述"></p><p>在sentinel-dashboard的application.properties中添加nacos地址配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos.addr</span>=<span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><h3 id="5-配置nacos数据源"><a href="#5-配置nacos数据源" class="headerlink" title="5. 配置nacos数据源"></a>5. 配置nacos数据源</h3><p>另外，还需要修改com.alibaba.csp.sentinel.dashboard.controller.v2包下的FlowControllerV2类：</p><p><img src="https://img-blog.csdnimg.cn/2b8aa0ad58b94d4692878effe791ae76.png#pic_center" alt="在这里插入图片描述"></p><p>让我们添加的Nacos数据源生效：</p><p><img src="https://img-blog.csdnimg.cn/722ff8949c9e409c96bef887e9778962.png#pic_center" alt="在这里插入图片描述"></p><h3 id="6-修改前端页面"><a href="#6-修改前端页面" class="headerlink" title="6. 修改前端页面"></a>6. 修改前端页面</h3><p>接下来，还要修改前端页面，添加一个支持nacos的菜单。</p><p>修改src&#x2F;main&#x2F;webapp&#x2F;resources&#x2F;app&#x2F;scripts&#x2F;directives&#x2F;sidebar&#x2F;目录下的sidebar.html文件：</p><p><img src="https://img-blog.csdnimg.cn/ccc2fce8efc24e11b46f8ab88c3b0c39.png#pic_center" alt="在这里插入图片描述"></p><p>将其中的这部分注释打开：</p><p><img src="https://img-blog.csdnimg.cn/304fbb6f353245a78fdecaf483abd20b.png#pic_center" alt="在这里插入图片描述"></p><p>修改其中的文本：</p><p><img src="https://img-blog.csdnimg.cn/6f0dc38a9b0547e58a9f9bb1891ff9ed.png#pic_center" alt="在这里插入图片描述"></p><h3 id="7-重新编译、打包项目"><a href="#7-重新编译、打包项目" class="headerlink" title="7. 重新编译、打包项目"></a>7. 重新编译、打包项目</h3><p>运行IDEA中的maven插件，编译和打包修改好的Sentinel-Dashboard：</p><p><img src="https://img-blog.csdnimg.cn/ec01be84d31c475fb05da28b42dcc732.png#pic_center" alt="在这里插入图片描述"></p><h3 id="8-启动"><a href="#8-启动" class="headerlink" title="8.启动"></a>8.启动</h3><p>启动方式跟官方一样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p>如果要修改nacos地址，需要添加参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Dnacos.addr=localhost:8848 sentinel-dashboard.jar</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>010-MySQL高级之索引与事务</title>
    <link href="https://onlyonemomo.github.io/2022/09/12/SQL%E8%AF%AD%E5%8F%A5/010-MySQL%E9%AB%98%E7%BA%A7%E4%B9%8B%E7%B4%A2%E5%BC%95%E4%B8%8E%E4%BA%8B%E5%8A%A1/"/>
    <id>https://onlyonemomo.github.io/2022/09/12/SQL%E8%AF%AD%E5%8F%A5/010-MySQL%E9%AB%98%E7%BA%A7%E4%B9%8B%E7%B4%A2%E5%BC%95%E4%B8%8E%E4%BA%8B%E5%8A%A1/</id>
    <published>2022-09-12T12:44:51.000Z</published>
    <updated>2022-09-12T02:55:24.624Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p><span id="more"></span><h3 id="1、什么是索引"><a href="#1、什么是索引" class="headerlink" title="1、什么是索引"></a>1、什么是索引</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据库索引的本质是数据结构，这种数据结构能够帮助我们快速的获取数据库中的数据。</span><br></pre></td></tr></table></figure><h3 id="2、索引的作用"><a href="#2、索引的作用" class="headerlink" title="2、索引的作用"></a>2、索引的作用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当表中的数据量越来越大时，索引对于性能的影响愈发重要。索引优化应该是对查询性能优化最有效的手段了。索引能够轻易将查询性能提高好几个数量级。有了索引相当于我们给数据库的数据加了目录一样，可以快速的找到数据，如果不适用索引则需要一点一点去查找数据</span><br><span class="line">简单来说</span><br><span class="line">提高数据查询的效率。</span><br></pre></td></tr></table></figure><h3 id="3、索引的分类"><a href="#3、索引的分类" class="headerlink" title="3、索引的分类"></a>3、索引的分类</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>1.普通索引index :加速查找</span><br><span class="line"><span class="bullet">- </span>2.唯一索引</span><br><span class="line"><span class="bullet">- </span>3.联合索引（组合索引）</span><br><span class="line"><span class="bullet">- </span>4.全文索引fulltext :用于搜索很长一篇文章的时候，效果最好。</span><br></pre></td></tr></table></figure><h3 id="4、索引原理"><a href="#4、索引原理" class="headerlink" title="4、索引原理"></a>4、索引原理</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">索引的实现本质上是为了让数据库能够快速查找数据，而单独维护的数据结构，mysql实现索引主要使用的两种数据结构：<span class="built_in">hash</span>和B+树： 我们比较常用的 MyIsam 和 innoDB引擎都是基于B+树的。</span><br><span class="line"></span><br><span class="line"><span class="built_in">hash</span>:（<span class="built_in">hash</span>索引在mysql比较少用）他以把数据的索引以<span class="built_in">hash</span>形式组织起来,因此当查找某一条记录的时候,速度非常快.当时因为是<span class="built_in">hash</span>结构,每个键只对应一个值,而且是散列的方式分布.所以他并不支持范围查找和排序等功能.</span><br><span class="line"></span><br><span class="line">B+树:b+tree是(mysql使用最频繁的一个索引数据结构)数据结构以平衡树的形式来组织,因为是树型结构,所以更适合用来处理排序,范围查找等功能.相对<span class="built_in">hash</span>索引,B+树在查找单条记录的速度虽然比不上<span class="built_in">hash</span>索引,但是因为更适合排序等操作,所以他更受用户的欢迎.毕竟不可能只对数据库进行单条记录的操作.</span><br></pre></td></tr></table></figure><h3 id="5、索引的优点"><a href="#5、索引的优点" class="headerlink" title="5、索引的优点"></a>5、索引的优点</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.可以通过建立唯一索引或者主键索引,保证数据库表中每一行数据的唯一性.</span><br><span class="line"><span class="number">2</span>.建立索引可以大大提高检索的数据,以及减少表的检索行数</span><br><span class="line"><span class="number">3</span>.在表连接的连接条件 可以加速表与表直接的相连</span><br><span class="line"><span class="number">4</span>.在分组和排序字句进行数据检索,可以减少查询时间中 分组 和 排序时所消耗的时间(数据库的记录会重新排序)</span><br><span class="line"><span class="number">5</span>.建立索引,在查询中使用索引 可以提高性能</span><br></pre></td></tr></table></figure><h3 id="6、索引的缺点"><a href="#6、索引的缺点" class="headerlink" title="6、索引的缺点"></a>6、索引的缺点</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.在创建索引和维护索引 会耗费时间,随着数据量的增加而增加</span><br><span class="line">2.索引文件会占用物理空间,除了数据表需要占用物理空间之外,每一个索引还会占用一定的物理空间</span><br><span class="line">3.当对表的数据进行<span class="keyword">INSERT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span> 的时候,索引也要动态的维护,这样就会降低数据的维护速度,(建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快)。</span><br></pre></td></tr></table></figure><h3 id="7、索引操作"><a href="#7、索引操作" class="headerlink" title="7、索引操作"></a>7、索引操作</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">对索引的简单增删改查语句要记得</span><br><span class="line">查看表中索引</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tableName;</span><br><span class="line">创建索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名 列名;</span><br><span class="line">删除索引</span><br><span class="line">DORP <span class="keyword">INDEX</span> IndexName <span class="keyword">ON</span> TableName</span><br><span class="line">分析索引使用情况</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> 语句</span><br></pre></td></tr></table></figure><h3 id="8、分析索引使用情况"><a href="#8、分析索引使用情况" class="headerlink" title="8、分析索引使用情况"></a>8、分析索引使用情况</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span>显示了MySQL如何使用索引来处理<span class="keyword">select</span>语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。简单讲，它的作用就是分析查询性能。<span class="keyword">explain</span>关键字的使用方法很简单，就是把它放在<span class="keyword">select</span>查询语句的前面。mysql查看是否使用索引，简单的看<span class="built_in">type</span>类型就可以。如果它是<span class="keyword">all</span>，那说明这条查询语句遍历了所有的行，并没有使用到索引。 (最简单的说法，希望能说详细些)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9、哪些字段适合加索引"><a href="#9、哪些字段适合加索引" class="headerlink" title="9、哪些字段适合加索引"></a>9、哪些字段适合加索引</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.在经常需要搜索的列上,可以加快索引的速度</span><br><span class="line"><span class="number">2</span>.主键列上可以确保列的唯一性</span><br><span class="line"><span class="number">3</span>.在表与表的而连接条件上加上索引,可以加快连接查询的速度</span><br><span class="line"><span class="number">4</span>.在经常需要排序(<span class="keyword">order</span> <span class="title">by</span>),分组(<span class="keyword">group</span> <span class="title">by</span>)和的distinct 列上加索引 可以加快排序查询的时间,</span><br></pre></td></tr></table></figure><h3 id="10、哪些字段不适合加索引"><a href="#10、哪些字段不适合加索引" class="headerlink" title="10、哪些字段不适合加索引"></a>10、哪些字段不适合加索引</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>查询中很少使用到的列 不应该创建索引,如果建立了索引然而还会降低mysql的性能和增大了空间需求.</span><br><span class="line"><span class="number">2.</span>很少数据的列也不应该建立索引,比如 一个性别字段 <span class="number">0</span>或者<span class="number">1</span>,在查询中,结果集的数据占了表中数据行的比例比较大,mysql需要扫描的行数很多,增加索引,并不能提高效率</span><br><span class="line"><span class="number">3.</span>定义为<span class="type">text</span>和image和<span class="type">bit</span>数据类型的列不应该增加索引,</span><br><span class="line"><span class="number">4.</span>当表的修改(<span class="keyword">UPDATE</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>)操作远远大于检索(<span class="keyword">SELECT</span>)操作时不应该创建索引,这两个操作是互斥的关系。</span><br></pre></td></tr></table></figure><h3 id="11、哪些情况会造成索引失效"><a href="#11、哪些情况会造成索引失效" class="headerlink" title="11、哪些情况会造成索引失效"></a>11、哪些情况会造成索引失效</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>如果条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)</span><br><span class="line"><span class="number">2.</span>索引字段的值不能有<span class="literal">null</span>值，有<span class="literal">null</span>值会使该列索引失效</span><br><span class="line"><span class="number">3.</span>对于多列索引，不是使用的第一部分，则不会使用索引（最左原则）</span><br><span class="line"><span class="number">4.</span><span class="keyword">like</span>查询以%开头</span><br><span class="line"><span class="number">5.</span>如果列类型是字符串，那一定要在条件中将数据使用单引号引用起来,否则不使用索引</span><br><span class="line"><span class="number">6.</span>在索引的列上使用表达式或者函数会使索引失效</span><br></pre></td></tr></table></figure><h3 id="12、联合索引最左原则"><a href="#12、联合索引最左原则" class="headerlink" title="12、联合索引最左原则"></a>12、联合索引最左原则</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在mysql建立联合索引时会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配，组合索引的第一个字段必须出现在查询组句中，这个索引才会被用到</span><br><span class="line"></span><br><span class="line">如创建组合索引 <span class="selector-tag">a</span>,<span class="selector-tag">b</span>,c     那么查询条件中单纯的使用  <span class="selector-tag">b</span> 和 c是使用不到索引的</span><br></pre></td></tr></table></figure><h3 id="13、聚簇索引和非聚簇索引"><a href="#13、聚簇索引和非聚簇索引" class="headerlink" title="13、聚簇索引和非聚簇索引"></a>13、聚簇索引和非聚簇索引</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MyISAM——非聚簇索引</span><br><span class="line">MyISAM存储引擎采用的是非聚簇索引，非聚簇索引的主索引和辅助索引几乎是一样的，只是主索引不允许重复，不允许空值，他们的叶子结点的<span class="built_in">key</span>都存储指向键值对应的数据的物理地址。</span><br><span class="line">非聚簇索引的数据表和索引表是分开存储的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">InnoDB——聚簇索引</span><br><span class="line">聚簇索引的主索引的叶子结点存储的是键值对应的数据本身，辅助索引的叶子结点存储的是键值对应的数据的主键键值。因此主键的值长度越小越好，类型越简单越好。</span><br><span class="line">聚簇索引的数据和主键索引存储在一起。</span><br></pre></td></tr></table></figure><h3 id="14、事务的基本要素（ACID）"><a href="#14、事务的基本要素（ACID）" class="headerlink" title="14、事务的基本要素（ACID）"></a>14、事务的基本要素（ACID）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没发生过一样。</span><br><span class="line">例如：<span class="selector-tag">A</span>账户中有<span class="number">1000</span>元，<span class="selector-tag">B</span>账户中有<span class="number">1000</span>元。<span class="selector-tag">A</span>要给<span class="selector-tag">B</span>转账<span class="number">500</span>元。<span class="selector-tag">A</span>扣款和<span class="selector-tag">B</span>加款这两条要么同时执行，要么同时不执行。如果在<span class="selector-tag">A</span>扣款后<span class="selector-tag">B</span>加款之前，系统发生故障，会回滚到<span class="selector-tag">A</span>扣款之前的状态。</span><br><span class="line">（<span class="number">2</span>）一致性：事务开始之前和事务结束后，数据库的完整性约束没有被破坏。</span><br><span class="line">例如：不论汇款成败，<span class="selector-tag">A</span>账户<span class="selector-tag">B</span>账户总额是<span class="number">2000</span>元。</span><br><span class="line">（<span class="number">3</span>）隔离性：事务的执行互不干扰。</span><br><span class="line">（<span class="number">4</span>）持久性：事务执行成功后，该事务对数据库的更改是持久保存在数据库中的，不会被回滚。</span><br><span class="line">可以使用日志记录或影子副本来实现。</span><br></pre></td></tr></table></figure><h3 id="15、什么是事务？"><a href="#15、什么是事务？" class="headerlink" title="15、什么是事务？"></a>15、什么是事务？</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">事务就是被绑定在一起作为一个逻辑工作单元的SQL语句分组</span><br><span class="line">如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。</span><br><span class="line">为了确保要么执行，要么不执行，就可以使用事务。</span><br><span class="line">要将有组语句作为事务考虑，就需要通过ACID测试：</span><br><span class="line">即原子性，一致性，隔离性和持久性。</span><br><span class="line"></span><br><span class="line">- 锁：锁是实现事务的关键，锁可以保证事务的完整性和并发性。 与现实生活中锁一样，它可以使某些数据的拥有者，在某段时间内不能使用某些数据或数据结构。</span><br><span class="line">老李 给 老王汇钱</span><br><span class="line">老李把钱 <span class="operator">=</span><span class="operator">=</span>》 银行 老李账户扣钱</span><br><span class="line">银行 <span class="operator">=</span><span class="operator">=</span>》 老王 成功 老王账户加钱</span><br><span class="line">不成功 老账户补钱（银行将钱返给老李）</span><br></pre></td></tr></table></figure><h3 id="16、事务的并发问题"><a href="#16、事务的并发问题" class="headerlink" title="16、事务的并发问题"></a>16、事务的并发问题</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、脏读：事务<span class="selector-tag">A</span>读取了事务<span class="selector-tag">B</span>更新的数据，然后<span class="selector-tag">B</span>回滚操作，那么<span class="selector-tag">A</span>读取到的数据是脏数据</span><br><span class="line"><span class="number">2</span>、不可重复读：事务 <span class="selector-tag">A</span> 多次读取同一数据，事务 <span class="selector-tag">B</span> 在事务<span class="selector-tag">A</span>多次读取的过程中，对数据作了更新并提交，导致事务<span class="selector-tag">A</span>多次读取同一数据时，结果 不一致。</span><br><span class="line"><span class="number">3</span>、幻读：系统管理员<span class="selector-tag">A</span>将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员<span class="selector-tag">B</span>就在这个时候插入了一条具体分数的记录，当系统管理员<span class="selector-tag">A</span>改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</span><br></pre></td></tr></table></figure><h3 id="17、事务隔离性的作用"><a href="#17、事务隔离性的作用" class="headerlink" title="17、事务隔离性的作用"></a>17、事务隔离性的作用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">就是保证数据的一致性、完整性。</span><br><span class="line">事务隔离级别越高，在并发下会产生的问题就越少，</span><br><span class="line">但同时付出的性能消耗也将越大，因此很多时候必须在并发性和性能之间做一个权衡。</span><br><span class="line">所以设立了几种事务隔离级别，以便让不同的项目可以根据自己项目的并发情况选择合适的事务隔离级别，对于在事务隔离级别之外会产生的并发问题，在代码中做补偿。</span><br></pre></td></tr></table></figure><h3 id="18、事务的隔离级别4个"><a href="#18、事务的隔离级别4个" class="headerlink" title="18、事务的隔离级别4个"></a>18、事务的隔离级别4个</h3><table><thead><tr><th>事务隔离级别</th><th>读未提交</th><th>读已提交</th><th>可重复读</th><th>串行化</th></tr></thead><tbody><tr><td>脏读</td><td>是</td><td>否</td><td>否</td><td>否</td></tr><tr><td>——–</td><td>——–</td><td>——–</td><td></td><td></td></tr><tr><td>不可重复读</td><td>是</td><td>是</td><td>否</td><td>否</td></tr><tr><td>——–</td><td>——–</td><td>——–</td><td></td><td></td></tr><tr><td>幻读</td><td>是</td><td>是</td><td>是</td><td>否</td></tr></tbody></table><h3 id="19、mysql中锁的分类"><a href="#19、mysql中锁的分类" class="headerlink" title="19、mysql中锁的分类"></a>19、mysql中锁的分类</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">按操作分</span><br><span class="line">读锁(共享锁)</span><br><span class="line">加了读锁,   其他的进程也可以进行读操作，但写操作会阻塞，所以称为共享锁</span><br><span class="line">写锁(排它锁)</span><br><span class="line">加了写锁，  其他的进程读操作和写操作都会进入阻塞状态</span><br><span class="line">按粒度分</span><br><span class="line">表锁</span><br><span class="line">加锁特点：开销小、加锁快，不会出现死锁；锁粒度大，锁冲突高，并发低</span><br><span class="line">加锁方式：</span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tableName <span class="keyword">read</span>; //读锁</span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tableName <span class="keyword">write</span>; //写锁</span><br><span class="line">解锁方式:</span><br><span class="line">unlock <span class="keyword">tables</span>;//释放全部锁</span><br><span class="line">行锁</span><br><span class="line">开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。 </span><br><span class="line">加锁方式：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id=<span class="number">1</span> <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share mode</span>; //读锁</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id=<span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>; //写锁</span><br><span class="line"></span><br><span class="line">解锁方式:</span><br><span class="line">        <span class="keyword">commit</span>; //提交事务即解锁</span><br><span class="line">页锁</span><br><span class="line">介于上面两个之间，不用特意阐述</span><br><span class="line">从思想的层面:</span><br><span class="line">悲观锁：</span><br><span class="line">看待事情比较悲观， 认为别人会修改它的数据，需要上锁来保证数据的安全</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> id = <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span></span><br><span class="line"><span class="keyword">update</span> <span class="comment">-- </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">乐观锁：</span><br><span class="line">看待事情比较乐观， </span><br><span class="line"></span><br><span class="line">id   <span class="type">name</span>  salary <span class="keyword">version</span> </span><br><span class="line"><span class="number">1</span>     老王   <span class="number">1000</span>     <span class="number">2</span></span><br><span class="line"></span><br><span class="line">   客户端<span class="number">1</span>   </span><br><span class="line">   <span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> id = <span class="number">1</span>    版本 = <span class="number">1</span>   </span><br><span class="line">   <span class="keyword">update</span> employee <span class="keyword">set</span> salary=<span class="number">2000</span>,version=<span class="keyword">version</span>+<span class="number">1</span> <span class="keyword">where</span> id=<span class="number">1</span> <span class="keyword">and</span> version = <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   客户端<span class="number">2</span>   </span><br><span class="line">   <span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> id = <span class="number">1</span>    版本 = <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">   // 修改时<span class="number">1.</span>一定要给版本号+<span class="number">1</span>    <span class="number">2.</span>条件中一定要有版本条件 </span><br><span class="line">   <span class="keyword">update</span> employee <span class="keyword">set</span> salary=<span class="number">1000</span>,version=<span class="keyword">version</span>+<span class="number">1</span> <span class="keyword">where</span> id=<span class="number">1</span> <span class="keyword">and</span> version = <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   读操作多 选乐观锁</span><br><span class="line">   写操作多 选悲观锁</span><br></pre></td></tr></table></figure><h3 id="20、mysql中的几种连接查询"><a href="#20、mysql中的几种连接查询" class="headerlink" title="20、mysql中的几种连接查询"></a>20、mysql中的几种连接查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">内连接：只有两个元素表相匹配的才能在结果集中显示。</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span> <span class="keyword">where</span> 表<span class="number">1.</span>id <span class="operator">=</span> 表<span class="number">2.</span>dep_id</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 表<span class="number">1.</span>id <span class="operator">=</span> 表<span class="number">2.</span>dep_id</span><br><span class="line">外连接：</span><br><span class="line">    左外连接:左边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示。</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">右外连接:右边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示。</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">全外连接：连接的表中不匹配的数据全部会显示出来。</span><br><span class="line"> <span class="keyword">full</span> <span class="keyword">join</span></span><br></pre></td></tr></table></figure><h3 id="21、sql的书写顺序和执行顺序"><a href="#21、sql的书写顺序和执行顺序" class="headerlink" title="21、sql的书写顺序和执行顺序"></a>21、sql的书写顺序和执行顺序</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 编写顺序</span></span><br><span class="line"><span class="keyword">select</span>  <span class="keyword">distinct</span>  查询字段</span><br><span class="line"><span class="keyword">from</span>  表名</span><br><span class="line"><span class="keyword">JOIN</span> 表名</span><br><span class="line"><span class="keyword">ON</span>  连接条件</span><br><span class="line"><span class="keyword">where</span> 查询条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组字段</span><br><span class="line"><span class="keyword">having</span> 分组后条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  排序条件</span><br><span class="line"><span class="keyword">limit</span> 查询起始位置, 查询条数</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行顺序</span></span><br><span class="line"><span class="keyword">from</span>  表名</span><br><span class="line"><span class="keyword">ON</span>  连接条件</span><br><span class="line"><span class="keyword">JOIN</span> 表名</span><br><span class="line"><span class="keyword">where</span> 查询条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组字段</span><br><span class="line"><span class="keyword">having</span> 分组后条件</span><br><span class="line"><span class="keyword">select</span>  <span class="keyword">distinct</span>  查询字段</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  排序条件</span><br><span class="line"><span class="keyword">limit</span> 查询起始位置, 查询条数</span><br></pre></td></tr></table></figure><p>21、mysql优化综合性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>表的设计优化</span><br><span class="line">选择表合适存储引擎：</span><br><span class="line">myisam: 应用时以读和插入操作为主，只有少量的更新和删除，并且对事务的完整性，并发性要求不是很高的。</span><br><span class="line">Innodb： 事务处理，以及并发条件下要求数据的一致性。除了插入和查询外，包括很多的更新和删除。</span><br><span class="line">尽量 设计 所有字段都得有默认值,尽量避免<span class="keyword">null</span>。</span><br><span class="line">数据库表设计时候更小的占磁盘空间尽可能使用更小的整数类型.</span><br><span class="line"></span><br><span class="line">但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。</span><br><span class="line">tinyint   <span class="type">int</span>   <span class="type">bigint</span></span><br><span class="line">因此，在创建表的时候，为了获得更好的性能，我们可以将表中字段的宽度设得尽可能小。例如，</span><br><span class="line">在定义邮政编码这个字段时，如果将其设置为<span class="type">CHAR</span>(<span class="number">255</span>),显然给数据库增加了不必要的空间，</span><br><span class="line"> <span class="type">CHAR</span> (<span class="number">255</span>)            <span class="type">VARCHAR</span> (<span class="number">255</span>)    <span class="number">10</span>  </span><br><span class="line"> 定长                   可变长度</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">100101</span></span><br><span class="line">甚至使用<span class="type">VARCHAR</span>这种类型也是多余的，因为<span class="type">CHAR</span>(<span class="number">6</span>)就可以很好的完成任务了。同样的，如果可以的话，</span><br><span class="line">我们应该使用TINYINT而不是<span class="type">BIGINT</span>来定义整型字段。</span><br><span class="line">应该尽量把字段设置为<span class="keyword">NOT</span> <span class="keyword">NULL</span>，这样在将来执行查询的时候，数据库不用去比较<span class="keyword">NULL</span>值。</span><br><span class="line">对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为ENUM类型。因为在MySQL中，ENUM类型被当作数值型数据来处理， 而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>索引优化</span><br><span class="line">表的主键、外键必须有索引；</span><br><span class="line">数据量大的表应该有索引；</span><br><span class="line">经常与其他表进行连接的表，在连接字段上应该建立索引；</span><br><span class="line">经常出现在<span class="keyword">Where</span>子句中的字段，特别是大表的字段，应该建立索引；</span><br><span class="line">索引应该建在选择性高的字段上； （sex 性别这种就不适合）</span><br><span class="line">索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；</span><br><span class="line">频繁进行数据操作的表，不要建立太多的索引；</span><br><span class="line">删除无用的索引，避免对执行计划造成负面影响；</span><br><span class="line">表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也会增加处理上的开销。另外，过多的复合索引，在有单字段索引的情况下，一般都是没有存在价值的；相反，还会降低数据增加删除时的性能，特别是对频繁更新的表来说，负面影响更大。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="keyword">sql</span>语句优化</span><br><span class="line"><span class="keyword">SELECT</span>语句务必指明字段名称（避免直接使用<span class="keyword">select</span> <span class="operator">*</span> ）</span><br><span class="line"><span class="keyword">SQL</span>语句要避免造成索引失效的写法</span><br><span class="line"><span class="keyword">SQL</span>语句中<span class="keyword">IN</span>包含的值不应过多</span><br><span class="line">当只需要一条数据的时候，使用limit <span class="number">1</span></span><br><span class="line">如果排序字段没有用到索引，就尽量少排序</span><br><span class="line">如果限制条件中其他字段没有索引，尽量少用<span class="keyword">or</span></span><br><span class="line">尽量用<span class="keyword">union</span> <span class="keyword">all</span>代替<span class="keyword">union</span></span><br><span class="line">避免在<span class="keyword">where</span>子句中对字段进行<span class="keyword">null</span>值判断</span><br><span class="line">不建议使用<span class="operator">%</span>前缀模糊查询</span><br><span class="line">避免在<span class="keyword">where</span>子句中对字段进行表达式操作</span><br><span class="line"><span class="keyword">Join</span>优化 能用innerjoin 就不用<span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">right</span> <span class="keyword">join</span>，如必须使用 一定要已小表为驱动</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>缓存优化 (数据库自身缓存  redis缓存 等等 )</span><br><span class="line">为了提高查询速度，我们可以通过不同的方式去缓存我们的结果从而提高响应效率。</span><br><span class="line"></span><br><span class="line">数据库本身也是支持缓存的 <span class="comment">--&gt; 查询缓存query_cache , 默认查询缓存是关闭的</span></span><br><span class="line">需要我们在mysql.ini 配置文件中开启:</span><br><span class="line">开启方法： </span><br><span class="line">query_cache_type<span class="operator">=</span><span class="number">0</span>   #关闭查询缓存</span><br><span class="line">query_cache_type<span class="operator">=</span><span class="number">1</span>   #开启查询缓存,mysql自动帮我们缓存满足条件的查询数据</span><br><span class="line">query_cache_type<span class="operator">=</span><span class="number">2</span>   #开启查询缓存,需要在参数中手动指定要缓存的查询</span><br><span class="line"></span><br><span class="line">不过因为我们的课程体系主要讲解的是redis,所以在这里可以引入redis的知识点。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>主从复制、读写分离</span><br><span class="line">如果数据库的使用场景读的操作比较的时候，为了避免写的操作所造成的性能影响 可以采用读写分离的架构，读写分离，解决的是，数据库的写入，影响了查询的效率。读写分离的基本原理是让主数据库处理事务性增、改、删操作（<span class="keyword">INSERT</span>、<span class="keyword">UPDATE</span>、<span class="keyword">DELETE</span>），而从数据库处理<span class="keyword">SELECT</span>查询操作。 数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。</span><br><span class="line">参考: https:<span class="operator">/</span><span class="operator">/</span>www.jianshu.com<span class="operator">/</span>p<span class="operator">/</span>faf0127f1cb2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>mysql的分库分表   </span><br><span class="line">数据量越来越大时，单体数据库无法满足要求，可以考虑分库分表</span><br><span class="line">两种拆分方案：</span><br><span class="line">垂直拆分：（分库）</span><br><span class="line">业务表太多？ 将业务细化 不同的小业务专门用一个库来维护</span><br><span class="line">水平拆分：（分表）</span><br><span class="line">单个表存的数据太多，装不下了？ 将该表查分成多个</span><br><span class="line"></span><br><span class="line">分库分表经常使用的数据库中间件：</span><br><span class="line">MyCat</span><br><span class="line">https:<span class="operator">/</span><span class="operator">/</span>www.cnblogs.com<span class="operator">/</span>chongaizhen<span class="operator">/</span>p<span class="operator">/</span><span class="number">11083226.</span>html</span><br><span class="line">Sharding<span class="operator">-</span>JDBC</span><br><span class="line">https:<span class="operator">/</span><span class="operator">/</span>blog.csdn.net<span class="operator">/</span>forezp<span class="operator">/</span>article<span class="operator">/</span>details<span class="operator">/</span><span class="number">94343671</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://onlyonemomo.github.io/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://onlyonemomo.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>012-RabbitMQ部署指南SOP</title>
    <link href="https://onlyonemomo.github.io/2022/09/12/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/012-RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97SOP/"/>
    <id>https://onlyonemomo.github.io/2022/09/12/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/012-RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97SOP/</id>
    <published>2022-09-12T09:13:51.000Z</published>
    <updated>2022-09-12T09:14:02.386Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><span id="more"></span><h2 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1.下载镜像"></a>1.1.下载镜像</h2><p>方式一：在线拉取</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><p>方式二：从本地加载</p><p>在课前资料已经提供了镜像包：</p><p><img src="https://img-blog.csdnimg.cn/f15daf99add4431683131ce07a985c21.png#pic_center" alt="在这里插入图片描述"></p><p>上传到虚拟机中后，使用命令加载镜像即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i mq.tar</span><br></pre></td></tr></table></figure><h2 id="1-2-安装MQ"><a href="#1-2-安装MQ" class="headerlink" title="1.2.安装MQ"></a>1.2.安装MQ</h2><p>执行下面的命令来运行MQ容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=root \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=root \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>011-Jmeter快速入门SOP</title>
    <link href="https://onlyonemomo.github.io/2022/09/12/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/011-Jmeter%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8SOP/"/>
    <id>https://onlyonemomo.github.io/2022/09/12/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/011-Jmeter%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8SOP/</id>
    <published>2022-09-12T09:10:51.000Z</published>
    <updated>2022-09-12T09:13:17.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p><span id="more"></span><h1 id="1-安装Jmeter"><a href="#1-安装Jmeter" class="headerlink" title="1.安装Jmeter"></a>1.安装Jmeter</h1><p>Jmeter依赖于JDK，所以必须确保当前计算机上已经安装了JDK，并且配置了环境变量。</p><h2 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1.下载"></a>1.1.下载</h2><p>可以Apache Jmeter官网下载，地址：<a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a></p><p><img src="https://img-blog.csdnimg.cn/0193b75448024857b00a8658f2681426.png#pic_center" alt="在这里插入图片描述"></p><p>当然，我们课前资料也提供了下载好的安装包：</p><p><img src="https://img-blog.csdnimg.cn/6a22e2cea61c4dcab4268b8a7d4be6a9.png#pic_center" alt="在这里插入图片描述"></p><h2 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2.解压"></a>1.2.解压</h2><p>因为下载的是zip包，解压缩即可使用，目录结构如下：</p><p><img src="https://img-blog.csdnimg.cn/d99d636155f7409f8986605435edcc2d.png#pic_center" alt="在这里插入图片描述"></p><p>其中的bin目录就是执行的脚本，其中包含启动脚本：</p><p><img src="https://img-blog.csdnimg.cn/dd6d0fded91544778d3c687718bedaa9.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3.运行"></a>1.3.运行</h3><p>双击即可运行，但是有两点注意：</p><ul><li>启动速度比较慢，要耐心等待</li><li>启动后黑窗口不能关闭，否则Jmeter也跟着关闭了</li></ul><p><img src="https://img-blog.csdnimg.cn/66fe3e0feee2491abf76206c3c6a828f.png#pic_center" alt="在这里插入图片描述"></p><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h1><h2 id="2-1-设置中文语言"><a href="#2-1-设置中文语言" class="headerlink" title="2.1.设置中文语言"></a>2.1.设置中文语言</h2><p>默认Jmeter的语言是英文，需要设置：</p><p><img src="https://img-blog.csdnimg.cn/8b7647db53ec4975b31386a6c499ba61.png#pic_center" alt="在这里插入图片描述"></p><p>效果：</p><p><img src="https://img-blog.csdnimg.cn/3bfc562c14ea4b10994fbb53010f03be.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p><strong>注意</strong>：上面的配置只能保证本次运行是中文，如果要永久中文，需要修改Jmeter的配置文件</p></blockquote><p>打开jmeter文件夹，在bin目录中找到 <strong>jmeter.properties</strong>，添加下面配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language</span>=<span class="string">zh_CN</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/955546015fe14301b68ac5b5c8ef9880.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>注意：前面不要出现#，#代表注释，另外这里是下划线，不是中划线</p></blockquote><h2 id="2-2-基本用法"><a href="#2-2-基本用法" class="headerlink" title="2.2.基本用法"></a>2.2.基本用法</h2><p>在测试计划上点鼠标右键，选择添加 &gt; 线程（用户） &gt; 线程组：</p><p><img src="https://img-blog.csdnimg.cn/ec3382f9d9eb4a219827447343354d62.png#pic_center" alt="在这里插入图片描述"></p><p>在新增的线程组中，填写线程信息：</p><p><img src="https://img-blog.csdnimg.cn/bfefd2aba821403f98e57cb7751cf1e3.png#pic_center" alt="在这里插入图片描述"></p><p>给线程组点鼠标右键，添加http取样器：</p><p><img src="https://img-blog.csdnimg.cn/a80416cae1c943dfad4c41c475dff60b.png#pic_center" alt="在这里插入图片描述"></p><p>编写取样器内容：</p><p><img src="https://img-blog.csdnimg.cn/90907d7414e44946a4ba0ff85c058706.png#pic_center" alt="在这里插入图片描述"></p><p>添加监听报告：</p><p><img src="https://img-blog.csdnimg.cn/1e4feea52c2f4e6f85321bfc97a352e3.png#pic_center" alt="在这里插入图片描述"></p><p>添加监听结果树：</p><p><img src="https://img-blog.csdnimg.cn/3aee44e634c24a469405873a402716f6.png#pic_center" alt="在这里插入图片描述"></p><p>汇总报告结果：</p><p><img src="https://img-blog.csdnimg.cn/f019e562b7934b8bb7cb91858dd286b5.png#pic_center" alt="在这里插入图片描述"></p><p>结果树：</p><p><img src="https://img-blog.csdnimg.cn/99679a38494c40f78233e20c1d2ab199.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="SOP操作手册" scheme="https://onlyonemomo.github.io/categories/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SOP" scheme="https://onlyonemomo.github.io/tags/SOP/"/>
    
  </entry>
  
  <entry>
    <title>十年学会编程——Google研发总监</title>
    <link href="https://onlyonemomo.github.io/2022/09/12/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/004-%E5%8D%81%E5%B9%B4%E5%AD%A6%E4%BC%9A%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94Google%E7%A0%94%E5%8F%91%E6%80%BB%E7%9B%91/"/>
    <id>https://onlyonemomo.github.io/2022/09/12/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/004-%E5%8D%81%E5%B9%B4%E5%AD%A6%E4%BC%9A%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94Google%E7%A0%94%E5%8F%91%E6%80%BB%E7%9B%91/</id>
    <published>2022-09-12T01:27:39.000Z</published>
    <updated>2022-09-12T01:27:57.636Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在每周转载这个栏目里面，我打算收集一些自己曾经看过的文章，在博客这个平台分享给大家。每周转载这个栏目开设只是偶然性的，我觉得三千世界栏目更新过慢（要追求质量，还得有时间！），所以就萌发了每周转载这个栏目。</p><span id="more"></span><blockquote><p>本文作者 Peter Norvig，人工智能专家，现任职 Google 研发部总监，之前就职于 NASA。 本文写于 1998 年，经典的东西永不过时。</p></blockquote><h2 id="为何人人都这么着急？"><a href="#为何人人都这么着急？" class="headerlink" title="为何人人都这么着急？"></a>为何人人都这么着急？</h2><p>信步走进任何一家书店，你会看到名为《如何在 7 天内学会 Java》的书，还有各种各样类似的书：在几天内或几小时内学会 Visual Basic, Windows, Internet 等等，一眼望不到尽头。我在 Amazon 上做了如下的检索 ：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pubdate: after <span class="number">1992</span> <span class="keyword">and</span> <span class="built_in">title</span>: days <span class="keyword">and</span>    (<span class="built_in">title</span>: learn <span class="keyword">or</span> <span class="built_in">title</span>: teach yourself)</span><br></pre></td></tr></table></figure><p>得到了 248 个结果。前 78 个都是计算机类书籍（第 79 个是「30 天学会孟加拉语」 Learn Bengali in 30 days）。我用「hours」替换「days」，得到了类似的结果： 更多的 253 书。前 77 本是计算机类书籍，第 78 本是「24 小时内自学语法和风格」Teach Yourself Grammar and Style in 24 Hours。<strong>在前 200 本书中，有 96% 是计算机类书籍。</strong></p><p>结论是：要么人们都在急急忙忙地学习计算机，要么计算机比其它任何东西都容易学。没有书籍教你在几天内学会古典音乐、量子物理，或者是养狗。</p><p>让我们分析一下，像一本名为《三天内学会 Pascal》的书意味着什么：</p><ul><li><strong>学习</strong>： 在三天里，你没有时间写一些重大的程序，并从成功或失败中有所收获。你没有时间与有经验的程序员合作，并理解在那样的环境下工作是怎么回 事。<strong>一句话，你不会有时间学到太多东西。</strong>因此他们只能谈论一些肤浅的东西，而不是深入的理解。正如亚力山大教皇所说，浅尝辄止是危险的事情。</li><li><strong>Pascal</strong>： 在三天时间里，你可能学会 Pascal 的语法（如果你已经学过类似的语言），但你学不到更多的如何使用这些语法的知识。也就是说， 假如你曾是个 BASIC 程序员，你可以学着用 Pascal 语法写出 BASIC 风格的程序，但你不可能了解 Pascal 真正的好处（和坏处）。那么关键是什么？ Alan Perlis 说过：<strong>「一种不改变你编程的思维方式的语言，不值得去学。」</strong> 一种可能的情况是：你必须学一点儿 Pascal （或可能性更大的象Visual Basic 或 JavaScript之类），因为你为了完成某种特定的任务，需要与一个现存的工具建立接口。不过那不是学习如何编程，而是在学习如何完成那个任务。</li><li><strong>三天内</strong>： 很不幸，这不够，原因由下一节告诉我们。</li></ul><h2 id="在十年里学会编程"><a href="#在十年里学会编程" class="headerlink" title="在十年里学会编程"></a>在十年里学会编程</h2><p>研究表明 (Hayes，Bloom)在任何一种领域内，象下棋、作曲、绘画、钢琴演奏、游泳、网球、以及原子物理学和拓扑学，等等，<strong>要达到专家水平大约都要化十年时间。</strong>没有真正的捷径：即使是莫扎 特，4 岁时就是音乐神童，13 年后才开始写出世界级的作品。在另一方面，披头士似乎在 1964 年的 Ed Sullivan 表演上一炮走红。但他们从 1957 年就开始表演，在获得大众青睐后，他们的第一个重大成功，Sgt. Peppers，是 1967 年发 行的。Samuel Johnson （塞缪尔·约翰逊，英国辞典编纂家及作家）认为要花比十年更长的时间：「在任何领域中出类拔萃都 要用毕生的劳作来取得；它不可能用较低的代价获得。」而 Chaucer（乔叟，英国诗人）感叹到：「人生短暂，学海无涯。」</p><p>这是我为编程成功开出的方子：</p><ul><li><strong>设法对编程感兴趣，并且因为它有趣而编一些程序。</strong>确保编程一直充满足够乐趣，这样你才愿意投入十年宝贵时间。</li><li>与其他程序员<strong>交流</strong>； <strong>阅读其它程序</strong>。这比任何书本或训练课程都重要。</li><li><strong>写程序</strong>。 ***的学习方式是从实践中学习。 用更技术性的话说，「在一个给定的领域内，个人的最大能力不是自动地由扩展了的经验取得的，但即使是高度有经验的人也可以通过有意识的努力来提高自己的能力」 (p. 366) 和 「最有效的学习需要因人而异的适当难度，目标明确的任务，丰富的信息反馈，以及重复的机会和错误修正。」 (p. 20-21) 此书 Cognition in Practice: Mind，Mathematics，and Culture in Everyday Life 是阐明此观点的令人感兴趣的参考文献。</li><li>如果愿意，在大学里呆上 4 年或更长（在研究生院里）。你会接触到一些需要学历证明的工作，你会对此领域有更深的理解。如果你不喜欢学校， 你可以（通过一 些贡献）在工作中获得相似的经验。在任何情况下，光啃书本是不够的。Eric Raymond，The New Hacker’s Dictionary 一书的作者，说过，「计算机科学不能把任何人变成编程专家，就象光研究刷子和颜料不会使人变成画家一样。」我雇佣过的***的程序员之一仅有高中程度；他做出了许多优秀的软件，有他自己的新闻组， 而且通过股票期权，他无疑比我富有的多。</li><li>和其他程序员一起做项目。在其中的一些项目中作为<em><strong>的程序员； 而在另一些项目中是最差的。当你是</strong></em>的，你能测试领导项目的能力，用你的观点激发别人。当你是最差的，你学习杰出者是怎么做的，了解他们不喜欢做 什么（因为他们吩咐你做事）。</li><li>在其他程序员之后接手项目。使自己理解别人写的程序。 当程序的原作者不在的时候，研究什么需要理解并且修改它。思考如何设计你的程序以便后来者的维护。</li><li>学习至少半打的编程语言。包括一种支持类抽象的语言（象 Java 或 C++），一种支持函数化抽象的语言（象 Lisp 或 ML），一种支持语法抽象的语 言（象 Lisp），一种支持声明规格说明的语言（象 Prolog 或 C++ 的模板），一种支持共行程序（coroutine）的语言（象 Icon 或 Scheme），一种支持并行的语言（象 Sisal）。</li><li>请记住「计算机科学」中有「计算机」一词。了解你的计算机要花多长时间执行一条指令，从内存中取一个字（有cache），从磁盘中读取连续的字， 和在磁盘中找到新的位置。（答案）</li><li>参与一种语言标准化的工作。它可以是 ANSI C++ 委员会， 也可以是决定你周围小范围内的编程风格是应该两个还是四个空格缩进。通过任何一种方式，你了解到其他人在某种语言中的想法，他们的理解深度，甚至一 些他们这样想的原因。</li><li>找到适当的理由尽快地从语言标准化的努力中脱身。</li></ul><p>明白了这些，仅从书本中你能得到多少就成了一个问题。在我第一个孩子出生前， 我读了所有的（关于育儿的）How to 书籍，仍然感觉是个手足无措的新手。30 个月以后，我的第二个孩子快要出生了，我回头温习这些书了吗？ 没有。相反，我依靠我的个人 经验，它比专家写的数千页书更有用和可靠。</p><p>Fred <em><strong>s在他的随笔 《没有银弹》 中定出了一个寻找</strong>优秀软件设计者</em>*的三步计划：</p><ol><li>尽可能早地，有系统地识别***的软件设计人员。</li><li>为软件设计人员指派一位职业导师，负责他们技术方面的成长，仔细地为他们规划职业生涯。</li><li>为成长中的设计人员提供相互交流和学习的机会。</li></ol><p>此计划假设某些人已经具备了杰出设计者的必要才能； 要做的只是如何恰当地诱导他们。 Alan Perlis 说得更简明扼要：「每个人都能被教会雕刻：对米开朗其罗而言， 反倒是告诉他哪些事不要做。同样的道理也适用于优秀的程序员。」</p><p>所以尽管买那本 Java 的书吧。你可能会从中学到点儿东西。<strong>但作为一个程序员，你不会在几天内或 24 小时内，哪怕是几个月内改变你的人生，或你实际的水平。</strong></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>Bloom, Benjamin (ed.) Developing Talent in Young People, Ballantine, 1985.</p><p>***s, Fred, No Silver Bullets, IEEE Computer, vol. 20, no. 4, 1987, p. 10-19.</p><p>Hayes, John R., Complete Problem Solver Lawrence Erlbaum, 1989.</p><p>Lave, Jean, Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life, Cambridge University Press, 1988.</p><blockquote><p>原文链接：<a href="https://www.likecs.com/show-204274466.html">https://www.likecs.com/show-204274466.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：在每周转载这个栏目里面，我打算收集一些自己曾经看过的文章，在博客这个平台分享给大家。每周转载这个栏目开设只是偶然性的，我觉得三千世界栏目更新过慢（要追求质量，还得有时间！），所以就萌发了每周转载这个栏目。&lt;/p&gt;</summary>
    
    
    
    <category term="每周转载" scheme="https://onlyonemomo.github.io/categories/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="每周转载" scheme="https://onlyonemomo.github.io/tags/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>012-模块化之异步并发编程优化</title>
    <link href="https://onlyonemomo.github.io/2022/09/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/012-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%BC%98%E5%8C%96/"/>
    <id>https://onlyonemomo.github.io/2022/09/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/012-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%BC%98%E5%8C%96/</id>
    <published>2022-09-08T12:43:01.000Z</published>
    <updated>2022-09-12T08:31:31.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p><span id="more"></span><blockquote><p>顺序执行代码是非常较耗时的方法，如果数据量比较大，可能页面响应时间会比较长。这个时候采用异步并发编程提高访问效率</p></blockquote><p>首页需要优化的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取首页基本数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beginCreateTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endCreateTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IndexBaseInfoVO <span class="title function_">getBaseInfo</span><span class="params">(String beginCreateTime, String endCreateTime)</span> &#123;</span><br><span class="line">    <span class="comment">//1）构建一个空的结果集对象</span></span><br><span class="line">    <span class="type">IndexBaseInfoVO</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexBaseInfoVO</span>();</span><br><span class="line">    <span class="comment">//2 封装结果集属性</span></span><br><span class="line">    <span class="comment">// 2.1 由于查询需要用到用户名 调用工具类获取用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> SecurityUtils.getUsername();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//3 封装结果集对象</span></span><br><span class="line">        result.setCluesNum(reportMpper.getCluesNum(beginCreateTime, endCreateTime, username));</span><br><span class="line">        result.setBusinessNum(reportMpper.getBusinessNum(beginCreateTime, endCreateTime, username));</span><br><span class="line">        result.setContractNum(reportMpper.getContractNum(beginCreateTime, endCreateTime, username));</span><br><span class="line">        result.setSalesAmount(reportMpper.getSalesAmount(beginCreateTime, endCreateTime, username));</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4 返回结果集对象</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步并发编程优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取首页基本数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beginCreateTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endCreateTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IndexBaseInfoVO <span class="title function_">getBaseInfo</span><span class="params">(String beginCreateTime, String endCreateTime)</span> &#123;</span><br><span class="line">    <span class="comment">//1）构建一个空的结果集对象</span></span><br><span class="line">    <span class="type">IndexBaseInfoVO</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexBaseInfoVO</span>();</span><br><span class="line">    <span class="comment">//2 封装结果集属性</span></span><br><span class="line">    <span class="comment">// 2.1 由于查询需要用到用户名 调用工具类获取用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> SecurityUtils.getUsername();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//单独开启一个线程执行你指定的任务</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; clueFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> reportMpper.getCluesNum(beginCreateTime, endCreateTime, username);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//单独开启一个线程执行你指定的任务</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; businessFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> reportMpper.getBusinessNum(beginCreateTime, endCreateTime, username);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//单独开启一个线程执行你指定的任务</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; contractFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> reportMpper.getContractNum(beginCreateTime, endCreateTime, username);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单独开启一个线程执行你指定的任务</span></span><br><span class="line">        CompletableFuture&lt;Double&gt; salesFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> reportMpper.getSalesAmount(beginCreateTime, endCreateTime, username);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前主线程让步给上面的四个线程先执行完毕，然后主线程再设置线索数等...</span></span><br><span class="line">        CompletableFuture.allOf(clueFuture,businessFuture,contractFuture,salesFuture);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 封装结果集对象</span></span><br><span class="line">        result.setCluesNum(clueFuture.get());</span><br><span class="line">        result.setBusinessNum(businessFuture.get());</span><br><span class="line">        result.setContractNum(contractFuture.get());</span><br><span class="line">        result.setSalesAmount(salesFuture.get());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4 返回结果集对象</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="项目模块化" scheme="https://onlyonemomo.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
    <category term="模块化" scheme="https://onlyonemomo.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>011-模块化之WebSocket</title>
    <link href="https://onlyonemomo.github.io/2022/09/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/011-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BWebSocket/"/>
    <id>https://onlyonemomo.github.io/2022/09/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/011-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BWebSocket/</id>
    <published>2022-09-08T12:41:01.000Z</published>
    <updated>2022-09-12T08:31:46.352Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p><span id="more"></span><p>WebSocket 协议是基于 TCP 的一种新的网络协议。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接， 并进行双向数据传输。不同的开发语言对 WebSocket 都提供了实现。</p><p>应用场景：</p><blockquote><p>•弹幕<br>•网页聊天<br>•体育实况更新<br>•股票基金报价实时更新</p></blockquote><p>HTTP协议和WebSocket协议对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP是短连接，基于请求响应模式</span><br><span class="line">HTTP通信是单向的，只能由客户端发起</span><br><span class="line">WebSocket客户端和服务器的连接保持活动状态</span><br><span class="line">WebSocket支持双向通信</span><br><span class="line">HTTP和WebSocket底层都是TCP连接</span><br><span class="line">WebSocket协议标识符为ws，例如 ws:<span class="comment">//localhost:8080</span></span><br></pre></td></tr></table></figure><p>实现步骤：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">导入WebSocket的maven坐标</span><br><span class="line">导入WebSocket服务端组件WebSocketServer，用于和客户端通信</span><br><span class="line">导入配置类WebSocketConfiguration，注册WebSocket的服务端组件</span><br><span class="line">导入定时任务类WebSocketTask，定时向客户端推送数据</span><br><span class="line">直接使用websocket.html页面作为WebSocket客户端</span><br></pre></td></tr></table></figure><p>WebSocketConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSocket配置类，用于注册WebSocket的Bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebSocketServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSocket服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/ws/&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放会话对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Session&gt; sessionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端：&quot;</span> + sid + <span class="string">&quot;建立连接&quot;</span>);</span><br><span class="line">        sessionMap.put(sid, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到来自客户端：&quot;</span> + sid + <span class="string">&quot;的信息:&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(<span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接断开:&quot;</span> + sid);</span><br><span class="line">        sessionMap.remove(sid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToAllClient</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        Collection&lt;Session&gt; sessions = sessionMap.values();</span><br><span class="line">        <span class="keyword">for</span> (Session session : sessions) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//服务器向客户端发送消息</span></span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写自己的逻辑代码通知客户端</p><p>来单提醒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO 后续通过WebSocket实现来单提醒</span></span><br><span class="line">      <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">      map.put(<span class="string">&quot;type&quot;</span>,<span class="number">1</span>);<span class="comment">//消息类型，1表示来单提醒</span></span><br><span class="line">      map.put(<span class="string">&quot;orderId&quot;</span>,orders.getId());</span><br><span class="line">      map.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;订单号：&quot;</span> + ordersPaymentDTO.getOrderNumber());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//通过WebSocket实现来单提醒，向客户端浏览器推送消息</span></span><br><span class="line">      webSocketServer.sendToAllClient(JSON.toJSONString(map));</span><br></pre></td></tr></table></figure><p>催单提醒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO 后续基于WebSocket实现催单</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;type&quot;</span>,<span class="number">2</span>);<span class="comment">//2代表用户催单</span></span><br><span class="line">map.put(<span class="string">&quot;orderId&quot;</span>,id);</span><br><span class="line">map.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;订单号：&quot;</span> + orders.getNumber());</span><br><span class="line">webSocketServer.sendToAllClient(JSON.toJSONString(map));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="项目模块化" scheme="https://onlyonemomo.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
    <category term="模块化" scheme="https://onlyonemomo.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>010-模块化之自定义注解</title>
    <link href="https://onlyonemomo.github.io/2022/09/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/010-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>https://onlyonemomo.github.io/2022/09/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/010-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-09-08T12:27:01.000Z</published>
    <updated>2022-09-12T08:31:54.081Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p><span id="more"></span><blockquote><p><strong>自定义注解就是一个标记，需要通过具体的代码去实现这个注解的用途。</strong></p></blockquote><h5 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h5><h6 id="先定义一个自定义注解"><a href="#先定义一个自定义注解" class="headerlink" title="先定义一个自定义注解"></a>先定义一个自定义注解</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IgnoreToken &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="拦截器写逻辑"><a href="#拦截器写逻辑" class="headerlink" title="拦截器写逻辑"></a>拦截器写逻辑</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断当前被拦截的Controller方法上是否加入了IgnoreToken注解</span></span><br><span class="line"><span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasMethodAnnotation</span> <span class="operator">=</span> handlerMethod.hasMethodAnnotation(IgnoreToken.class);</span><br><span class="line"><span class="keyword">if</span> (hasMethodAnnotation)&#123;</span><br><span class="line">    <span class="comment">//加入了IgnoreToken注解，直接放行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是一个判断Controller方法上是否加入了IgnoreToken注解，如果加入了IgnoreToken注解，直接放行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="项目模块化" scheme="https://onlyonemomo.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
    <category term="模块化" scheme="https://onlyonemomo.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>009-模块化之公共字段自动填充</title>
    <link href="https://onlyonemomo.github.io/2022/09/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/009-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/"/>
    <id>https://onlyonemomo.github.io/2022/09/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/009-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/</id>
    <published>2022-09-08T12:25:01.000Z</published>
    <updated>2022-09-12T08:38:15.855Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p><span id="more"></span><h5 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h5><blockquote><p>1、自定义注解AutoFill，用于标识某个方法需要进行公共字段自动填充</p><p>2、自定义切面类AutoFillAspect，统一拦截某些方法，通过反射为公共字段赋值</p><p>3、在Mapper的方法上加入自定义注解AutoFill</p></blockquote><h5 id="自定义注解AutoFill"><a href="#自定义注解AutoFill" class="headerlink" title="自定义注解AutoFill"></a>自定义注解AutoFill</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoFill &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作类型:insert、update</span></span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义切面类AutoFillAspect"><a href="#自定义切面类AutoFillAspect" class="headerlink" title="自定义切面类AutoFillAspect"></a>自定义切面类AutoFillAspect</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义切面类,统一为公共字段赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.reggie.mapper.*.*(..)) &amp;&amp; @annotation(com.reggie.annotation.AutoFill)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFillPointCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知 自动填充公共字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AutoFillAdvice</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段字段填充...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得方法签名对象</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="comment">//获得方法上的注解</span></span><br><span class="line">        <span class="type">AutoFill</span> <span class="variable">autoFill</span> <span class="operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);</span><br><span class="line">        <span class="comment">//获得注解中type的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> autoFill.type();<span class="comment">// insert  update</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前目标方法的参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args == <span class="literal">null</span> || args.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实体对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">entity</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备赋值的数据</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.equals(AutoFillConstant.INSERT)) &#123;</span><br><span class="line">            <span class="comment">//当前执行的是insert操作，为4个字段赋值</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setCreateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setCreateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//通过反射调用目标对象的方法</span></span><br><span class="line">                setCreateTime.invoke(entity, time);</span><br><span class="line">                setUpdateTime.invoke(entity, time);</span><br><span class="line">                setUpdateUser.invoke(entity, empId);</span><br><span class="line">                setCreateUser.invoke(entity, empId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;公共字段填充失败:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  当前执行的是update操作，为2个字段赋值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//通过反射调用目标对象的方法</span></span><br><span class="line">                setUpdateTime.invoke(entity, time);</span><br><span class="line">                setUpdateUser.invoke(entity, empId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;公共字段填充失败:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>里面我定义了自定义的常量，例如：AutoFillConstant.SET_UPDATE_USER等，麻烦照搬的时候要注意点</p><h5 id="最后在Mapper的方法上加入自定义注解AutoFill"><a href="#最后在Mapper的方法上加入自定义注解AutoFill" class="headerlink" title="最后在Mapper的方法上加入自定义注解AutoFill"></a>最后在Mapper的方法上加入自定义注解AutoFill</h5><h5 id="出现Bug"><a href="#出现Bug" class="headerlink" title="出现Bug"></a>出现Bug</h5><p>在运行的时候，出现了can’t find referenced pointcut autoFillPointCut的异常，这个时候需要检查 aspectj版本依赖，我使用<aspectj>1.8.6</aspectj>运行报错，改成<aspectj>1.9.4</aspectj>就可以正常运行了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。&lt;/p&gt;</summary>
    
    
    
    <category term="项目模块化" scheme="https://onlyonemomo.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
    <category term="模块化" scheme="https://onlyonemomo.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>024-java语法加强之xml、Dom4j、设计模式</title>
    <link href="https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/024-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8Bxml%E3%80%81Dom4j%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/024-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8Bxml%E3%80%81Dom4j%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-06T15:10:02.000Z</published>
    <updated>2022-09-06T15:10:46.289Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p><span id="more"></span><h3 id="1、XML"><a href="#1、XML" class="headerlink" title="1、XML"></a>1、XML</h3><h5 id="1-1-XML-的作用"><a href="#1-1-XML-的作用" class="headerlink" title="1.1 XML 的作用"></a>1.1 XML 的作用</h5><blockquote><p>作用：保存和传输数据</p></blockquote><h5 id="1-2-XML-的组成元素"><a href="#1-2-XML-的组成元素" class="headerlink" title="1.2 XML 的组成元素"></a>1.2 XML 的组成元素</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>文档声明</span><br><span class="line"><span class="number">2.</span>注释</span><br><span class="line"><span class="number">3.</span>标签<span class="comment">(元素)</span></span><br><span class="line"><span class="number">4.</span>属性</span><br><span class="line"><span class="number">5.</span>实体字符      &lt;       &amp;<span class="keyword">lt</span>;</span><br><span class="line"><span class="number">6.</span>CDATA字符数据区</span><br></pre></td></tr></table></figure><h5 id="1-3-XML-约束技术"><a href="#1-3-XML-约束技术" class="headerlink" title="1.3 XML 约束技术"></a>1.3 XML 约束技术</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.DTD</span> 弱</span><br><span class="line"><span class="number">2</span><span class="selector-class">.SCHEMA</span> 强</span><br></pre></td></tr></table></figure><h5 id="1-4-解析XML文档DOM方式原理"><a href="#1-4-解析XML文档DOM方式原理" class="headerlink" title="1.4 解析XML文档DOM方式原理"></a>1.4 解析XML文档DOM方式原理</h5><blockquote><p>原理：一次性把XML文件中所有内容读取到内存中,形成一颗DOM</p></blockquote><h3 id="2、Dom4j"><a href="#2、Dom4j" class="headerlink" title="2、Dom4j"></a>2、Dom4j</h3><h5 id="2-1-dom4j解析XML文档"><a href="#2-1-dom4j解析XML文档" class="headerlink" title="2.1 dom4j解析XML文档"></a>2.1 dom4j解析XML文档</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入dom4j<span class="number">-2.1</span><span class="number">.1</span>.jar</span><br><span class="line"><span class="number">2.</span>创建解析器  SAXReader reader = <span class="built_in">new</span> SAXReader();</span><br><span class="line"><span class="number">3.</span>解析<span class="type">XML</span>文档  Document document = reader.<span class="keyword">read</span>(<span class="type">xml</span>路径)</span><br></pre></td></tr></table></figure><h5 id="2-2-xpath解析XML或HTML文档"><a href="#2-2-xpath解析XML或HTML文档" class="headerlink" title="2.2 xpath解析XML或HTML文档"></a>2.2 xpath解析XML或HTML文档</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.绝对路径: <span class="regexp">/根元素/</span>子元素/孙元素</span><br><span class="line"><span class="number">2</span>.相对路径: .<span class="regexp">/子元素/</span>孙元素</span><br><span class="line"><span class="number">3</span>.全文搜索: <span class="regexp">//</span>元素</span><br><span class="line"><span class="number">4</span>.属性查找: <span class="regexp">//</span>@属性名  找属性</span><br><span class="line"><span class="regexp">//</span>元素[@属性名]  找元素</span><br></pre></td></tr></table></figure><h5 id="3-3-解析XML-操作Element"><a href="#3-3-解析XML-操作Element" class="headerlink" title="3.3 解析XML-操作Element"></a>3.3 解析XML-操作Element</h5><table><thead><tr><th align="left">方法名</th><th>说明</th></tr></thead><tbody><tr><td align="left">List<Element> elements()</td><td>得到当前元素下所有子元素</td></tr><tr><td align="left">Element element(String name)</td><td>得到当前元素下指定名字的子元素返回集合</td></tr><tr><td align="left">String getName()</td><td>得到当前元素下指定名字的子元素,如果有很多名字相同的返回第一个</td></tr><tr><td align="left">String  attributeValue(String name)</td><td>得到元素名字</td></tr><tr><td align="left">String elementText(子元素名)</td><td>通过属性名直接得到属性值</td></tr><tr><td align="left">String getText()</td><td>得到指定名称的子元素的文本</td></tr></tbody></table><h3 id="3、工厂模式"><a href="#3、工厂模式" class="headerlink" title="3、工厂模式"></a>3、工厂模式</h3><blockquote><p>定义一个工厂类,编写创建对象的方法,在方法中根据不同参数创建不同对象</p></blockquote><h6 id="Car-接口"><a href="#Car-接口" class="headerlink" title="Car 接口"></a>Car 接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Bmw"><a href="#Bmw" class="headerlink" title="Bmw"></a>Bmw</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bmw</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;宝马飞快的跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Benz"><a href="#Benz" class="headerlink" title="Benz"></a>Benz</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Benz</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奔驰飞快的奔驰!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CarFactory"><a href="#CarFactory" class="headerlink" title="CarFactory"></a>CarFactory</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 汽车工厂 (工厂模式)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="comment">// 专门用于生成汽车</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createCar</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Demo03"><a href="#Demo03" class="headerlink" title="Demo03"></a>Demo03</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 以前自己创建对象并使用(既要创建对象也要使用对象)</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">        c1.run();</span><br><span class="line"></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">        c2.run();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用工厂类创建汽车(通过工厂类创建对象,我们主要是使用对象)</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c3</span> <span class="operator">=</span> CarFactory.createCar(<span class="number">1</span>);</span><br><span class="line">        c3.run();</span><br><span class="line"></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c4</span> <span class="operator">=</span> CarFactory.createCar(<span class="number">2</span>);</span><br><span class="line">        c4.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4、动态代理"><a href="#4、动态代理" class="headerlink" title="4、动态代理"></a>4、动态代理</h3><h5 id="4-1-动态代理模式的作用"><a href="#4-1-动态代理模式的作用" class="headerlink" title="4.1 动态代理模式的作用"></a>4.1 动态代理模式的作用</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.对功能进行增强</span><br><span class="line">2.对功能进行拦截</span><br></pre></td></tr></table></figure><h5 id="4-2-Proxy的方法生成代理对象"><a href="#4-2-Proxy的方法生成代理对象" class="headerlink" title="4.2 Proxy的方法生成代理对象"></a>4.2 Proxy的方法生成代理对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Proxy类</span><br><span class="line">    <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class="line">    创建代理对象</span><br><span class="line"></span><br><span class="line">    ClassLoader loader:     类加载器, 当前类型.class.getClassLoader</span><br><span class="line">    Class&lt;?&gt;[] interfaces:  <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;多个接口&#125;</span><br><span class="line">    InvocationHandler h:    执行处理器,给一个匿名内部类</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！&lt;strong&gt;学习最好的方式就是教授别人 —费曼学习法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础与加强" scheme="https://onlyonemomo.github.io/categories/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>023-java语法加强之反射、注解</title>
    <link href="https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/023-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3/"/>
    <id>https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/023-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-09-06T15:08:02.000Z</published>
    <updated>2022-09-06T15:09:10.844Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p><span id="more"></span><h3 id="1、反射"><a href="#1、反射" class="headerlink" title="1、反射"></a>1、反射</h3><h5 id="1-1获取Class-字节码对象（重点）"><a href="#1-1获取Class-字节码对象（重点）" class="headerlink" title="1.1获取Class 字节码对象（重点）"></a>1.1获取Class 字节码对象（重点）</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:学习三种获取<span class="keyword">Class</span>对象的方式</span><br><span class="line"></span><br><span class="line">小结:</span><br><span class="line">    三种获取<span class="keyword">Class</span>对象的方式</span><br><span class="line">        方式<span class="number">1</span>：类名.class</span><br><span class="line">        方式<span class="number">2</span>：对象名.getClass()</span><br><span class="line">        方式<span class="number">3</span>：<span class="keyword">Class</span>.forName(<span class="string">&quot;类全名&quot;</span>); //类全名就是 包名.类名</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Class</span>类中的方法:</span><br><span class="line">        String getSimpleName(); 获得类名</span><br><span class="line">        String getName();  获得类全名：包名.类名</span><br><span class="line"></span><br><span class="line">    注意:</span><br><span class="line">        这三种方式获取的是同一个<span class="keyword">Class</span>对象</span><br><span class="line">        一个类只有一个<span class="keyword">Class</span>对象（可以理解为一个类只有一个字节码文件）</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式1：类名.class</span></span><br><span class="line">        Class&lt;Person&gt; clazz1 = Person.class;</span><br><span class="line">        System.out.println(clazz1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：对象名.getClass()</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; clazz2 = p.getClass();</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式3：Class.forName(&quot;类全名&quot;);</span></span><br><span class="line">        Class&lt;?&gt; clazz3 = Class.forName(<span class="string">&quot;com.itheima.test.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这三种方式获取的是同一个Class对象</span></span><br><span class="line">        System.out.println(clazz1==clazz2);</span><br><span class="line">        System.out.println(clazz1==clazz3);</span><br><span class="line"></span><br><span class="line">        System.out.println(clazz1.getName());<span class="comment">//获得类全名 包名.类名  com.itheima.test.Person</span></span><br><span class="line">        System.out.println(clazz1.getSimpleName()); <span class="comment">//获得类名  Person</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-Constructor-构造器对象"><a href="#1-2-Constructor-构造器对象" class="headerlink" title="1.2 Constructor 构造器对象"></a>1.2 Constructor 构造器对象</h5><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:通过反射获取public的构造方法</span><br><span class="line"></span><br><span class="line">讲解:</span><br><span class="line">    1.Constructor类作用:</span><br><span class="line">        表示类中的构造方法，每一个构造方法就是一个Constructor的对象。</span><br><span class="line"></span><br><span class="line">    2.通过反射获取public的构造方法 (Constructor对象)</span><br><span class="line">        Constructor<span class="attribute">&lt;?&gt;</span>[]  getConstructors()：返回public修饰的所有构造方法对象的数组</span><br><span class="line">        Constructor<span class="attribute">&lt;T&gt;</span> getConstructor​(Class<span class="attribute">&lt;?&gt;</span>... parameterTypes)：返回public修饰的单个构造方法对象</span><br><span class="line"></span><br><span class="line">        Constructor<span class="attribute">&lt;?&gt;</span>[] getDeclaredConstructors​()：返回任意权限的所有构造方法对象的数组</span><br><span class="line">        Constructor<span class="attribute">&lt;T&gt;</span> getDeclaredConstructor​(Class<span class="attribute">&lt;?&gt;</span>... parameterTypes)：返回任意权限的单个构造方法对象</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射获取Person类所有的公开的构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c : cons)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Person类某个公开的构造器</span></span><br><span class="line">        Constructor&lt;Person&gt; con1 = clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(con1);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Person类无参的构造器</span></span><br><span class="line">        Constructor&lt;Person&gt; con2 = clazz.getConstructor();</span><br><span class="line">        System.out.println(con2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取任意权限的构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons2 = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; c : cons2) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取任意权限的单个构造器,参数的类型是String</span></span><br><span class="line">        Constructor&lt;Person&gt; c2 = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-使用Constructor-创建对象（重点）"><a href="#1-3-使用Constructor-创建对象（重点）" class="headerlink" title="1.3 使用Constructor 创建对象（重点）"></a>1.3 使用Constructor 创建对象（重点）</h5><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：利用Constructor类创建对象</span><br><span class="line"></span><br><span class="line">    要求：</span><br><span class="line">        反射方式获取带参构造方法，并创建对象</span><br><span class="line">        反射方式获取无参构造方法，并创建对象</span><br><span class="line">        反射方式获取私有构造方法，并创建对象</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        Constructor类代表 <span class="string">&quot;构造方法&quot;</span> 这类事物，</span><br><span class="line">        而一个Constructor对象就代表一个具体的构造方法，可以用于创建该构造方法对应的对象。</span><br><span class="line"></span><br><span class="line">        Constructor类中创建对象的方法：</span><br><span class="line">            T newInstance​(<span class="type">Object</span>... initargs)：根据指定的构造方法创建对象，</span><br><span class="line">            setAccessible(<span class="type">boolean</span> flag)：设置为<span class="literal">true</span>,表示取消访问检查</span><br><span class="line"></span><br><span class="line">       反射方式创建对象特点：</span><br><span class="line">            代码更复杂，但是灵活度更高，而且可以使用任何权限的构造方法创建对象</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Person(String name, int age)构造器</span></span><br><span class="line">        Constructor&lt;Person&gt; con = clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//newInstance(构造方法的实参) ：使用构造器创建对象</span></span><br><span class="line">        <span class="comment">//Person p = new Person(&quot;张三&quot;, 19);</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> con.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射调用私有的构造器</span></span><br><span class="line">        Constructor&lt;Person&gt; con2 = clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置允许访问</span></span><br><span class="line">        con2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> con2.newInstance(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-Method对象"><a href="#1-4-Method对象" class="headerlink" title="1.4 Method对象"></a>1.4 Method对象</h5><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">目标：利用反射获取类的成员方法</span><br><span class="line"></span><br><span class="line">小结：</span><br><span class="line">    <span class="built_in">Method</span>类：</span><br><span class="line">        表示 <span class="string">&quot;成员方法&quot;</span> 这类事物，每一个<span class="built_in">Method</span>对象代表一个成员方法。</span><br><span class="line"></span><br><span class="line">    <span class="variable">Class</span>类中获取成员方法：（<span class="built_in">Method</span>对象）</span><br><span class="line">        <span class="number">1.</span>获取<span class="variable">public</span>的成员方法：</span><br><span class="line">            <span class="built_in">Method</span><span class="punctuation">[</span><span class="punctuation">]</span> <span class="variable">getMethods</span><span class="punctuation">(</span><span class="punctuation">)</span>：获取所有成员方法，包括从父类继承的。</span><br><span class="line">            <span class="built_in">Method</span> <span class="variable">getMethod</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">name</span><span class="operator">,</span> <span class="variable">Class</span><span class="operator">&lt;?&gt;...</span> <span class="variable">parameterTypes</span><span class="punctuation">)</span> ：获取单个成员方法。</span><br><span class="line">                   参数<span class="variable">name</span>：表示方法名</span><br><span class="line">                   参数<span class="variable">parameterTypes</span>：表示方法的形参类型</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>获取本类中任何权限的成员方法：</span><br><span class="line">            <span class="built_in">Method</span><span class="punctuation">[</span><span class="punctuation">]</span> <span class="variable">getDeclaredMethods</span><span class="punctuation">(</span><span class="punctuation">)</span>：获取所有成员方法，不包括继承的。</span><br><span class="line">            <span class="built_in">Method</span> <span class="variable">getDeclaredMethod</span>​<span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">name</span><span class="operator">,</span> <span class="variable">Class</span><span class="operator">&lt;?&gt;...</span> <span class="variable">parameterTypes</span><span class="punctuation">)</span>：获取单个成员方法对象。</span><br><span class="line"></span><br><span class="line">    注意<span class="operator">:</span> <span class="variable">int</span><span class="operator">.</span><span class="variable">class</span> 和 <span class="built_in">Integer</span><span class="operator">.</span><span class="variable">class</span> 是不一样的</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类全名获取字节码</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.itheima.test.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的public的方法，包括继承下来的方法</span></span><br><span class="line">        Method[] m1 = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : m1) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取任意权限的所有方法，只能获取本类的所有方法</span></span><br><span class="line">        Method[] m2 = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : m2) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-使用Method对象运行方法-重点）"><a href="#1-5-使用Method对象运行方法-重点）" class="headerlink" title="1.5 使用Method对象运行方法(重点）"></a>1.5 使用Method对象运行方法(重点）</h5><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：使用<span class="built_in">Method</span>对象运行方法</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Method</span>类：</span><br><span class="line">        一个<span class="built_in">Method</span>类的对象就代表一个成员方法。</span><br><span class="line">        只要获得一个<span class="built_in">Method</span>对象，就可以让它对应的成员方法运行。</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Method</span>类中的方法：</span><br><span class="line">        <span class="variable">Object</span> <span class="variable">invoke</span>​<span class="punctuation">(</span><span class="variable">Object</span> <span class="variable">obj</span><span class="operator">,</span> <span class="variable">Object</span><span class="operator">...</span> <span class="variable">args</span><span class="punctuation">)</span>：使用反射运行方法</span><br><span class="line">            参数<span class="variable">obj</span>：调用成员方法的对象</span><br><span class="line">            参数<span class="variable">args</span>：可变参数，表示调用方法时传递的实参（如果没有就不写）</span><br><span class="line">            返回值：方法的返回值（如果没有就不用接）</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//类全名获取字节码</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.itheima.test.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取单个公开权限的Method对象</span></span><br><span class="line">        <span class="comment">//getMethod(方法名, 方法的参数类型)</span></span><br><span class="line">        <span class="comment">//获取公开的show方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m3</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;show&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(m3);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//运行show方法 ：</span></span><br><span class="line">        <span class="comment">// 运行一个成员方法：1要有对象，2要有参数</span></span><br><span class="line">        <span class="comment">//Person p = new Person();</span></span><br><span class="line">        <span class="comment">//int a = p.show(10, 20);</span></span><br><span class="line">        <span class="comment">//System.out.println(a);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//invoke(对象,实参)：反射运行方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) clazz.getConstructor().newInstance(); <span class="comment">//反射创建对象</span></span><br><span class="line">        <span class="comment">//让m3这个方法执行，传入调用这个方法的对象p，和这个方法的实参</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">int</span>)m3.invoke(p, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射运行私有的work方法</span></span><br><span class="line">        <span class="comment">//1.获取work的Method对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">work</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;work&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.设置权限为允许访问</span></span><br><span class="line">        work.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.反射运行方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> (<span class="type">int</span>)work.invoke(p, <span class="number">8</span>);</span><br><span class="line">        System.out.println(money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射运行静态的run方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">run</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        <span class="comment">//类名调用，不需要对象</span></span><br><span class="line">        run.invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//run.invoke(p);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-6-通过Field操作成员变量"><a href="#1-6-通过Field操作成员变量" class="headerlink" title="1.6 通过Field操作成员变量"></a>1.6 通过Field操作成员变量</h5><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:通过反射获取成员变量Field并使用</span><br><span class="line"></span><br><span class="line">小结:</span><br><span class="line">    <span class="number">1</span>.Field的作用:</span><br><span class="line">        Filed代表类中的成员变量。一个Field对象就是一个成员变量</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>.通过<span class="keyword">Class</span>获取Field</span><br><span class="line">        Field getField​(<span class="type">String</span> name)：返回单个公共成员变量对象</span><br><span class="line">        Field[] getFields​()：返回所有公共成员变量对象的数组</span><br><span class="line">        Field getDeclaredField​(<span class="type">String</span> name)：返回单个成员变量对象</span><br><span class="line">        Field[] getDeclaredFields​()：返回所有成员变量对象的数组</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>.通过Field操作成员变量</span><br><span class="line">        保存值:</span><br><span class="line">            <span class="keyword">set</span>(<span class="type">Object</span> obj, <span class="type">Object</span> value);</span><br><span class="line">                参数obj: 成员变量所在对象</span><br><span class="line">                参数value: 成员变量的值</span><br><span class="line">        获取值:</span><br><span class="line">            <span class="type">Object</span> <span class="keyword">get</span>(<span class="type">Object</span> obj);</span><br><span class="line">                参数obj: 成员变量所在对象</span><br><span class="line">                返回值<span class="type">Object</span>: 返回成员变量的值</span><br><span class="line"></span><br><span class="line">    通常不会直接反射成员变量,而是反射成员变量对应的<span class="keyword">get</span>/<span class="keyword">set</span>方法</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回所有公共成员变量对象的数组</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回所有任意权限的成员变量</span></span><br><span class="line">        Field[] fs2 = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fs2) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回name成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f1</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//赋值  set</span></span><br><span class="line">        <span class="comment">//set(对象, 值)</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line">        f1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f1.set(p,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取值  get</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> f1.get(p);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-7-反射练习案例"><a href="#1-7-反射练习案例" class="headerlink" title="1.7 反射练习案例"></a>1.7 反射练习案例</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">需求: 利用反射根据文件中的不同类名和方法名，创建不同的对象并调用方法。</span><br><span class="line"></span><br><span class="line">分析:</span><br><span class="line">    <span class="number">1.</span>通过Properties加载配置文件  load(字符流)</span><br><span class="line">    <span class="number">2.</span>从Properties中获取类名和方法名</span><br><span class="line">    <span class="number">3.</span>通过类名反射得到<span class="keyword">Class</span>对象</span><br><span class="line">    <span class="number">4.</span>通过<span class="keyword">Class</span>对象创建一个对象</span><br><span class="line">    <span class="number">5.</span>通过<span class="keyword">Class</span>对象得到方法</span><br><span class="line">    <span class="number">6.</span>调用方法</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        p.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day13\\ceshi\\config.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射运行方法</span></span><br><span class="line">        <span class="comment">//1.获取字节码对象 forName</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.反射获取Method对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredMethod(method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.运行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line">        m.invoke(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、注解"><a href="#2、注解" class="headerlink" title="2、注解"></a>2、注解</h3><h5 id="2-1-自定义注解"><a href="#2-1-自定义注解" class="headerlink" title="2.1 自定义注解"></a>2.1 自定义注解</h5><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标<span class="operator">:</span>了解自定义注解的格式</span><br><span class="line"></span><br><span class="line">小结<span class="operator">:</span></span><br><span class="line">    <span class="number">1.</span>自定义注解的格式</span><br><span class="line">        <span class="operator">@</span><span class="keyword">interface</span> 注解名 &#123;</span><br><span class="line">            数据类型 属性名();</span><br><span class="line">        &#125;</span><br><span class="line">        注解中的属性可以有默认值,格式为：</span><br><span class="line">        数据类型 属性名() <span class="keyword">default</span> 默认值;</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>注解中的属性类型</span><br><span class="line">        <span class="number">8</span>种基本数据类型</span><br><span class="line">        String, Class, 枚举, 注解</span><br><span class="line">        以上类型的数组</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Anno &#123;</span><br><span class="line">    <span class="comment">//数据类型  属性名();</span></span><br><span class="line">    <span class="comment">//常用的数据类型有： 基本类型  String  枚举</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>; <span class="comment">//指定默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="symbol">Anno2</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Anno2</span></span><br><span class="line"><span class="meta">@Anno(name = &quot;张三&quot;, age = 18)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Anno2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Anno2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-注解的Value属性"><a href="#2-2-注解的Value属性" class="headerlink" title="2.2 注解的Value属性"></a>2.2 注解的Value属性</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标:了解自定义注解的特殊格式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    小结:</span></span><br><span class="line"><span class="comment">        当注解中只有一个属性，并且属性名是value时：在为属性赋值时，省略value属性名。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Week &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Week(value = &quot;周三&quot;)</span></span><br><span class="line"><span class="meta">@Week(&quot;周三&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo09</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-元注解"><a href="#2-3-元注解" class="headerlink" title="2.3 元注解"></a>2.3 元注解</h5><figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标<span class="punctuation">:</span>了解元注解的作用</span><br><span class="line"></span><br><span class="line">小结<span class="punctuation">:</span></span><br><span class="line">    <span class="number">1</span>.什么是元注解?</span><br><span class="line">        修饰注解的注解</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>. <span class="meta">@Target</span>元注解</span><br><span class="line">        限制注解的使用位置。（注解默认可以放在类的任何成员上）</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>.<span class="meta">@Target</span>常用配置</span><br><span class="line">        <span class="meta">@Target</span><span class="punctuation">(</span>ElementType.<span class="keyword">TYPE</span><span class="punctuation">)</span> ：在类或接口上</span><br><span class="line">        <span class="meta">@Target</span><span class="punctuation">(</span>ElementType.CONSTRUCTOR<span class="punctuation">)</span> ：在构造方法</span><br><span class="line">        <span class="meta">@Target</span><span class="punctuation">(</span>ElementType.METHOD<span class="punctuation">)</span> ：在成员方法上</span><br><span class="line">        <span class="meta">@Target</span><span class="punctuation">(</span>ElementType.FIELD<span class="punctuation">)</span> ：在成员变量上</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Target常用配置</span></span><br><span class="line"><span class="comment">        @Target(ElementType.TYPE) ：在类或接口上</span></span><br><span class="line"><span class="comment">        @Target(ElementType.CONSTRUCTOR) ：在构造方法</span></span><br><span class="line"><span class="comment">        @Target(ElementType.METHOD) ：在成员方法上</span></span><br><span class="line"><span class="comment">        @Target(ElementType.FIELD) ：在成员变量上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.CONSTRUCTOR&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Week &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Week</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Week</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo10</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Week</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Week</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-元注解Retention"><a href="#2-4-元注解Retention" class="headerlink" title="2.4 元注解Retention"></a>2.4 元注解Retention</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:了解元注解的作用</span><br><span class="line"></span><br><span class="line">小结:</span><br><span class="line">    <span class="number">1</span>.<span class="variable">@Retention</span>元注解:</span><br><span class="line">        指定注解的生命周期 (即注解会保留到哪个阶段)</span><br><span class="line"></span><br><span class="line">        <span class="variable">@Retention</span>(RetentionPolicy.SOURCE) 注解只在源代码阶段有效，编译后就没有了。</span><br><span class="line">        <span class="variable">@Retention</span>(RetentionPolicy.CLASS) 注解只在源代码，字节码阶段有效，运行后就没有了 （默认）</span><br><span class="line">        <span class="variable">@Retention</span>(RetentionPolicy.RUNTIME) 注解在所有阶段都存在。</span><br><span class="line"></span><br><span class="line">        SOURCE(源代码阶段)       CLASS(字节码阶段)         RUNTIME(运行时阶段)</span><br><span class="line">        xxx.java源文件    --&gt;    xxx.<span class="keyword">class</span>字节码    --&gt;   调用JVM虚拟机运行程序</span><br><span class="line"> *<span class="regexp">/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">//注解的生命周期改到源代码阶段（编译完成后，就消失了）</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnno</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo11</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-注解解析"><a href="#2-5-注解解析" class="headerlink" title="2.5 注解解析"></a>2.5 注解解析</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:使用反射完成注解解析</span><br><span class="line"></span><br><span class="line">小结：</span><br><span class="line">    <span class="number">1.</span>注解解析相关方法：</span><br><span class="line">            Annotation[] getAnnotations​() 获取所有注解</span><br><span class="line">            &lt;Annotation&gt; T getAnnotation(<span class="keyword">Class</span>&lt;T&gt; annotationClass) 获取一个指定的注解</span><br><span class="line">            boolean isAnnotationPresent(<span class="keyword">Class</span>&lt;Annotation&gt; annotationClass) 判断是否有指定的注解</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>如何解析注解?</span><br><span class="line">        通过反射来解析注解，注解在谁头上就用谁来解析</span><br><span class="line">            如果注解在类上,使用<span class="keyword">Class</span>来获取</span><br><span class="line">            如果注解在构造方法上,使用Constructor来获取</span><br><span class="line">            如果注解在成员方法上,使用Method来获取</span><br><span class="line">            如果注解在成员变量上,使用<span class="keyword">Field</span>来获取</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">//规定Book注解只能用在方法上</span></span><br><span class="line"><span class="comment">//默认生命周期是CLASS</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//在反射阶段才能解析到注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">    String[] author();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookTest</span> &#123;</span><br><span class="line">    <span class="meta">@Book(name = &quot;红楼梦&quot;,price = 19.9, author = &#123;&quot;曹雪芹&quot;,&quot;高鹗&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射获取show方法</span></span><br><span class="line">    <span class="comment">//1.获取字节码对象</span></span><br><span class="line">    Class&lt;BookTest&gt; clazz = BookTest.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.通过字节码对象获取方法</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过方法获取方法头上的注解</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">an</span> <span class="operator">=</span> show.getAnnotation(Book.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断注解是否存在</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> show.isAnnotationPresent(Book.class);</span><br><span class="line">    System.out.println(b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作注解，获取属性</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> an.name();</span><br><span class="line">    <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> an.price();</span><br><span class="line">    String[] author = an.author();</span><br><span class="line"></span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(price);</span><br><span class="line">    System.out.println(Arrays.toString(author));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-6-注解案例-模拟"><a href="#2-6-注解案例-模拟" class="headerlink" title="2.6 注解案例_模拟"></a>2.6 注解案例_模拟</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标:注解应用案例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    需求:模拟JUnit自带的<span class="doctag">@Test</span>注解,自动运行带<span class="doctag">@MyTest</span>注解的方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现步骤:</span></span><br><span class="line"><span class="comment">        1.定义MyTest注解。</span></span><br><span class="line"><span class="comment">        2.定义java类并包含多个方法, 在一些方法上加<span class="doctag">@MyTest</span>注解。</span></span><br><span class="line"><span class="comment">        3.使用反射得到类中的所有Method。</span></span><br><span class="line"><span class="comment">        4.遍历每个Method，如果有<span class="doctag">@MyTest</span>注解, 就运行这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只能在方法使用</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="comment">//注解能在运行阶段获取</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">weakup</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;起床&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取MyClass的字节码</span></span><br><span class="line">        Class&lt;MyClass&gt; clazz = MyClass.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射获取所有方法</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射创建对象</span></span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历methods数组，得到每个方法对象</span></span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m.isAnnotationPresent(MyTest.class))&#123;</span><br><span class="line">                <span class="comment">//运行该方法</span></span><br><span class="line">                m.invoke(myClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！&lt;strong&gt;学习最好的方式就是教授别人 —费曼学习法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础与加强" scheme="https://onlyonemomo.github.io/categories/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>022-java语法加强之网络编程</title>
    <link href="https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/022-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/022-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2022-09-06T15:07:02.000Z</published>
    <updated>2022-09-06T15:07:43.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p><span id="more"></span><h3 id="1、InetAddress类"><a href="#1、InetAddress类" class="headerlink" title="1、InetAddress类"></a>1、InetAddress类</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:学习InetAddress类的使用</span><br><span class="line"></span><br><span class="line">    小结:</span><br><span class="line">        <span class="number">1</span>.InetAddress的作用?</span><br><span class="line">            表示IP地址</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.如何得到InetAddress对象?</span><br><span class="line">            <span class="keyword">static</span> InetAddress getLocalHost() ：获取本机的IP地址对象</span><br><span class="line">            <span class="keyword">static</span> InetAddress getByName(<span class="type">String</span> host) ：通过 IP地址/主机名/域名, 获取IP地址对象</span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>.InetAddress类中的方法</span><br><span class="line">            <span class="type">String</span> getHostName(): 获取主机名</span><br><span class="line">            <span class="type">String</span> getHostAddress() ：返回IP地址字符串</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取本机的IP地址对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ip1</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(ip1);</span><br><span class="line">        System.out.println(ip1.getHostName());</span><br><span class="line">        System.out.println(ip1.getHostAddress());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取本地或远程的IP地址对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ip2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(ip2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、UDP通信（了解）"><a href="#2、UDP通信（了解）" class="headerlink" title="2、UDP通信（了解）"></a>2、UDP通信（了解）</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：编写UDP接收端</span><br><span class="line"></span><br><span class="line">    接收数据的步骤：</span><br><span class="line">        <span class="number">1</span>.创建接收端。 DatagramSocket s = new DatagramSocket(<span class="keyword">int</span> port);</span><br><span class="line">        <span class="number">2</span>.创建空的数据包，用于装数据。DatagramPacket</span><br><span class="line">        <span class="number">3</span>.接收数据。receive(DatagramPacket p)方法</span><br><span class="line">        <span class="number">4</span>.解析数据。（从数组中获取有效内容）</span><br><span class="line">        <span class="number">5</span>.关闭资源。<span class="keyword">close</span></span><br><span class="line"></span><br><span class="line">    DatagramPacket接收数据的构造方法：</span><br><span class="line">        DatagramPacket(byte[] buf, <span class="keyword">int</span> <span class="keyword">length</span>)</span><br><span class="line">            buf: 用来保存接收到的数据</span><br><span class="line">            <span class="keyword">length</span>: 指定接收数据的长度</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：编写UDP发送端</span><br><span class="line"></span><br><span class="line">    发送数据的步骤：</span><br><span class="line">        <span class="number">1</span>.创建发送端。 DatagramSocket s = new DatagramSocket();</span><br><span class="line">        <span class="number">2</span>.创建数据包，并指定IP和端口。DatagramPacket</span><br><span class="line">        <span class="number">3</span>.发送数据。send(DatagramPacket p)方法</span><br><span class="line">        <span class="number">4</span>.关闭资源。</span><br><span class="line"></span><br><span class="line">    DatagramPacket发送数据的构造方法：</span><br><span class="line">        DatagramPacket(byte[] buf, <span class="built_in">int</span> <span class="built_in">offset</span>, <span class="built_in">int</span> length, InetAddress <span class="built_in">address</span>, <span class="built_in">int</span> port)</span><br><span class="line">            buf ：要发送的字节数据</span><br><span class="line">            <span class="built_in">offset</span>：从数组的哪个位置开始发送</span><br><span class="line">            length：发送数据的长度</span><br><span class="line">            <span class="built_in">address</span>：接收端的IP</span><br><span class="line">            port：接收端的端口号</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="3、TCP通信（重点）"><a href="#3、TCP通信（重点）" class="headerlink" title="3、TCP通信（重点）"></a>3、TCP通信（重点）</h3><h6 id="TCPClient"><a href="#TCPClient" class="headerlink" title="TCPClient"></a>TCPClient</h6><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：编写<span class="type">TCP</span>客户端程序</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1.</span> 创建客户端<span class="type">Socke</span>对象，与指定服务端连接</span><br><span class="line">                <span class="type">Socket</span>(<span class="type">String</span> host, int <span class="keyword">port</span>)</span><br><span class="line">                    host ：服务端IP地址</span><br><span class="line">                    <span class="keyword">port</span> ：服务端端口号</span><br><span class="line"></span><br><span class="line">        2. 得到输出流写数据</span><br><span class="line">                OutputStream  getOutputStream()</span><br><span class="line"></span><br><span class="line">        3. 得到输入流读取数据</span><br><span class="line">                InputStream   getInputStream()</span><br><span class="line"></span><br><span class="line">        4. 关闭资源</span><br><span class="line">                void  close()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端启动&quot;</span>);</span><br><span class="line">        <span class="comment">//1.创建TCP客户端，指定目的地的ip和端口</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">22222</span>); <span class="comment">//127.0.0.1代表本机</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.往服务端发送数据(得到输出流写数据)</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        out.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        socket.shutdownOutput(); <span class="comment">//发出输出结束的标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.接收服务端的回复信息(得到输入流读取数据)</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> in.read(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务端的回复：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,length));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.关闭资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="TCPServer"><a href="#TCPServer" class="headerlink" title="TCPServer"></a>TCPServer</h6><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：编写<span class="type">TCP</span>服务端程序</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1.</span> 创建<span class="type">TCP</span>服务端<span class="type">ServerSocket</span>对象。</span><br><span class="line">                 <span class="type">ServerSocket</span>(int <span class="keyword">port</span>)</span><br><span class="line">        2. 监听客户端的连接，连接成功返回一个Socket对象。</span><br><span class="line">                 Socket   accept()</span><br><span class="line">        3.得到输入流读取数据。</span><br><span class="line">                 InputStream   getInputStream()</span><br><span class="line">        4.得到输出流写数据。</span><br><span class="line">                 OutputStream  getOutputStream()</span><br><span class="line">        5.关闭资源</span><br><span class="line">                 void  close()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端启动&quot;</span>);</span><br><span class="line">        <span class="comment">//创建服务端ServerSocket</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">22222</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//和客户端建立连接（TCP通信的建立）</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        System.out.println(socket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收客户端的消息（读取数据）</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=in.read(array))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端的消息：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回复客户端（写出数据）</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        out.write(<span class="string">&quot;大家好&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        <span class="comment">//ss.close(); //通常不关闭</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4、文件上传-重要"><a href="#4、文件上传-重要" class="headerlink" title="4、文件上传(重要)"></a>4、文件上传(重要)</h3><p>需要自己看代码</p><h3 id="5、模拟网站服务器"><a href="#5、模拟网站服务器" class="headerlink" title="5、模拟网站服务器"></a>5、模拟网站服务器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:模拟网站服务器</span><br><span class="line"></span><br><span class="line">    网站服务器的核心?</span><br><span class="line">        网站服务器底层使用TCP服务端,浏览器访问服务器,服务器就给浏览器返回数据</span><br><span class="line"></span><br><span class="line">    原理：</span><br><span class="line">    1.浏览器 (TCP客户端)</span><br><span class="line">        在浏览器的地址栏中输入: http://服务器域名或IP:端口号</span><br><span class="line">        我们现在输入: http://127.0.0.1:9999</span><br><span class="line"></span><br><span class="line">        http:// 是超文本传输协议,可以传输文字图片,视频等等资源</span><br><span class="line">        127.0.0.1: 服务器的IP地址（访问本机自己）</span><br><span class="line">        9999: 服务器的端口号</span><br><span class="line"></span><br><span class="line">    2.服务器 (TCP服务端)</span><br><span class="line">        网站服务器相当于TCP服务端，网站服务器要将数据传输给浏览器，本质就是TCP传输数据。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务端</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收浏览器客户端的请求</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，要发送过去的数据 格式和特点</span></span><br><span class="line">        out.write(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">&quot;Content-Type:text/html\r\n&quot;</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把index.html页面返回给浏览器</span></span><br><span class="line">        <span class="comment">//读取index.html页面</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day12\\web\\index.html&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bys = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6、Commons-io工具"><a href="#6、Commons-io工具" class="headerlink" title="6、Commons_io工具"></a>6、Commons_io工具</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：了解 <span class="variable">Commons</span><span class="operator">-</span><span class="variable">io</span>的常用功能</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span><span class="variable">FileUtils</span>操作文件或文件夹</span><br><span class="line">        拷贝文件：<span class="variable">copyFile</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">srcFile</span><span class="operator">,</span> <span class="built_in">File</span> <span class="variable">destFile</span><span class="punctuation">)</span></span><br><span class="line">        拷贝文件夹：<span class="variable">copyDirectoryToDirectory</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">srcDir</span><span class="operator">,</span> <span class="built_in">File</span> <span class="variable">destDir</span><span class="punctuation">)</span> 文件夹里面的子文件夹也会一起拷贝</span><br><span class="line">        删除文件夹<span class="operator">:</span> <span class="variable">deleteDirectory</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">directory</span><span class="punctuation">)</span> 注意：整个文件夹都会直接删除，不管里面是否有内容</span><br><span class="line">        获取文件或文件夹大小：<span class="variable">long</span> <span class="variable">sizeOf</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">file</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span><span class="variable">FileUtils</span>读取文件</span><br><span class="line">        读取文件内容为字符串：<span class="built_in">String</span> <span class="variable">readFileToString</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">file</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">encoding</span><span class="punctuation">)</span></span><br><span class="line">        将文件内容按行读取成字符串集合：<span class="built_in">List</span><span class="operator">&lt;</span><span class="built_in">String</span><span class="operator">&gt;</span> <span class="variable">readLines</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">file</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">encoding</span><span class="punctuation">)</span></span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//拷贝文件</span></span><br><span class="line">        FileUtils.copyFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\test.jpg&quot;</span>),<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12\\web\\test.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拷贝文件夹</span></span><br><span class="line">        FileUtils.copyDirectoryToDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12&quot;</span>),<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件夹</span></span><br><span class="line">        <span class="comment">//注意：整个文件夹都会直接删除，不管里面是否有内容</span></span><br><span class="line">        FileUtils.deleteDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\t_day12&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件或文件夹大小</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> FileUtils.sizeOf(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12&quot;</span>));</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取文件内容为字符串  readFileToString(文件对象,编码)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> FileUtils.readFileToString(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12\\web\\gbk_file.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将文件内容按行读取成字符串集合：List&lt;String&gt; readLines(文件对象,编码)</span></span><br><span class="line">        List&lt;String&gt; list = FileUtils.readLines(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12\\web\\gbk_file.txt&quot;</span>), <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7、扩展NIO"><a href="#7、扩展NIO" class="headerlink" title="7、扩展NIO"></a>7、扩展NIO</h3><h5 id="7-1-BIO"><a href="#7-1-BIO" class="headerlink" title="7.1 BIO"></a>7.1 BIO</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>解决阻塞办法：在获取客户端连接后，使用多线程，一个socket对应一个线程</span><br><span class="line"><span class="regexp">//</span>缺点：如果同时连接的客户太多，，会造成线程频繁创建，系统开销较大</span><br></pre></td></tr></table></figure><h5 id="7-2-NIO"><a href="#7-2-NIO" class="headerlink" title="7.2 NIO"></a>7.2 NIO</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NIO服务端：</span></span><br><span class="line"><span class="comment">    1.使用Selector多路复用器，监听每个客户端的请求事件。</span></span><br><span class="line"><span class="comment">    2.服务端不会阻塞等待某个客户端。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    NIO 有对应的框架netty</span></span><br><span class="line"><span class="comment">        tomcat服务器底层也是NIO</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="8、单元测试"><a href="#8、单元测试" class="headerlink" title="8、单元测试"></a>8、单元测试</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！&lt;strong&gt;学习最好的方式就是教授别人 —费曼学习法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础与加强" scheme="https://onlyonemomo.github.io/categories/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>021-java语法加强之IO流加强</title>
    <link href="https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/021-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BIO%E6%B5%81%E5%8A%A0%E5%BC%BA/"/>
    <id>https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/021-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BIO%E6%B5%81%E5%8A%A0%E5%BC%BA/</id>
    <published>2022-09-06T15:05:02.000Z</published>
    <updated>2022-09-06T15:06:13.450Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p><span id="more"></span><h3 id="1、字节缓冲流"><a href="#1、字节缓冲流" class="headerlink" title="1、字节缓冲流"></a>1、字节缓冲流</h3><h5 id="1-1-字节缓冲输入流"><a href="#1-1-字节缓冲输入流" class="headerlink" title="1.1 字节缓冲输入流"></a>1.1 字节缓冲输入流</h5><h6 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h6><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：学习字节缓冲流的使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     1.字节缓冲输入流：</span></span><br><span class="line"><span class="comment">        BufferedInputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     2.特点：</span></span><br><span class="line"><span class="comment">        缓冲流以Buffered开头，用法和FileInputStream一样。</span></span><br><span class="line"><span class="comment">        缓冲流底层使用数组作为缓冲区，能提高读写的效率。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     3.构造方法：</span></span><br><span class="line"><span class="comment">        BufferedInputStream(InputStream in)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\a.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环，一次读一个数组</span></span><br><span class="line">    <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=bis.read(array))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//会把基本流也关闭</span></span><br><span class="line">    bis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-字节缓冲输出流"><a href="#1-2-字节缓冲输出流" class="headerlink" title="1.2 字节缓冲输出流"></a>1.2 字节缓冲输出流</h5><h6 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h6><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：学习字节缓冲流的使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     1.字节缓冲输出流：</span></span><br><span class="line"><span class="comment">        BufferedOutputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     2.特点：</span></span><br><span class="line"><span class="comment">        缓冲流以Buffered开头，用法和FileOutputStream一样。</span></span><br><span class="line"><span class="comment">        缓冲流底层使用数组作为缓冲区，能提高读写的效率。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     3.构造方法：</span></span><br><span class="line"><span class="comment">        BufferedOutputStream(OutputStream out)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//ctrl + q 查看方法的参数</span></span><br><span class="line">    <span class="comment">//BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;t_day11\\abc\\a.txt&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day11\\abc\\a.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//追加写出</span></span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">    bos.write(<span class="string">&quot;黑马程序员&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意：缓冲流一定要关闭或刷新，否则数据只在缓冲区，不会写出到文件</span></span><br><span class="line">    bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、字符缓冲流"><a href="#2、字符缓冲流" class="headerlink" title="2、字符缓冲流"></a>2、字符缓冲流</h3><h5 id="2-1-字符输入缓冲流"><a href="#2-1-字符输入缓冲流" class="headerlink" title="2.1 字符输入缓冲流"></a>2.1 字符输入缓冲流</h5><h6 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h6><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：学习字符缓冲流的使用</span><br><span class="line"></span><br><span class="line">    字符输入缓冲流：BufferedReader</span><br><span class="line"></span><br><span class="line">    特点：</span><br><span class="line">        继承自Reader，用法和FileReader一样。</span><br><span class="line">        底层使用缓冲数组读取数据，效率高。</span><br><span class="line"></span><br><span class="line">    构造方法：</span><br><span class="line">         BufferedReader(Reader in)</span><br><span class="line"></span><br><span class="line">    特有方法：</span><br><span class="line">        String readLine() 读取一行数据，读取不到返回<span class="literal">null</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day11\\abc\\b.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读数据</span></span><br><span class="line">        <span class="comment">//方式1：循环读写字符数组</span></span><br><span class="line">        <span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=br.read(array))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println( <span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：循环，按行读取数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-字符输出缓冲流"><a href="#2-2-字符输出缓冲流" class="headerlink" title="2.2 字符输出缓冲流"></a>2.2 字符输出缓冲流</h5><h6 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h6><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：学习字符缓冲流的使用</span><br><span class="line"></span><br><span class="line">    字符输出缓冲流：BufferedWriter</span><br><span class="line"></span><br><span class="line">    特点：</span><br><span class="line">        继承自Reader，用法和FileWriter一样。</span><br><span class="line">        底层使用缓冲数组读取数据，效率高。</span><br><span class="line"></span><br><span class="line">    构造方法：</span><br><span class="line">        BufferedWriter(Writer out)</span><br><span class="line"></span><br><span class="line">    特有方法：</span><br><span class="line">        void newLine() 写一个换行符，相当于写出<span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">    注意：</span><br><span class="line">        使用BufferedWriter写出数据后，记得调用<span class="built_in">flush</span>或者<span class="built_in">close</span>。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;t_day11\\abc\\b.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写字符</span></span><br><span class="line">        bw.write(<span class="string">&quot;传智教育1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//特有的功能</span></span><br><span class="line">        bw.newLine(); <span class="comment">//换行</span></span><br><span class="line"></span><br><span class="line">        bw.write(<span class="string">&quot;传智教育2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3、文件解析练习"><a href="#3、文件解析练习" class="headerlink" title="3、文件解析练习"></a>3、文件解析练习</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">需求：</span><br><span class="line">    解析出“用户列表.txt”文件中的用户姓名和年龄，封装成<span class="keyword">User</span>对象，保存到集合中，并对年龄进行升序排序。</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">    创建字符输入缓冲流BufferedReader。</span><br><span class="line">    定义<span class="keyword">User</span>类，提供name和age属性。</span><br><span class="line">    循环读取一行数据，将每行数据切割（split）出姓名和年龄，每行数据对应一个<span class="keyword">User</span>对象。</span><br><span class="line">    创建ArrayList&lt;<span class="keyword">User</span>&gt;集合，存储<span class="keyword">User</span>对象。</span><br><span class="line">    使用Collections工具类实现集合元素排序，按照年龄降序排序。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day11\\abc\\用户列表.txt&quot;</span>));</span><br><span class="line">        ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环按行读取 readLine()</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//切割</span></span><br><span class="line">            String[] array = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(array[<span class="number">0</span>], Integer.parseInt(array[<span class="number">1</span>]));</span><br><span class="line">            <span class="comment">//添加到集合中</span></span><br><span class="line">            list.add(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照年龄降序排序</span></span><br><span class="line">        Collections.sort(list, (o1, o2) -&gt; o2.getAge() - o1.getAge());</span><br><span class="line"></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4、缓冲流的效率对比"><a href="#4、缓冲流的效率对比" class="headerlink" title="4、缓冲流的效率对比"></a>4、缓冲流的效率对比</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标:对比四种字节流复制文件的效率</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    四种方式复制:</span></span><br><span class="line"><span class="comment">        基本流读取一个字节  29699</span></span><br><span class="line"><span class="comment">        缓冲流读取一个字节  53</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        基本流读取一个字节数组  41</span></span><br><span class="line"><span class="comment">        缓冲流读取一个字节数组  16</span></span><br><span class="line"><span class="comment">    要求：</span></span><br><span class="line"><span class="comment">        把 高清无码.flv 文件拷贝到 D:\\MyTest中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     结论1：读写的时候，一定要使用数组去操作，能明显提高效率</span></span><br><span class="line"><span class="comment">     结论2：通常缓冲流效率更高，如果基本流的数组容量设置大一些，效率也接近缓冲流</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//测试运行效率</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//test01();</span></span><br><span class="line">        <span class="comment">//test02();</span></span><br><span class="line">        test03();</span><br><span class="line">        <span class="comment">//test04();</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本流读取一个字节</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//读</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\高清无码.flv&quot;</span>);</span><br><span class="line">        <span class="comment">//写</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\MyTest\\高清无码1.flv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基本流一次读写一个字节</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓冲流读取一个字节</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\高清无码.flv&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\MyTest\\高清无码2.flv&quot;</span>);</span><br><span class="line">        <span class="comment">//缓冲输入流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//缓冲输出流</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//缓冲流一次读写一个字节</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b=bis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只需要关闭缓冲流就行，基本流会在缓冲流里面进行关闭</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本流读取一个字节数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//读</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\高清无码.flv&quot;</span>);</span><br><span class="line">        <span class="comment">//写</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\MyTest\\高清无码3.flv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基本流一次读写一个字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓冲流读取一个字节数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\高清无码.flv&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\MyTest\\高清无码4.flv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);<span class="comment">//读</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);<span class="comment">//写</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//缓冲流一次读写一个字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(buf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、字符流读取字符乱码问题"><a href="#5、字符流读取字符乱码问题" class="headerlink" title="5、字符流读取字符乱码问题"></a>5、字符流读取字符乱码问题</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：了解字符流读取字符的乱码问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    IDEA中默认使用UTF-8编码，如果在IDEA中读取其他编码的文件，就容易乱码。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day11\\abc\\gbk_file.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chs = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6、转换流"><a href="#6、转换流" class="headerlink" title="6、转换流"></a>6、转换流</h3><h5 id="6-1-输入转换流"><a href="#6-1-输入转换流" class="headerlink" title="6.1 输入转换流"></a>6.1 输入转换流</h5><h6 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h6><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：学习<span class="variable">InputStreamReader</span>转换流读取数据</span><br><span class="line"></span><br><span class="line">    <span class="variable">InputStreamReader</span>：</span><br><span class="line">        输入转换流，继承<span class="variable">Reader</span>。</span><br><span class="line">        可以使用平台默认或者指定编码读取字符。</span><br><span class="line"></span><br><span class="line">    构造方法：</span><br><span class="line">        <span class="variable">InputStreamReader</span><span class="punctuation">(</span><span class="built_in">InputStream</span> <span class="variable">in</span><span class="punctuation">)</span> ：使用默认编码读取文件（<span class="variable">IDEA</span>默认是<span class="variable">UTF</span><span class="operator">-</span><span class="number">8</span>编码）</span><br><span class="line"></span><br><span class="line">        <span class="variable">InputStreamReader</span><span class="punctuation">(</span><span class="built_in">InputStream</span> <span class="variable">in</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">charsetName</span><span class="punctuation">)</span>：使用指定编码读取文件</span><br><span class="line">            <span class="variable">charsetName</span>参数值可以是 <span class="variable">GBK</span>、<span class="variable">UTF</span><span class="operator">-</span><span class="number">8</span>等字符编码，大小写都行</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//InputStreamReader 字符流</span></span><br><span class="line">        <span class="comment">//要读取的内容是什么编码，就传什么编码的名字  GBK  UTF-8</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\gbk_file.txt&quot;</span>), <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环读取</span></span><br><span class="line">        <span class="type">char</span>[] chs = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-输出转换流"><a href="#6-2-输出转换流" class="headerlink" title="6.2 输出转换流"></a>6.2 输出转换流</h5><h6 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h6><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：学习<span class="variable">OutputStreamWriter</span>写出字符数据</span><br><span class="line"></span><br><span class="line">    <span class="variable">OutputStreamWriter</span>：</span><br><span class="line">        输出转换流， 继承<span class="variable">Writer</span>。</span><br><span class="line">        可以使用平台默认或者指定编码写出字符。</span><br><span class="line"></span><br><span class="line">    构造方法：</span><br><span class="line">        <span class="variable">OutputStreamWriter</span><span class="punctuation">(</span><span class="built_in">OutputStream</span> <span class="variable">out</span><span class="punctuation">)</span> ：使用默认编码写出字符（<span class="variable">IDEA</span>默认是<span class="variable">UTF</span><span class="operator">-</span><span class="number">8</span>）。</span><br><span class="line"></span><br><span class="line">        <span class="variable">OutputStreamWriter</span><span class="punctuation">(</span><span class="built_in">OutputStream</span> <span class="variable">out</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">charsetName</span><span class="punctuation">)</span>：使用指定编码写出字符。</span><br><span class="line">                    <span class="variable">charsetName</span>参数值可以是 <span class="variable">GBK</span>、<span class="variable">UTF</span><span class="operator">-</span><span class="number">8</span>等字符编码，大小写都行。</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出转换流  字符流</span></span><br><span class="line">        <span class="comment">//使用指定的编码格式，保存数据到文件中</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day11\\abc\\c.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"></span><br><span class="line">        osw.write(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line"></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-文件编码转换练习"><a href="#6-3-文件编码转换练习" class="headerlink" title="6.3 文件编码转换练习"></a>6.3 文件编码转换练习</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：练习文件的编码转换</span><br><span class="line"></span><br><span class="line">    需求：读取GBK编码的文本文件gbk_file.txt，转换为UTF<span class="string">-8</span>编码的文本文件utf8_file.txt。</span><br><span class="line"></span><br><span class="line">    分析：</span><br><span class="line">        使用GBK编码读取文件内容。</span><br><span class="line">        使用UTF<span class="string">-8</span>编码写字符数据到文件。</span><br><span class="line">        循环读写。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//使用GBK编码读取文件内容。</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\gbk_file.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用UTF-8编码保存文件。</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day11\\abc\\utf8_file.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环读写。</span></span><br><span class="line">        <span class="type">char</span>[] chs = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7、对象流"><a href="#7、对象流" class="headerlink" title="7、对象流"></a>7、对象流</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标<span class="operator">:</span>使用对象输出流将内存中的对象写到文件中。</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="variable">ObjectOutputStream</span> <span class="punctuation">(</span>对象输出流<span class="operator">/</span>序列化流<span class="punctuation">)</span></span><br><span class="line">                继承自<span class="built_in">OutputStream</span>，可以将内存中的对象数据写出到文件中。</span><br><span class="line"></span><br><span class="line">        <span class="number">1.</span>构造方法<span class="operator">:</span> <span class="variable">ObjectOutputStream</span><span class="punctuation">(</span><span class="built_in">OutputStream</span> <span class="variable">out</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>序列化对象<span class="punctuation">(</span>将对象持久化保存<span class="punctuation">)</span><span class="operator">:</span> <span class="variable">writeObject</span><span class="punctuation">(</span><span class="variable">Object</span> <span class="variable">obj</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>要求：对象所属的类要实现 <span class="variable">Serializable</span>接口</span><br><span class="line"></span><br><span class="line">        <span class="number">4.</span><span class="variable">transient</span>关键字：被修饰的成员变量不会被序列化</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要序列化对象，类要实现Serializable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//为当前类加一个唯一序列化标记（相当于该类的身份证）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8210835191788987208L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//transient不让成员变量序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day11\\abc\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//序列化对象(将对象持久化保存)</span></span><br><span class="line">        oos.writeObject(p);</span><br><span class="line"></span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h6><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:使用对象输入流将文件中的对象读入程序中</span><br><span class="line"></span><br><span class="line"><span class="attribute">小结</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">ObjectInputStream(对象输入流/反序列化流)</span></span><br><span class="line"><span class="attribute">        把写到本地文件中的对象读到内存中。</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    1.构造方法</span><span class="punctuation">:</span> <span class="string">ObjectInputStream(InputStream in)</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">2.反序列化(将对象读回内存)</span><span class="punctuation">:</span> <span class="string"> Object readObject()</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//反序列化对象(将对象读回内存)</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> ois.readObject(); <span class="comment">//EOFException 读取不到对象，报异常</span></span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="8、打印流"><a href="#8、打印流" class="headerlink" title="8、打印流"></a>8、打印流</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:了解打印流的使用</span><br><span class="line"></span><br><span class="line"><span class="attribute">小结</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">1.打印流分类</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">字节打印流</span><span class="punctuation">:</span> <span class="string">PrintStream</span></span><br><span class="line">        <span class="attribute">字符打印流</span><span class="punctuation">:</span> <span class="string">PrintWriter</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">2.PrintStream构造方法</span><span class="punctuation">:</span></span><br><span class="line">            <span class="attribute">PrintStream(String fileName) ：根据字符串路径指定打印目的地。</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    3.重要方法</span><span class="punctuation">:</span></span><br><span class="line">            print(任意类型数据) 打印数据,不换行</span><br><span class="line">            println(任意类型数据) 打印数据,换行</span><br><span class="line">            原样输出，参数写什么就打印什么</span><br><span class="line"></span><br><span class="line">    说明：PrintWriter和PrintStream用法几乎一样。</span><br><span class="line">         只不过PrintStream是操作字节，PrintWriter是操作字符。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印流</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;t_day11\\abc\\d.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存数据到文件，并换行</span></span><br><span class="line">        <span class="comment">//参数传递什么，就保存什么</span></span><br><span class="line">        ps.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        ps.println(<span class="number">666</span>);</span><br><span class="line">        ps.println(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9、属性集"><a href="#9、属性集" class="headerlink" title="9、属性集"></a>9、属性集</h3><h5 id="9-1-Properties"><a href="#9-1-Properties" class="headerlink" title="9.1 Properties"></a>9.1 Properties</h5><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">目标<span class="operator">:</span>掌握<span class="built_in">Properties</span>作为集合的使用</span><br><span class="line"></span><br><span class="line">小结<span class="operator">:</span></span><br><span class="line">    <span class="built_in">Properties</span>作为<span class="built_in">Map</span>集合的特有方法<span class="operator">:</span></span><br><span class="line">        <span class="variable">Object</span> <span class="variable">setProperty</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">key</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">value</span><span class="punctuation">)</span> ：添加键值对，键和值都是字符串类型。</span><br><span class="line">        <span class="built_in">String</span> <span class="variable">getProperty</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">key</span><span class="punctuation">)</span> ：通过键获取值，获取不到返回<span class="variable">null</span></span><br><span class="line">        <span class="variable">stringPropertyNames</span><span class="punctuation">(</span><span class="punctuation">)</span> 获取所有的属性名，遍历属性名获取属性值</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            属性</span></span><br><span class="line"><span class="comment">            属性名 属性值</span></span><br><span class="line"><span class="comment">            name  张三</span></span><br><span class="line"><span class="comment">            age   18</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            用户名  system</span></span><br><span class="line"><span class="comment">            密码    123456</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//setProperty  添加键值对，键和值都是字符串类型。</span></span><br><span class="line">        p.setProperty(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;广州&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getProperty(String key)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历  stringPropertyNames 获取所有的属性名</span></span><br><span class="line">        Set&lt;String&gt; keys = p.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> p.getProperty(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;,&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="9-2-store-保存文件"><a href="#9-2-store-保存文件" class="headerlink" title="9.2 store 保存文件"></a>9.2 store 保存文件</h5><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">目标<span class="operator">:</span>掌握<span class="built_in">Properties</span>保存和加载文件的方式</span><br><span class="line"></span><br><span class="line">小结<span class="operator">:</span></span><br><span class="line">        <span class="number">1.</span>将<span class="built_in">Properties</span>中的键值对数据保存到文件中：</span><br><span class="line">            <span class="variable">void</span> <span class="variable">store</span><span class="punctuation">(</span><span class="variable">Writer</span> <span class="variable">writer</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">comments</span><span class="punctuation">)</span> ：第一个参数为字符输出流，第二个参数为写到文件的注释。</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>加载文件数据到<span class="built_in">Properties</span>集合中：</span><br><span class="line">            <span class="variable">void</span> <span class="variable">load</span><span class="punctuation">(</span><span class="variable">Reader</span> <span class="variable">reader</span><span class="punctuation">)</span> ： 参数为字符输入流</span><br><span class="line"><span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        p.setProperty(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;广州&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把属性信息保存到文件中  store</span></span><br><span class="line">        p.store(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;t_day11\\abc\\info.txt&quot;</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="9-3-load-加载文件"><a href="#9-3-load-加载文件" class="headerlink" title="9.3 load 加载文件"></a>9.3 load 加载文件</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加载文件数据到Properties集合中：</span></span><br><span class="line"><span class="comment">    void load(Reader reader) ： 参数为字符输入流</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//load(Reader reader) 加载配置信息到集合中</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        p.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day11\\abc\\用户列表.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = p.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> p.getProperty(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;,&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="10、IO异常处理"><a href="#10、IO异常处理" class="headerlink" title="10、IO异常处理"></a>10、IO异常处理</h3><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:掌握JDK7之后IO异常的处理</span><br><span class="line"></span><br><span class="line">    小结:</span><br><span class="line">        <span class="number">1.</span> JDK7之前处理IO异常的方式：</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                可能出现异常的代码;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (异常类名 变量名) &#123;</span><br><span class="line">                异常处理代码;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                关闭流，释放资源</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span> JDK7开始处理IO异常的方式：（推荐）</span><br><span class="line">            <span class="keyword">try</span> (创建流的代码) &#123;</span><br><span class="line">                可能出现异常的代码;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (异常类名 变量名) &#123;</span><br><span class="line">                异常处理代码;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            好处：会自动关闭流，减少代码量</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="comment">/* FileWriter fw = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            fw = new FileWriter(&quot;t_day11\\abc\\test.txt&quot;);</span></span><br><span class="line"><span class="comment">            fw.write(&quot;黑马&quot;);</span></span><br><span class="line"><span class="comment">            //int i = 1/0;</span></span><br><span class="line"><span class="comment">        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;出现异常：&quot;+ e.toString());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;finally &#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                if(fw!=null) &#123;</span></span><br><span class="line"><span class="comment">                    fw.close(); //一定要执行的代码</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//try() 小括号可以自动释放资源，前提要有close的方法（类要实现Closeable接口）</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;t_day11\\abc\\test.txt&quot;</span>);</span><br><span class="line">             )&#123;</span><br><span class="line">            fw.write(<span class="string">&quot;黑马12&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常：&quot;</span>+ e.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="11、装饰者模式"><a href="#11、装饰者模式" class="headerlink" title="11、装饰者模式"></a>11、装饰者模式</h3><h6 id="Drive"><a href="#Drive" class="headerlink" title="Drive"></a>Drive</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Drive</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Car"><a href="#Car" class="headerlink" title="Car"></a>Car</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Drive</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;行驶功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;刹车功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Tank"><a href="#Tank" class="headerlink" title="Tank"></a>Tank</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装饰对象：增强原来对象的功能，在原来的基础上扩展功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tank</span> <span class="keyword">implements</span> <span class="title class_">Drive</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tank</span><span class="params">(Car car)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置的功能&quot;</span>);</span><br><span class="line">        car.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;后置的功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        car.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fire</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火力覆盖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h6><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"><span class="section">目标:学习装饰设计模式</span></span><br><span class="line"></span><br><span class="line"><span class="section">小结:</span></span><br><span class="line">    装饰设计模式有几个角色：</span><br><span class="line">        1.共同的接口</span><br><span class="line">        2.原目标类</span><br><span class="line">        3.装饰者类</span><br><span class="line"></span><br><span class="line">    装饰设计模式的作用：</span><br><span class="line">        可以原本类的功能增强和扩展类的功能</span><br><span class="line"></span><br><span class="line">     增强的流都是使用了装饰者模式，比如 BufferedReader</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Tank</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tank</span>(<span class="keyword">new</span> <span class="title class_">Car</span>());</span><br><span class="line">        t.run();</span><br><span class="line">        t.stop();</span><br><span class="line">        t.fire();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//装饰者模式</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">        br.read(); <span class="comment">//扩展原来的FileReader功能</span></span><br><span class="line">        br.readLine(); <span class="comment">//新增的功能</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！&lt;strong&gt;学习最好的方式就是教授别人 —费曼学习法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础与加强" scheme="https://onlyonemomo.github.io/categories/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>020-java语法加强之IO流基础</title>
    <link href="https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/020-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BIO%E6%B5%81%E5%9F%BA%E7%A1%80/"/>
    <id>https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/020-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BIO%E6%B5%81%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-06T15:04:02.000Z</published>
    <updated>2022-09-06T15:04:58.134Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p><span id="more"></span><h3 id="1、File-类"><a href="#1、File-类" class="headerlink" title="1、File 类"></a>1、File 类</h3><h5 id="1-1-File-的构造方法"><a href="#1-1-File-的构造方法" class="headerlink" title="1.1 File 的构造方法"></a>1.1 File 的构造方法</h5><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">目标：掌握<span class="built_in">File</span>类的构造方法</span><br><span class="line"></span><br><span class="line"><span class="built_in">File</span>构造方法<span class="operator">:</span></span><br><span class="line">    <span class="built_in">File</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">path</span><span class="punctuation">)</span> 根据<span class="variable">path</span>路径创建<span class="built_in">File</span>对象，表示文件夹或者文件。</span><br><span class="line">    <span class="built_in">File</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">parent</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">child</span><span class="punctuation">)</span> 通过父路径和子路径创建<span class="built_in">File</span>对象</span><br><span class="line">    <span class="built_in">File</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">parent</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">child</span><span class="punctuation">)</span> 使用<span class="built_in">File</span>对象表示父路径，字符串表示子路径，创建新的<span class="variable">Filed</span>对象。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//File(String pathname)</span></span><br><span class="line">     <span class="comment">//磁盘上文件或者文件夹的地址（盘符一定要正确，文件夹或者文件可以存在或者不存在）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line">    <span class="comment">//磁盘上文件或者文件夹的地址（盘符一定要正确，文件夹或者文件可以存在或者不存在）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\aaa&quot;</span>); </span><br><span class="line">    <span class="comment">//磁盘上文件或者文件夹的地址（盘符一定要正确，文件夹或者文件可以存在或者不存在）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/aaa&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//磁盘上文件或者文件夹的地址（盘符一定要正确，文件夹或者文件可以存在或者不存在）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\test.jpg&quot;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(String parent, String child) 通过父路径和子路径创建File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>,<span class="string">&quot;test.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(File parent, String child) 使用File对象表示父路径，字符串表示子路径，创建新的File对象。</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(f1,<span class="string">&quot;test.jpg&quot;</span>);</span><br><span class="line">        System.out.println(f6);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-绝对路径和相对路径"><a href="#1-2-绝对路径和相对路径" class="headerlink" title="1.2 绝对路径和相对路径"></a>1.2 绝对路径和相对路径</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：理解绝对路径和相对路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    绝对路径：从盘符开始。</span></span><br><span class="line"><span class="comment">    相对路径：IDEA中是从项目路径开始。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="comment">//绝对路径：直接以盘符开头 （完整路径）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\javacode\\javase174\\t_day10\\abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相对路径：直接以文件夹或者文件名开头</span></span><br><span class="line">        <span class="comment">//在idea中，如果使用相对路径，会默认加上工程的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day10\\abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用相对路径表示aaa.txt ：IDEA中是从项目路径开始。</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day10\\src\\aaa.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(f1.getAbsolutePath());</span><br><span class="line">        System.out.println(f2.getAbsolutePath());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-创建文件或文件夹"><a href="#1-3-创建文件或文件夹" class="headerlink" title="1.3 创建文件或文件夹"></a>1.3 创建文件或文件夹</h5><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:掌握File创建文件或文件夹</span><br><span class="line"></span><br><span class="line">    File类的创建功能:</span><br><span class="line">       <span class="built_in"> boolean</span> createNewFile() 创建新文件, 创建成功返<span class="built_in">回true</span>，如果文件已存在，则无法创建,返<span class="built_in">回false</span>。</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> boolean</span> mkdir() 创建单级文件夹, 创建成功返<span class="built_in">回true</span>.</span><br><span class="line">                        如果文件夹已存在，则无法创建,返<span class="built_in">回false</span>。（如果父目录不存在，也无法创建）</span><br><span class="line">                        （其实就是创建路径的最后一层）</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> boolean</span> mkdirs() 创建一个多级文件夹, 创建成功返<span class="built_in">回true</span>。</span><br><span class="line">                         如果文件夹已存在，则无法创建，返<span class="built_in">回false</span>。（如果父目录不存在，会一并创建）</span><br><span class="line"></span><br><span class="line">    注意:</span><br><span class="line">        Windows中文件名不区分大小写。</span><br><span class="line">        Java中路径斜杠支持\\ 或者 // 或者 / 写法。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//在D:\MyTest 文件夹下， 创建 hello.txt 文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件不存在，可以直接创建，返回true，文件已存在，不会创建</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> f1.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在D:\MyTest 文件夹下，创建 aaa文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\aaa\\bbb&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> f2.mkdir(); <span class="comment">//创建最后一级（保证最后一级之前的文件夹都存在才能成功）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b1 = &quot;</span> + b1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建多级文件夹</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> f2.mkdirs();</span><br><span class="line">        System.out.println(<span class="string">&quot;b2 = &quot;</span> + b2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-删除文件或空文件夹"><a href="#1-4-删除文件或空文件夹" class="headerlink" title="1.4 删除文件或空文件夹"></a>1.4 删除文件或空文件夹</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:掌握<span class="keyword">File</span>删除功能</span><br><span class="line"></span><br><span class="line">    <span class="keyword">File</span>删除功能：</span><br><span class="line">        boolean delete() 删除该<span class="keyword">File</span>对象表示的文件或文件夹。</span><br><span class="line"></span><br><span class="line">    注意:</span><br><span class="line">        <span class="number">1</span>.删除不走回收站</span><br><span class="line">        <span class="number">2</span>.如果删除的是文件，直接删除。</span><br><span class="line">        <span class="number">3</span>.如果删除的是文件夹，文件夹如果不为空，则无法删除。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\aa.docx&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f1.delete() = &quot;</span> + f1.delete());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件夹：删除空文件夹才能成功</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f2.delete() = &quot;</span> + f2.delete());</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\aaa&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f3.delete() = &quot;</span> + f3.delete());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-File类的判断"><a href="#1-5-File类的判断" class="headerlink" title="1.5 File类的判断"></a>1.5 File类的判断</h5><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    File类的判断功能：</span><br><span class="line">       <span class="built_in"> boolean</span> isDirectory() 判断是否是文件夹,如果是返<span class="built_in">回true</span></span><br><span class="line">       <span class="built_in"> boolean</span> isFile() 判断是否是文件,如果是返<span class="built_in">回true</span></span><br><span class="line">       <span class="built_in"> boolean</span><span class="built_in"> exists</span>() 判断文件或文件夹是否存在，存在返<span class="built_in">回true</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f1.isDirectory() = &quot;</span> + f1.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">&quot;f1.isFile() = &quot;</span> + f1.isFile());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\test.jpg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f2.isDirectory() = &quot;</span> + f2.isDirectory()); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;f2.isFile() = &quot;</span> + f2.isFile());<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//断文件或文件夹是否存在，存在返回true</span></span><br><span class="line">        System.out.println(f1.exists());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-6-File类的获取"><a href="#1-6-File类的获取" class="headerlink" title="1.6 File类的获取"></a>1.6 File类的获取</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    <span class="keyword">File</span>类的获取功能：</span><br><span class="line">        <span class="keyword">String</span> getAbsolutePath() 获取<span class="keyword">File</span>对象的绝对路径(完整路径)</span><br><span class="line">        <span class="keyword">String</span> getPath() 获取创建<span class="keyword">File</span>对象时给出的路径</span><br><span class="line">        <span class="keyword">String</span> getName() 获取文件或文件夹名字（路径中最后一个斜杠后面的内容）</span><br><span class="line">        long length() 获取文件的大小，返回文件的字节数。（对文件夹无效）</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;getAbsolutePath() = &quot;</span> + f1.getAbsolutePath()); <span class="comment">//获取绝对路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getPath() = &quot;</span> + f1.getPath()); <span class="comment">//获取构造方法中传入的路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getName() = &quot;</span> + f1.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件的大小（单位是字节）对文件夹操作无效</span></span><br><span class="line">        System.out.println(f1.length());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-7-File类的遍历"><a href="#1-7-File类的遍历" class="headerlink" title="1.7 File类的遍历"></a>1.7 File类的遍历</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:掌握<span class="keyword">File</span>类的遍历功能</span><br><span class="line"></span><br><span class="line">    <span class="keyword">File</span>遍历功能:</span><br><span class="line">        <span class="keyword">File</span>[] listFiles()： 遍历文件夹中的内容，封装成<span class="keyword">File</span>数组。</span><br><span class="line"></span><br><span class="line">    注意:</span><br><span class="line">        只有<span class="keyword">File</span>对象代表文件夹，才能调用listFiles()。</span><br><span class="line">        如果<span class="keyword">File</span>对象代表文件，调用listFiles()，得到的结果是null。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件夹的所有结构（文件或者文件夹）</span></span><br><span class="line">        File[] files = f.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-递归"><a href="#1-8-递归" class="headerlink" title="1.8 递归"></a>1.8 递归</h5><h6 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h6><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：理解递归的概念</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.什么是递归?</span></span><br><span class="line"><span class="comment">            递归指的是在一个方法中，自己调用自己。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.递归注意事项:</span></span><br><span class="line"><span class="comment">            1.递归调用要有结束条件。</span></span><br><span class="line"><span class="comment">            2.递归次数不能太多，否则容易有栈溢出异常。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.递归调用要有结束条件。</span></span><br><span class="line">        <span class="comment">//2.递归次数不能太多，否则容易有栈溢出异常。</span></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">5000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h6><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：掌握递归的求和案例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    需求：递归求1-n的和</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2_GetSum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> getSum(<span class="number">5</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1-5的和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          5 +  1-4的和</span></span><br><span class="line"><span class="comment">               4  +  1-3的和</span></span><br><span class="line"><span class="comment">                     3 + 1-2的和</span></span><br><span class="line"><span class="comment">                         2 + 1-1的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + getSum(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h6><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：</span></span><br><span class="line"><span class="comment">      定义一个方法 findAllJava(File dir)，遍历找出某个文件夹中的所有java文件.</span></span><br><span class="line"><span class="comment">      如果文件夹中有其他文件夹也要找出来。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_FileSearch</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day10&quot;</span>);</span><br><span class="line">        findAllJava(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法 findAllJava(File dir)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findAllJava</span><span class="params">(File dir)</span>&#123;</span><br><span class="line"></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(files==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组，判断File对象是文件还是文件夹</span></span><br><span class="line">        <span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">               <span class="comment">//文件，判断是否后缀为.java格式</span></span><br><span class="line">                <span class="comment">//取出文件名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> f.getName();</span><br><span class="line">                <span class="keyword">if</span>(name.endsWith(<span class="string">&quot;.java&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//文件夹，递归调用</span></span><br><span class="line">                findAllJava(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、IO流"><a href="#2、IO流" class="headerlink" title="2、IO流"></a>2、IO流</h3><h5 id="2-1-字节流"><a href="#2-1-字节流" class="headerlink" title="2.1 字节流"></a>2.1 字节流</h5><h6 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h6><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:学习FileOutputStream类写一个字节数据</span><br><span class="line"></span><br><span class="line">    IO流写出数据的<span class="number">3</span>个步骤：</span><br><span class="line"></span><br><span class="line">        <span class="number">1</span>.创建FileOutputStream对象</span><br><span class="line">            FileOutputStream(String name) ：通过路径名创建字节输出流,将来流中的数据就会写入这个文件。</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.写数据</span><br><span class="line">            void <span class="keyword">write</span>(<span class="keyword">int</span> <span class="keyword">b</span>)： 一次写出一个字节到文件中。</span><br><span class="line">            void <span class="keyword">write</span>(byte[] <span class="keyword">b</span>)：一次写出一个字节数组到文件</span><br><span class="line">            void <span class="keyword">write</span>(byte[] <span class="keyword">b</span>, <span class="keyword">int</span> off, <span class="keyword">int</span> <span class="built_in">len</span>) ：一次写出一个字节数组一部分到文件</span><br><span class="line">                                 <span class="keyword">int</span> off ：开始索引</span><br><span class="line">                                 <span class="keyword">int</span> <span class="built_in">len</span>：长度</span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>.关闭流</span><br><span class="line">            void <span class="keyword">close</span>()</span><br><span class="line">     */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//FileOutputStream(文件地址)</span></span><br><span class="line">        <span class="comment">//不管a.txt是否存在，创建流的时候都会覆盖原文件，创建一个新的</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day10\\abc\\a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//true表示在原来文件的基础上，追加内容</span></span><br><span class="line">        <span class="comment">//FileOutputStream fos = new FileOutputStream(&quot;t_day10\\abc\\a.txt&quot;,true);</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //往a.txt文件写出一个字节</span></span><br><span class="line"><span class="comment">        fos.write(65);</span></span><br><span class="line"><span class="comment">        fos.write(66);</span></span><br><span class="line"><span class="comment">        //一次写出一个字节数组到文件</span></span><br><span class="line"><span class="comment">        byte[] bys = &#123;65,66,67,68,69&#125;;</span></span><br><span class="line"><span class="comment">        fos.write(bys);</span></span><br><span class="line"><span class="comment">        //一次写出一个字节数组一部分到文件</span></span><br><span class="line"><span class="comment">        fos.write(bys,0,3);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写出3行 “黑马程序员”</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//fos.write(&quot;黑马程序员&quot;.getBytes());</span></span><br><span class="line">            <span class="comment">//fos.write(&quot;\r\n&quot;.getBytes());</span></span><br><span class="line"></span><br><span class="line">            fos.write(<span class="string">&quot;黑马程序员\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h6><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:使用FileInputStream从文件一次读取一个字节</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="number">1</span>.FileInputStream的构造方法</span><br><span class="line">            FileInputStream(<span class="keyword">String</span> name) 通过文件路径创建字节输入流对象，读取指定文件的内容。</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.FileInputStream读取一个字节的方法</span><br><span class="line">            int <span class="keyword">read</span>() ：读取流中的一个字节, 返回值就是读取到的字节数据。读不到数据，返回-<span class="number">1</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day10\\abc\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字节并返回，如果读取结束，返回-1</span></span><br><span class="line">        <span class="comment">/*int ch = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch); //97</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch); //98</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch);//99</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch); //-1*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* while (true)&#123;</span></span><br><span class="line"><span class="comment">            int ch = fis.read();</span></span><br><span class="line"><span class="comment">            if(ch!=-1)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(ch);</span></span><br><span class="line"><span class="comment">            &#125;else &#123;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环方式一次读取一个字节</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ch = fis.read()</span></span><br><span class="line"><span class="comment">            ch!=-1</span></span><br><span class="line"><span class="comment">            System.out.println(ch);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch = fis.read())!=-<span class="number">1</span> )&#123;</span><br><span class="line">            System.out.println(ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="读取字节数组"><a href="#读取字节数组" class="headerlink" title="读取字节数组"></a>读取字节数组</h6><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:使用FileInputStream一次读取多个字节</span><br><span class="line"></span><br><span class="line">    一次读取一个字节数组，效率更高</span><br><span class="line">            int <span class="built_in">read</span>(<span class="built_in">byte</span>[] b) ：一次读取多个字节保存到数组中，并返回读取的数量，读不到数据时，返回<span class="number">-1</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day10\\abc\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*byte[] array = new byte[3];</span></span><br><span class="line"><span class="comment">        int len = fis.read(array);</span></span><br><span class="line"><span class="comment">        System.out.println( new String(array,0,len) ); //hel</span></span><br><span class="line"><span class="comment">        System.out.println(len); //3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        len = fis.read(array);</span></span><br><span class="line"><span class="comment">        System.out.println( new String(array,0,len) ); //lo</span></span><br><span class="line"><span class="comment">        System.out.println(len); //2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //读取结束，返回-1</span></span><br><span class="line"><span class="comment">        len = fis.read(array);</span></span><br><span class="line"><span class="comment">        System.out.println(len); //-1</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">//一般以1024的倍数去赋值</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=fis.read(array)) !=-<span class="number">1</span>  )&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="字节流实现文件复制案例"><a href="#字节流实现文件复制案例" class="headerlink" title="字节流实现文件复制案例"></a>字节流实现文件复制案例</h6><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    案例：文件复制</span><br><span class="line">    需求：</span><br><span class="line">        使用字节流将 <span class="string">&quot;D:\MyTest\test.jpg&quot;</span> 复制到 <span class="string">&quot;t_day10\abc\test.jpg&quot;</span></span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1</span>.创建字节输入流，用于读取文件到程序。</span><br><span class="line">        <span class="number">2</span>.创建字节输出流，用于写出文件到磁盘。</span><br><span class="line">        <span class="number">3</span>.循环读写数据。</span><br><span class="line">        <span class="number">4</span>.关闭流。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先将磁盘的文件读进内容</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\MyTest\\test.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day10\\abc\\test.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=fis.read(array)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//将读取的内容写出到磁盘</span></span><br><span class="line">            fos.write(array,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="字节流中文乱码问题"><a href="#字节流中文乱码问题" class="headerlink" title="字节流中文乱码问题"></a>字节流中文乱码问题</h6><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    小结：字节流读取中文的乱码问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        因为一个中文都是多个字节，用字节流每次只能读其中的一部分，</span></span><br><span class="line"><span class="comment">        一个中文的字节可能被拆成多次读取，所以就会出现乱码问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day10\\abc\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=fis.read(array)) !=-<span class="number">1</span>  )&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-字符流"><a href="#2-2-字符流" class="headerlink" title="2.2 字符流"></a>2.2 字符流</h5><h6 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">目标：使用FileReader读取一个字符</span><br><span class="line"></span><br><span class="line">小结：</span><br><span class="line">    <span class="number">1.</span>字符输入流：</span><br><span class="line">        RFileReader继承了Reader，用于从文件中读取字符流。</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>FileReader构造方法：</span><br><span class="line">        FileReader(String fileName)</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span>一次读取一个字符</span><br><span class="line">         <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span></span><br><span class="line">         一次读取一个字符, 返回被读取的字符内容，读取不到时返回-<span class="number">1</span>。</span><br><span class="line">         </span><br><span class="line">    <span class="number">4.</span>一次读取多个字符：</span><br><span class="line">        <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] chs)</span></span><br><span class="line">        将读取的字符保存到<span class="type">char</span>数组中,返回读取的字符数量，读取不到返回-<span class="number">1</span>     </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符输入流</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day10\\abc\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int ch = fr.read();</span></span><br><span class="line"><span class="comment">        System.out.println((char) ch);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fr.read();</span></span><br><span class="line"><span class="comment">        System.out.println((char) ch);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fr.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch); //-1*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环一次读取一个字符</span></span><br><span class="line">        <span class="comment">/*int ch;</span></span><br><span class="line"><span class="comment">        while ( (ch=fr.read()) !=-1)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println((char) ch);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//重点</span></span><br><span class="line">        <span class="comment">//一次读取多个字符，把读到的内容装到字符数组，读取结束，返回-1</span></span><br><span class="line">        <span class="type">char</span>[] chs = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=fr.read(chs)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println( <span class="keyword">new</span> <span class="title class_">String</span>(chs,<span class="number">0</span>,len) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h6><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：使用FileWriter写出数据到文件</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="number">1.</span>字符输出流：</span><br><span class="line">            Writer是字符输出流的抽象父类。</span><br><span class="line">            FileWriter继承了Writer，用于从程序写出数据到文件。</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>FileWriter构造方法：</span><br><span class="line">            FileWriter(String fileName)</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>FileWriter写数据的方法：</span><br><span class="line">            void <span class="built_in">write</span>(int c) 写一个字符到流中</span><br><span class="line">            void <span class="built_in">write</span>(<span class="built_in">char</span>[] cbuf) 写入一个字符数组到流中</span><br><span class="line">            void <span class="built_in">write</span>(<span class="built_in">char</span>[] cbuf, int off, int <span class="built_in">len</span>) 写入字符数组的一部分到流中</span><br><span class="line">            void <span class="built_in">write</span>(String str) 写一个字符串到流中</span><br><span class="line">            void <span class="built_in">write</span>(String str, int off, int <span class="built_in">len</span>) 写一个字符串的一部分到流中</span><br><span class="line"></span><br><span class="line">       <span class="number">4.</span><span class="built_in">close</span>和<span class="built_in">flush</span>方法的区别</span><br><span class="line">        <span class="built_in">flush</span>(): 刷新缓冲区, <span class="built_in">flush</span>后可以再写数据。</span><br><span class="line">        <span class="built_in">close</span>(): 关闭文件,关闭文件前会自动<span class="built_in">flush</span>, <span class="built_in">close</span>后不能再写数据。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建字符输出流，每次创建一个新的文件</span></span><br><span class="line">    <span class="comment">//FileWriter fw = new FileWriter(&quot;t_day10\\abc\\c.txt&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建字符输出流，追加写入</span></span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;t_day10\\abc\\c.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FileWriter写数据的方法</span></span><br><span class="line">    <span class="comment">//写一个字符</span></span><br><span class="line">    <span class="comment">//fw.write(65);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入一个字符数组到流中</span></span><br><span class="line">    <span class="comment">//char[] array = &#123;&#x27;中&#x27;,&#x27;国&#x27;&#125;;</span></span><br><span class="line">    <span class="comment">//fw.write(array);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入字符数组的一部分到流中</span></span><br><span class="line">    <span class="comment">//fw.write(array,1,1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个字符串到流中</span></span><br><span class="line">    fw.write(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">    fw.write(<span class="string">&quot;中国&quot;</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一定要执行关闭或刷新，否则数据不会写出到文件中</span></span><br><span class="line">    fw.close();<span class="comment">//关闭流，关闭之后无法继续写数据</span></span><br><span class="line">    <span class="comment">//fw.flush(); //刷新流，可以继续写数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//fw.write(&quot;中国&quot;);</span></span><br><span class="line">    <span class="comment">//fw.flush();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！&lt;strong&gt;学习最好的方式就是教授别人 —费曼学习法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础与加强" scheme="https://onlyonemomo.github.io/categories/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>019-java语法加强之Stream流</title>
    <link href="https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/019-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BStream%E6%B5%81/"/>
    <id>https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/019-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BStream%E6%B5%81/</id>
    <published>2022-09-06T15:03:02.000Z</published>
    <updated>2022-09-06T15:03:29.776Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p><span id="more"></span><h3 id="1、Lambda-格式"><a href="#1、Lambda-格式" class="headerlink" title="1、Lambda 格式"></a>1、Lambda 格式</h3><h5 id="1-1-格式一"><a href="#1-1-格式一" class="headerlink" title="1.1 格式一"></a>1.1 格式一</h5><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握Lambda表达式的格式</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="number">1.</span>Lambda表达式的作用</span><br><span class="line">            简化匿名内部类</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>Lambda表达式的组成格式</span><br><span class="line">            (参数列表)</span><br><span class="line">            -&gt;</span><br><span class="line">            &#123;方法体;&#125;</span><br><span class="line"></span><br><span class="line">      Lambda表达式的省略格式：</span><br><span class="line">        <span class="number">1.</span>参数类型可以省略。</span><br><span class="line">            比如(<span class="built_in">Integer</span> o1, <span class="built_in">Integer</span> o2) 省略后:</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>如果参数有且仅有一个，参数类型和小括号都可以省略。</span><br><span class="line">            比如(<span class="built_in">String</span> s) 省略后:</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>如果代码块的语句只有一条，可以省略大括号，分号和return。</span><br><span class="line">            比如&#123;<span class="keyword">return</span> o2 - o1;&#125; 省略后:</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//将数字22,11,44,33,55添加到list集合中</span></span><br><span class="line">        Collections.addAll(list,<span class="number">22</span>,<span class="number">11</span>,<span class="number">44</span>,<span class="number">33</span>,<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对list降序排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda标准格式：简化匿名内部类（拿数据做操作）</span></span><br><span class="line">        Collections.sort(list,  (Integer o1, Integer o2) -&gt; &#123; <span class="keyword">return</span> o2 - o1;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//继续简化Lambda</span></span><br><span class="line">        <span class="comment">//1.参数类型可以省略</span></span><br><span class="line">        <span class="comment">//2.如果方法体只有一行，&#123;&#125;可以省略，return省略，;省略</span></span><br><span class="line">        Collections.sort(list,   ( o1,  o2) -&gt;  o2 - o1 );</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-格式二"><a href="#1-2-格式二" class="headerlink" title="1.2 格式二"></a>1.2 格式二</h5><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    Lambda表达式的省略格式：</span><br><span class="line">        <span class="number">1.</span>参数类型可以省略。</span><br><span class="line">            比如(<span class="built_in">Integer</span> o1, <span class="built_in">Integer</span> o2) 省略后:</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>如果参数有且仅有一个，参数类型和小括号都可以省略。</span><br><span class="line">            比如(<span class="built_in">String</span> s) 省略后:</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>如果代码块的语句只有一条，可以省略大括号，分号和return。</span><br><span class="line">            比如&#123;<span class="keyword">return</span> o2 - o1;&#125; 省略后:</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/* Thread t = new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void run() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;线程执行了&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式表示</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;System.out.println(<span class="string">&quot;线程执行了&quot;</span>));</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用Lambda-的前提"><a href="#2、使用Lambda-的前提" class="headerlink" title="2、使用Lambda 的前提"></a>2、使用Lambda 的前提</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：清楚Lambda表达式的使用前提</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    小结：</span></span><br><span class="line"><span class="comment">        1.Lambda使用的前提</span></span><br><span class="line"><span class="comment">            ①.方法的参数是接口</span></span><br><span class="line"><span class="comment">            ②.接口中只能有一个抽象方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.什么是函数式接口</span></span><br><span class="line"><span class="comment">            接口中有且仅有一个抽象方法，这样的接口称为函数式接口。</span></span><br><span class="line"><span class="comment">            函数式接口可以使用<span class="doctag">@FunctionalInterface</span>注解标记。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数式接口：有且只有一个抽象方法</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//约束接口只能有一个抽象方法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Inter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda简化：1.匿名内部类，2.抽象方法只有一个</span></span><br><span class="line">        method( ()-&gt;System.out.println(<span class="string">&quot;Lambda实现&quot;</span>)  );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Inter in)</span>&#123;</span><br><span class="line">        in.test();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3、获取Stream-流的两种方式"><a href="#3、获取Stream-流的两种方式" class="headerlink" title="3、获取Stream 流的两种方式"></a>3、获取Stream 流的两种方式</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握获取Stream流的<span class="number">2</span>种方式</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        方式<span class="number">1</span>：根据集合对象获取流</span><br><span class="line">            单列集合： 集合对象.stream()</span><br><span class="line">            双列集合：</span><br><span class="line">                先获取键的集合，在通过键的集合获取流</span><br><span class="line"></span><br><span class="line">        方式<span class="number">2</span>：根据of方法获取流</span><br><span class="line">            static <span class="symbol">&lt;T&gt;</span> Stream<span class="symbol">&lt;T&gt;</span> of(T... <span class="built_in">values</span>)</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;风清扬&quot;</span>);</span><br><span class="line">        <span class="comment">//通过集合获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据of方法获取流</span></span><br><span class="line">        Stream&lt;Integer&gt; s1 = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);</span><br><span class="line">        Stream&lt;Double&gt; s2 = Stream.of(<span class="number">1.1</span>, <span class="number">2.2</span>);</span><br><span class="line">        Stream&lt;String&gt; s3 = Stream.of(<span class="string">&quot;11&quot;</span>, <span class="string">&quot;12&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4、Stream-流的常用方法"><a href="#4、Stream-流的常用方法" class="headerlink" title="4、Stream 流的常用方法"></a>4、Stream 流的常用方法</h3><h5 id="4-1-Count"><a href="#4-1-Count" class="headerlink" title="4.1 Count"></a>4.1 Count</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    count方法：</span></span><br><span class="line"><span class="comment">        终结方法，返回流中的元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建流，将整数11, 22, 33, 44, 55放到流中</span></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回流中的元素个数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stream.count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-forEach"><a href="#4-2-forEach" class="headerlink" title="4.2 forEach"></a>4.2 forEach</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    forEach方法：</span></span><br><span class="line"><span class="comment">        终结方法，遍历流中的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    流只能使用一次</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建流</span></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历流中的数据</span></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        stream.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer a)</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda简化</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        stream.forEach((Integer a) -&gt;&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(a);</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//stream.forEach( a -&gt; System.out.println(a));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用方法引用</span></span><br><span class="line">        <span class="comment">//抽象的accept方法，实现的代码就是单纯的引用了println方法</span></span><br><span class="line">        stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h5 id="4-3-filter"><a href="#4-3-filter" class="headerlink" title="4.3 filter"></a>4.3 filter</h5><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    <span class="keyword">filter</span>方法：</span><br><span class="line">        过滤数据，得到符合条件的数据，放入新Stream中</span><br><span class="line">        <span class="keyword">filter</span>返回新的流，是中间方法。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：筛选出偶数并遍历打印</span></span><br><span class="line">        Stream&lt;Integer&gt; stream1 = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//筛选出偶数</span></span><br><span class="line">        Stream&lt;Integer&gt; stream2 = stream1.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="comment">//Integer a 元素</span></span><br><span class="line">            <span class="comment">//返回值为true，元素保留存入新的流</span></span><br><span class="line">            <span class="comment">//返回值是false，元素被删除</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Integer a)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历打印</span></span><br><span class="line">        stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        stream1.filter(a -&gt; a%<span class="number">2</span>==<span class="number">0</span> ).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-limit"><a href="#4-4-limit" class="headerlink" title="4.4 limit"></a>4.4 limit</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    limit(<span class="built_in">n</span>)方法：</span><br><span class="line">        截取前<span class="built_in">n</span>个数据，返回新Stream。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Stream流，放入整数11, 22, 33, 44, 55, 66</span></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//截取前3个数据</span></span><br><span class="line">        stream.limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-5-skip"><a href="#4-5-skip" class="headerlink" title="4.5 skip"></a>4.5 skip</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    skip(<span class="built_in">n</span>)方法：</span><br><span class="line">        跳过前<span class="built_in">n</span>个数据，返回新Stream。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Stream流</span></span><br><span class="line">        Stream&lt;Integer&gt; st = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跳过前4个数据，并遍历结果</span></span><br><span class="line">        <span class="comment">//st.skip(4).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">        st.limit(<span class="number">4</span>).skip(<span class="number">2</span>).forEach(System.out::println); <span class="comment">// 33  44</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-6-map"><a href="#4-6-map" class="headerlink" title="4.6 map"></a>4.6 map</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    map方法：</span></span><br><span class="line"><span class="comment">        数据映射，将流中的数据类型进行转换。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//将流中的字符串转为整数类型，并筛选出奇数，遍历输出</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;11&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;33&quot;</span>, <span class="string">&quot;44&quot;</span>, <span class="string">&quot;55&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将流中的字符串转为整数类型</span></span><br><span class="line">        <span class="comment">//Function&lt;流的元素的原类型, 要转换的新的类型&gt;</span></span><br><span class="line">       <span class="comment">/* Stream&lt;Integer&gt; stream1 = stream.map(new Function&lt;String, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Integer apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                return Integer.parseInt(s); //Integer类的parseInt方法就是 apply方法要做的事情</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法引用  类名::静态方法名</span></span><br><span class="line">        <span class="comment">//并筛选出奇数</span></span><br><span class="line">        stream.map(Integer::parseInt)</span><br><span class="line">              .filter(a-&gt;a%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-7-concat"><a href="#4-7-concat" class="headerlink" title="4.7 concat"></a>4.7 concat</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    <span class="built_in">concat</span>方法：</span><br><span class="line">        这是Stream的静态方法，可以把两个流合并为一个新的流。</span><br><span class="line"></span><br><span class="line">        static Stream <span class="built_in">concat</span>(流<span class="number">1</span>, 流<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; s1 = Stream.of(<span class="number">11</span>, <span class="number">22</span>);</span><br><span class="line">        Stream&lt;Integer&gt; s2 = Stream.of(<span class="number">33</span>, <span class="number">44</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并流</span></span><br><span class="line">        Stream.concat(s1,s2).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-8-流的注意事项"><a href="#4-8-流的注意事项" class="headerlink" title="4.8 流的注意事项"></a>4.8 流的注意事项</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    总结：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Stream流的常用方法大体分为两类：</span></span><br><span class="line"><span class="comment">        1.中间方法：返回值类型是一个新的Stream流，可以继续往后处理流。</span></span><br><span class="line"><span class="comment">        2.终结方法：返回值类型不是Stream，流的处理已经结束。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Stream流的使用注意：</span></span><br><span class="line"><span class="comment">        1.一个Stream流对象只能操作一次。</span></span><br><span class="line"><span class="comment">        2.终结方法如果没调用，中间方法也不会执行。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建流</span></span><br><span class="line">        Stream&lt;Integer&gt; s1 = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span> ,<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终结方法如果没调用，中间方法也不会执行。</span></span><br><span class="line">       <span class="comment">/* s1.filter(new Predicate&lt;Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean test(Integer a) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(a);</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        s1.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Integer a)</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).count();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5、Stream流转集合"><a href="#5、Stream流转集合" class="headerlink" title="5、Stream流转集合"></a>5、Stream流转集合</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">     Stream流收集到集合</span><br><span class="line"></span><br><span class="line">    方法：</span><br><span class="line">        collect(Collector<span class="variable">&lt;? super T,A,R&gt;</span> collector) 提供一个流收集器，用于收集数据，返回集合对象。</span><br><span class="line"></span><br><span class="line">     收集到List集合：</span><br><span class="line">        stream对象.collect(Collectors.<span class="keyword">to</span>List());</span><br><span class="line"></span><br><span class="line">     收集到Set集合：</span><br><span class="line">        stream对象.collect(Collectors.<span class="keyword">to</span>Set());</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集到List集合中</span></span><br><span class="line">        List&lt;Integer&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//单列集合 forEach方法</span></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; set = stream.collect(Collectors.toSet());</span><br><span class="line">        set.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6、Stream-综合案例"><a href="#6、Stream-综合案例" class="headerlink" title="6、Stream 综合案例"></a>6、Stream 综合案例</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    已知两个集合数据：</span><br><span class="line">        第一个队伍数据：<span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;风清扬&quot;</span>, <span class="string">&quot;任我行&quot;</span>, <span class="string">&quot;东方不败&quot;</span>, <span class="string">&quot;岳不群&quot;</span>  <span class="keyword">of</span>()</span><br><span class="line">        第二个队伍数据：<span class="string">&quot;马云&quot;</span>, <span class="string">&quot;李彦宏&quot;</span>, <span class="string">&quot;刘强东&quot;</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="string">&quot;马保国&quot;</span>  <span class="keyword">of</span>()</span><br><span class="line"></span><br><span class="line">    要求：</span><br><span class="line">        第一个队伍只要名字为<span class="number">3</span>个字的姓名。<span class="built_in"> filter</span></span><br><span class="line">        第一个队伍筛选之后只要前<span class="number">3</span>人。limit(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        第二个队伍只要姓马的姓名。<span class="built_in"> filter</span></span><br><span class="line">        第二个队伍不要前<span class="number">2</span>人。 skip(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        将两个队伍合并到一个队伍 <span class="built_in"> concat</span>(流<span class="number">1</span>, 流<span class="number">1</span>)</span><br><span class="line">        根据姓名创建Person对象， <span class="keyword">map</span></span><br><span class="line">        存储到一个新集合。 collect(Collectors.toList())</span><br><span class="line">        遍历集合 forEach</span><br><span class="line"></span><br><span class="line">     使用Stream流式编程完成</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name = &quot;</span> + name + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-1-原生的流"><a href="#6-1-原生的流" class="headerlink" title="6.1 原生的流"></a>6.1 原生的流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//第一个队伍数据：&quot;令狐冲&quot;, &quot;风清扬&quot;, &quot;任我行&quot;, &quot;东方不败&quot;, &quot;岳不群&quot;</span></span><br><span class="line">        Stream&lt;String&gt; s1 = Stream.of(<span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;风清扬&quot;</span>, <span class="string">&quot;任我行&quot;</span>, <span class="string">&quot;东方不败&quot;</span>, <span class="string">&quot;岳不群&quot;</span>);</span><br><span class="line">        <span class="comment">//第一个队伍只要名字为3个字的姓名。 filter</span></span><br><span class="line">        Stream&lt;String&gt; s2 = s1.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.length() == <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//第一个队伍筛选之后只要前3人。limit(3)</span></span><br><span class="line">        Stream&lt;String&gt; s3 = s2.limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二个队伍数据：&quot;马云&quot;, &quot;李彦宏&quot;, &quot;刘强东&quot;, &quot;马化腾&quot;, &quot;马保国&quot;</span></span><br><span class="line">        Stream&lt;String&gt; ss1 = Stream.of(<span class="string">&quot;马云&quot;</span>, <span class="string">&quot;李彦宏&quot;</span>, <span class="string">&quot;刘强东&quot;</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="string">&quot;马保国&quot;</span>);</span><br><span class="line">        <span class="comment">//第二个队伍只要姓马的姓名。 filter</span></span><br><span class="line">        Stream&lt;String&gt; ss2 = ss1.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.startsWith(<span class="string">&quot;马&quot;</span>);</span><br><span class="line">                <span class="comment">//return s.charAt(0)==&#x27;马&#x27;;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//第二个队伍不要前2人。 skip(2)</span></span><br><span class="line">        Stream&lt;String&gt; ss3 = ss2.skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将两个队伍合并到一个队伍  concat(流1, 流1)</span></span><br><span class="line">        Stream&lt;String&gt; s4 = Stream.concat(s3, ss3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据姓名创建Person对象， map</span></span><br><span class="line">        Stream&lt;Person&gt; s5 = s4.map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Person <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储到一个新集合。 collect(Collectors.toList())</span></span><br><span class="line">        List&lt;Person&gt; list = s5.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合 forEach</span></span><br><span class="line">        list.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">                System.out.println(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-Lambda-简化版的流"><a href="#6-2-Lambda-简化版的流" class="headerlink" title="6.2 Lambda 简化版的流"></a>6.2 Lambda 简化版的流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; s1 = Stream.of(<span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;风清扬&quot;</span>, <span class="string">&quot;任我行&quot;</span>, <span class="string">&quot;东方不败&quot;</span>, <span class="string">&quot;岳不群&quot;</span>).filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">        Stream&lt;String&gt; s2 = Stream.of(<span class="string">&quot;马云&quot;</span>, <span class="string">&quot;李彦宏&quot;</span>, <span class="string">&quot;刘强东&quot;</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="string">&quot;马保国&quot;</span>).filter(s -&gt; s.startsWith(<span class="string">&quot;马&quot;</span>)).skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*s4.map(new Function&lt;String, Person&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Person apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                return new Person(s);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造方法引用</span></span><br><span class="line">        Stream.concat(s1,s2)</span><br><span class="line">              .map(Person::<span class="keyword">new</span>)</span><br><span class="line">              .collect(Collectors.toList())</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！&lt;strong&gt;学习最好的方式就是教授别人 —费曼学习法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础与加强" scheme="https://onlyonemomo.github.io/categories/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>018-java语法加强之多线程高级</title>
    <link href="https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/018-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E7%BA%A7/"/>
    <id>https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/018-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E7%BA%A7/</id>
    <published>2022-09-06T15:01:02.000Z</published>
    <updated>2022-09-06T15:02:17.837Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p><span id="more"></span><h3 id="1、线程等待和唤醒"><a href="#1、线程等待和唤醒" class="headerlink" title="1、线程等待和唤醒"></a>1、线程等待和唤醒</h3><h5 id="1-1-基础概述"><a href="#1-1-基础概述" class="headerlink" title="1.1 基础概述"></a>1.1 基础概述</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：了解线程间的等待和唤醒机制</span><br><span class="line"></span><br><span class="line">    1.等待和唤醒是两个线程或多个线程之间的事情。</span><br><span class="line"></span><br><span class="line">    2.等待和唤醒的方法：（来自Object类）</span><br><span class="line">        <span class="built_in">wait</span>(): 让当前线程释放锁并进入等待，直到其他线程调用锁的notify()或notifyAll()方法。</span><br><span class="line">        notify(): 唤醒正在等待的某个锁一个线程。</span><br><span class="line">        notifyAll()：唤醒正在等待某个锁的所有线程。</span><br><span class="line"></span><br><span class="line">    3.注意：</span><br><span class="line">        3.1 <span class="built_in">wait</span>和notify方法需要在同步代码块中，使用锁对象调用</span><br><span class="line">        3.2 执行了<span class="built_in">wait</span>方法的线程会释放锁，并进入等待，直到有其他线程将它唤醒。</span><br><span class="line">            执行了notify方法的线程，会唤醒其他等待的线程，但是不会马上释放锁，必须执行完代码块才会释放锁。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   4. <span class="built_in">wait</span>和<span class="built_in">sleep</span>的区别？</span><br><span class="line">        <span class="built_in">wait</span>等待过程中会释放锁，<span class="built_in">sleep</span>不会释放锁</span><br><span class="line">        <span class="built_in">wait</span>要在同步代码块中使用，<span class="built_in">sleep</span>不需要</span><br><span class="line">        <span class="built_in">wait</span>可以计时和无限等待，<span class="built_in">wait</span>如果是无限等待，需要被唤醒；<span class="built_in">sleep</span>只能计时进行休眠，会自动醒来</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//wait方法需要在同步代码块中，使用锁对象调用</span></span><br><span class="line">        <span class="comment">//Object obj = new Object();</span></span><br><span class="line">        <span class="comment">//obj.wait();</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait前1&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait(); <span class="comment">//让当前线程进入等待，会释放锁，直到某个线程调用notify方法后，才会被唤醒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait后1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait前3&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait(); <span class="comment">//让当前线程进入等待，会释放锁，直到某个线程调用notify方法后，才会被唤醒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait后3&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    <span class="comment">//obj.notify();//随机唤醒在等待的某个线程</span></span><br><span class="line">                    obj.notifyAll();<span class="comment">//唤醒在等待的线程的所有线程</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;唤醒&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-王者荣耀案例"><a href="#1-2-王者荣耀案例" class="headerlink" title="1.2 王者荣耀案例"></a>1.2 王者荣耀案例</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    王者荣耀</span></span><br><span class="line"><span class="comment">        2个线程，一个线程负责加载和开启游戏，一个线程负责加载玩家</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        开始游戏的线程，要等待加载玩家的线程执行完毕之后，才开始执行</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个线程负责加载和开启游戏</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;准备开始游戏&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait(); <span class="comment">//进入等待，释放锁</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;玩家加载结束，进入游戏&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start(); <span class="comment">//启动线程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个线程负责加载玩家</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;玩家&quot;</span>+i+<span class="string">&quot;加载完成&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    obj.notify(); <span class="comment">//唤醒等待的线程</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-打印1-100奇偶交替"><a href="#1-3-打印1-100奇偶交替" class="headerlink" title="1.3 打印1~100奇偶交替"></a>1.3 打印1~100奇偶交替</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印奇数</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (number&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(number%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;奇数线程：&quot;</span>+number);</span><br><span class="line">                            number++;</span><br><span class="line">                            <span class="comment">//通知</span></span><br><span class="line">                            lock.notify();</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                           <span class="comment">//等待</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                lock.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印偶数</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (number&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(number%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;偶数线程：&quot;</span>+number);</span><br><span class="line">                            number++;</span><br><span class="line">                            <span class="comment">//通知</span></span><br><span class="line">                            lock.notify();</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//等待</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                lock.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、线程死锁以及状态"><a href="#2、线程死锁以及状态" class="headerlink" title="2、线程死锁以及状态"></a>2、线程死锁以及状态</h3><h5 id="2-1-线程死锁"><a href="#2-1-线程死锁" class="headerlink" title="2.1 线程死锁"></a>2.1 线程死锁</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：了解什么是线程死锁及产生的原因</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.线程死锁：</span></span><br><span class="line"><span class="comment">        在多线程程序中，使用了多把锁，造成线程之间相互等待锁，程序无法向下执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.死锁产生的条件：</span></span><br><span class="line"><span class="comment">        有多个线程</span></span><br><span class="line"><span class="comment">        有多把锁</span></span><br><span class="line"><span class="comment">        有同步代码块嵌套</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.避免死锁：</span></span><br><span class="line"><span class="comment">        开发多线程程序时，应该避免三种条件同时出现在代码中，以免造成线程死锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="2-2-线程的6种状态"><a href="#2-2-线程的6种状态" class="headerlink" title="2.2 线程的6种状态"></a>2.2 线程的6种状态</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：了解线程运行的6种状态</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    线程6种状态：</span></span><br><span class="line"><span class="comment">        1.新建状态  NEW</span></span><br><span class="line"><span class="comment">        2.可运行状态 RUNNABLE</span></span><br><span class="line"><span class="comment">        3.阻塞状态  BLOCKED</span></span><br><span class="line"><span class="comment">        4.无限等待状态 WAITING</span></span><br><span class="line"><span class="comment">        5.计时等待  TIMED_WAITING</span></span><br><span class="line"><span class="comment">        6.终止状态  TERMINATED</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    获取线程状态的方法：</span></span><br><span class="line"><span class="comment">        getState()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="3、线程池"><a href="#3、线程池" class="headerlink" title="3、线程池"></a>3、线程池</h3><h5 id="3-1-线程池的使用-Runnable方式"><a href="#3-1-线程池的使用-Runnable方式" class="headerlink" title="3.1 线程池的使用_Runnable方式"></a>3.1 线程池的使用_Runnable方式</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握Runnable方式使用线程池</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1</span>.创建线程池的方式？</span><br><span class="line">            使用 Executors 工具类的静态方法：newFixedThreadPool(<span class="built_in">int</span> nThreads)，参数是线程的数量</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.创建Runnable类型的任务，并提交任务给线程池</span><br><span class="line">            <span class="number">2.1</span> 定义任务类，实现Runnable接口，重写run方法。</span><br><span class="line">            <span class="number">2.2</span> 调用线程池的 submit(任务) 方法，提交任务。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        线程池的线程是有默认名字的</span><br><span class="line">            pool-线程池编号-thread-线程编号   pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">       ctrl + <span class="built_in">n</span> 快速搜索类</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程要执行的任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name+ <span class="string">&quot;执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程池，参数就是线程的数量</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把要执行的任务交给线程池，线程池会自动分配线程去执行任务</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        pool.submit(mr);</span><br><span class="line">        pool.submit(mr);</span><br><span class="line">        pool.submit(mr);</span><br><span class="line">        pool.submit(mr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程执行完后，会放回线程池</span></span><br><span class="line">        <span class="comment">//如果要停止程序，需要关闭线程池</span></span><br><span class="line">        <span class="comment">//pool.shutdown(); //通常不要关闭线程池</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-线程池的使用-Callable方法"><a href="#3-2-线程池的使用-Callable方法" class="headerlink" title="3.2 线程池的使用_Callable方法"></a>3.2 线程池的使用_Callable方法</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握Callable方式使用线程池</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1</span>.创建线程池的方式？</span><br><span class="line">            使用 Executors 工具类的静态方法：newFixedThreadPool(<span class="built_in">int</span> nThreads)，参数是线程的数量</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.创建Callable类型的任务，并提交任务给线程池</span><br><span class="line">            <span class="number">2.1</span> 定义任务类，实现Callable接口，重写<span class="built_in">call</span>方法。</span><br><span class="line">            <span class="number">2.2</span> 调用线程池的 submit(任务) 方法，提交任务。</span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>.获取线程执行结果</span><br><span class="line">             Future&lt;返回值类型&gt; f = 线程池.submit(Callable任务);</span><br><span class="line">             返回值类型  变量  =  f.get();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">4</span>.run方法和<span class="built_in">call</span>方法的区别？</span><br><span class="line">            <span class="built_in">call</span>方法有返回值，run方法没有返回值</span><br><span class="line">            <span class="built_in">call</span>方法可以抛异常，也可以捕捉异常，run方法只能捕捉异常，不能抛出</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程任务执行结束，可以返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;执行了，随机数为：&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交任务给线程池</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行任务，并返回结果对象，返回值就封装在Future中</span></span><br><span class="line">        Future&lt;Integer&gt; f1 = pool.submit(mc);</span><br><span class="line">        Future&lt;Integer&gt; f2 = pool.submit(mc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过get方法，获取返回值，阻塞等待线程的返回</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a1</span> <span class="operator">=</span> f1.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;f1的结果：&quot;</span>+a1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a2</span> <span class="operator">=</span> f2.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;f2的结果：&quot;</span>+a2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这样会排队运行，效果很低</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Future&lt;Integer&gt; f1 = pool.submit(mc);</span></span><br><span class="line"><span class="comment">        Integer a1 = f1.get();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;f1的结果：&quot;+a1);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Future&lt;Integer&gt; f2 = pool.submit(mc);</span></span><br><span class="line"><span class="comment">        Integer a2 = f2.get();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;f2的结果：&quot;+a2);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-线程池原理扩展"><a href="#3-3-线程池原理扩展" class="headerlink" title="3.3 线程池原理扩展"></a>3.3 线程池原理扩展</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用工具类创建线程池</span></span><br><span class="line">        <span class="comment">//ExecutorService pool = Executors.newFixedThreadPool(3);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原生代码创建线程池</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ThreadPoolExecutor(int corePoolSize, 核心线程数量</span></span><br><span class="line"><span class="comment">                              int maximumPoolSize, 最大线程数量</span></span><br><span class="line"><span class="comment">                              long keepAliveTime, 线程存活时间</span></span><br><span class="line"><span class="comment">                              TimeUnit unit, 时间单位</span></span><br><span class="line"><span class="comment">                              BlockingQueue&lt;Runnable&gt; workQueue 任务队列</span></span><br><span class="line"><span class="comment">                              )</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>, <span class="comment">//核心线程</span></span><br><span class="line">                <span class="number">3</span>, <span class="comment">//核心线程 + 临时线程</span></span><br><span class="line">                <span class="number">0L</span>, <span class="comment">//一直存活</span></span><br><span class="line">                TimeUnit.MILLISECONDS, <span class="comment">//单位为毫秒</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="number">1</span>)<span class="comment">//任务队列的容量为1</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程执行</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程执行</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程满了，放入任务队列等待执行</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程满了，任务队列也满了，创建临时线程执行</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程满了，任务队列也满了，临时线程也满了，拒绝该任务（报错）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-线程池案例"><a href="#3-4-线程池案例" class="headerlink" title="3.4 线程池案例"></a>3.4 线程池案例</h5><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">需求：使用线程池方式创建两个线程任务：分段计算<span class="number">1~20000</span>之间的数字和。</span><br><span class="line">        <span class="number">1</span>.线程<span class="number">1</span>计算<span class="number">1~10000</span>之间的数字和，并返回结果。</span><br><span class="line">        <span class="number">2</span>.线程<span class="number">2</span>计算<span class="number">10001~20000</span>之间的数字和，并返回结果。</span><br><span class="line">        <span class="number">3</span>.提交任务，获取计算结果进行合并，打印最终结果。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.线程1计算1~10000之间的数字和，并返回结果。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//new Task(1,10000);</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统一提交任务</span></span><br><span class="line">        <span class="comment">//Future&lt;Integer&gt; f1 = pool.submit(new Task1());</span></span><br><span class="line">        <span class="comment">//Future&lt;Integer&gt; f2 = pool.submit(new Task2());</span></span><br><span class="line"></span><br><span class="line">        Future&lt;Integer&gt; f1 = pool.submit(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        Future&lt;Integer&gt; f2 = pool.submit(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="number">10001</span>,<span class="number">20000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统一获取结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum1</span> <span class="operator">=</span> f1.get();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum2</span> <span class="operator">=</span> f2.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并结果</span></span><br><span class="line">        System.out.println(sum1+sum2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！&lt;strong&gt;学习最好的方式就是教授别人 —费曼学习法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础与加强" scheme="https://onlyonemomo.github.io/categories/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>017-java语法加强之多线程基础</title>
    <link href="https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/017-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://onlyonemomo.github.io/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/017-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-06T14:59:02.000Z</published>
    <updated>2022-09-06T15:00:50.417Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p><span id="more"></span><h3 id="1、继承Thread类创建线程"><a href="#1、继承Thread类创建线程" class="headerlink" title="1、继承Thread类创建线程"></a>1、继承Thread类创建线程</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标<span class="number">1</span>：继承Thread类创建线程</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1.</span>自定义一个线程类继承Thread类。</span><br><span class="line">        <span class="number">2.</span>重写<span class="built_in">run</span>()方法。</span><br><span class="line">        <span class="number">3.</span>创建自定义线程类的对象。</span><br><span class="line">        <span class="number">4.</span>调用start方法，启动线程。</span><br><span class="line"></span><br><span class="line">    问题：</span><br><span class="line">        start()方法和<span class="built_in">run</span>()方法的区别？</span><br><span class="line">        start() 启动线程</span><br><span class="line">        <span class="built_in">run</span>() 线程要执行的任务</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建自定义线程类的对象。</span></span><br><span class="line">    <span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.调用start方法，启动线程。</span></span><br><span class="line">    mt.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.自定义一个线程类继承Thread类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.重写run()方法。</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        当前的线程要执行的代码，写在run方法中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread:&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、实现Runnable-接口创建线程（重点"><a href="#2、实现Runnable-接口创建线程（重点" class="headerlink" title="2、实现Runnable 接口创建线程（重点)"></a>2、实现Runnable 接口创建线程（重点)</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：实现Runnable接口创建线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    步骤：</span></span><br><span class="line"><span class="comment">        1.定义一个类（任务类）实现Runnable接口。</span></span><br><span class="line"><span class="comment">        2.重写接口的run()方法。</span></span><br><span class="line"><span class="comment">        3.创建任务类的对象。</span></span><br><span class="line"><span class="comment">        4.创建Thread类的对象，把任务对象作为构造方法的参数。</span></span><br><span class="line"><span class="comment">        5.调用start方法，启动线程。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个任务</span></span><br><span class="line">    <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr); <span class="comment">//ctrl + q查看重载的方法参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动线程</span></span><br><span class="line">    t.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程要执行的代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyRunnable:&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、获取和设置线程名称"><a href="#3、获取和设置线程名称" class="headerlink" title="3、获取和设置线程名称"></a>3、获取和设置线程名称</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：掌握获取和设置线程名称的方法</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span>获取线程名称：</span><br><span class="line">        <span class="built_in">String</span>  <span class="variable">getName</span><span class="punctuation">(</span><span class="punctuation">)</span> 默认 <span class="built_in">Thread</span><span class="operator">-</span>编号 ，编号从<span class="number">0</span>开始</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>设置线程名称：</span><br><span class="line">        <span class="variable">void</span> <span class="variable">setName</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">name</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span>构造方法设置线程名称：</span><br><span class="line">        <span class="built_in">Thread</span><span class="punctuation">(</span><span class="variable">Runnable</span> <span class="variable">target</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">name</span><span class="punctuation">)</span></span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">mt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        mt1.setName(<span class="string">&quot;mt1&quot;</span>);</span><br><span class="line">        mt1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">mt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        mt2.setName(<span class="string">&quot;mt2&quot;</span>);</span><br><span class="line">        mt2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;线程执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、获取当前线程对象"><a href="#4、获取当前线程对象" class="headerlink" title="4、获取当前线程对象"></a>4、获取当前线程对象</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取对当前正在执行的线程对象：</span></span><br><span class="line"><span class="comment">        static Thread currentThread()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//main运行时，JVM默认启动了一个线程（主线程）</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        System.out.println(t.getName()); <span class="comment">//main</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取对当前正在执行的线程对象： Thread.currentThread()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>(); <span class="comment">//任务</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);<span class="comment">//线程</span></span><br><span class="line">        t.setName(<span class="string">&quot;t线程&quot;</span>);<span class="comment">//设置名字</span></span><br><span class="line">        t.start();<span class="comment">//启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前线程的名称</span></span><br><span class="line">        <span class="comment">//1.获取当前正在执行的线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="comment">//2.获取当前线程的名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> th.getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、线程睡眠与线程优先级"><a href="#5、线程睡眠与线程优先级" class="headerlink" title="5、线程睡眠与线程优先级"></a>5、线程睡眠与线程优先级</h3><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：学习sleep方法的使用</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>.让当前正在执行的线程睡眠（单位毫秒）：<span class="keyword">static</span> <span class="type">void</span> sleep(long millis)</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>.线程优先级范围：</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>.获取优先级：<span class="type">int</span> getPriority()</span><br><span class="line"></span><br><span class="line">    <span class="number">4</span>.设置优先级：<span class="type">void</span> setPriority(<span class="type">int</span> newPriority)</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//让主线程进入休眠1秒</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;t1线程:&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;t2线程:&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出优先级，默认是5</span></span><br><span class="line">        <span class="comment">//System.out.println(t1.getPriority());</span></span><br><span class="line">        <span class="comment">//System.out.println(t2.getPriority());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置优先级</span></span><br><span class="line">        t1.setPriority(<span class="number">10</span>);</span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6、卖票案例"><a href="#6、卖票案例" class="headerlink" title="6、卖票案例"></a>6、卖票案例</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：通过案例理解什么是线程安全问题</span><br><span class="line"></span><br><span class="line">     需求：某电影院目前正在上映国产大片，共有<span class="number">100</span>张票，而它有<span class="number">3</span>个窗口卖票，请设计一个程序模拟该电影院卖票。</span><br><span class="line">     步骤：</span><br><span class="line">            <span class="number">1.</span>定义Ticket类实现Runnable接口：</span><br><span class="line">                A：提供成员变量表示总票数</span><br><span class="line">                B：重写<span class="built_in">run</span>()方法实现卖票</span><br><span class="line">                    如果票数大于<span class="number">0</span>，进行售票，总票数减<span class="number">1</span>，</span><br><span class="line">                    打印<span class="string">&quot;xxx售票成功，剩余票数：xx&quot;</span> 。（xxx为线程名称，xx为剩余票数）</span><br><span class="line">            <span class="number">2.</span>定义一个测试类TicketDemo</span><br><span class="line">                A：创建三个Thread类的对象，把Ticket对象作为构造方法的参数，并设置线程名称。</span><br><span class="line">                B：启动线程三个线程。</span><br><span class="line"></span><br><span class="line">     问题：什么情况下会有线程安全问题？如何解决？</span><br><span class="line">            多个线程，共享同一个数据，多个线程进行修改，容易有线程安全问题</span><br><span class="line"></span><br><span class="line">     如何解决？</span><br><span class="line">            上锁，使用java的同步机制</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量，表示总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现卖票的业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(total&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//模拟卖票的时间消耗，可以比较容易演示问题</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                total--;</span><br><span class="line">                System.out.println(name+<span class="string">&quot;售票成功，剩余票数&quot;</span>+total);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//没有票，结束循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建任务类</span></span><br><span class="line">        Ticket ticket= <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建3个线程，模拟3个窗口卖票</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程，开始执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7、同步代码块（重点）"><a href="#7、同步代码块（重点）" class="headerlink" title="7、同步代码块（重点）"></a>7、同步代码块（重点）</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：通过案例理解什么是线程安全问题</span><br><span class="line"></span><br><span class="line">     需求：某电影院目前正在上映国产大片，共有<span class="number">100</span>张票，而它有<span class="number">3</span>个窗口卖票，请设计一个程序模拟该电影院卖票。</span><br><span class="line">     步骤：</span><br><span class="line">            <span class="number">1.</span>定义Ticket类实现Runnable接口：</span><br><span class="line">                A：提供成员变量表示总票数</span><br><span class="line">                B：重写<span class="built_in">run</span>()方法实现卖票</span><br><span class="line">                    如果票数大于<span class="number">0</span>，进行售票，总票数减<span class="number">1</span>，</span><br><span class="line">                    打印<span class="string">&quot;xxx售票成功，剩余票数：xx&quot;</span> 。（xxx为线程名称，xx为剩余票数）</span><br><span class="line">            <span class="number">2.</span>定义一个测试类TicketDemo</span><br><span class="line">                A：创建三个Thread类的对象，把Ticket对象作为构造方法的参数，并设置线程名称。</span><br><span class="line">                B：启动线程三个线程。</span><br><span class="line"></span><br><span class="line">     问题：什么情况下会有线程安全问题？如何解决？</span><br><span class="line">            多个线程，共享同一个数据，多个线程进行修改，容易有线程安全问题</span><br><span class="line"></span><br><span class="line">     如何解决？</span><br><span class="line">            上锁，使用java的同步机制</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量，表示总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现卖票的业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//锁的对象可以是任意的java对象，前提是保证唯一（任意的引用类型）</span></span><br><span class="line">            <span class="comment">//synchronized (lock)&#123;</span></span><br><span class="line">            <span class="comment">//synchronized (&quot;锁&quot;)&#123;//字符串常量对象在常量池中是唯一的</span></span><br><span class="line">            <span class="comment">//synchronized (this)&#123; //this代表当前对象，需要保证当前类只被创建一次</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Ticket.class)&#123; <span class="comment">//Ticket.class 获取当前类的字节码对象，类的字节码是唯一的</span></span><br><span class="line">                <span class="keyword">if</span>(total&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    total--;</span><br><span class="line">                    System.out.println(name+<span class="string">&quot;售票成功，剩余票数&quot;</span>+total);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">//没有票，结束循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//让释放锁的线程，休眠一会，让其他线程有机会争取锁，并发的效果更好</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建任务类</span></span><br><span class="line">        Ticket ticket= <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建3个线程，模拟3个窗口卖票</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程，开始执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="8、同步方法"><a href="#8、同步方法" class="headerlink" title="8、同步方法"></a>8、同步方法</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握同步方法的使用</span><br><span class="line"></span><br><span class="line">    使用<span class="keyword">synchronized</span>修饰的方法，叫做同步方法。</span><br><span class="line"></span><br><span class="line">    格式：</span><br><span class="line">        修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">            方法体;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    执行原理：</span><br><span class="line">        调用方法的线程需要先抢到锁才能执行方法中的代码。</span><br><span class="line"></span><br><span class="line">    同步方法中的锁：</span><br><span class="line">        实例方法(无static)：锁对象就是this。</span><br><span class="line">        静态方法(static)：锁对象为当前方法所在类的字节码对象。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量，表示总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现卖票的业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            sale();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(total==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把认为有安全问题的代码，直接封装成一个方法，在方法上面直接加锁</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        成员方法（没static），锁是this对象</span></span><br><span class="line"><span class="comment">        静态方法， 锁是 当前类名.class 字节码对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(total&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            total--;</span><br><span class="line">            System.out.println(name+<span class="string">&quot;售票成功，剩余票数&quot;</span>+total);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建任务类</span></span><br><span class="line">        Ticket ticket= <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建3个线程，模拟3个窗口卖票</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程，开始执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9、Lock-锁机制"><a href="#9、Lock-锁机制" class="headerlink" title="9、Lock 锁机制"></a>9、Lock 锁机制</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：了解Lock锁的使用</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span>Lock接口中操作锁的方法：</span><br><span class="line">        加锁： <span class="keyword">void</span> <span class="built_in">lock</span>()</span><br><span class="line">        释放锁：<span class="keyword">void</span> unlock()</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>Lock接口的常用实现类：ReentrantLock</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span>Lock锁的使用格式：</span><br><span class="line">        Lock k <span class="operator">=</span> <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        k.<span class="built_in">lock</span>(); <span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            需要同步的代码;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            k.unlock(); <span class="comment">//在finally中，可以确保锁一定会释放</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    Lock接口和synchronized的区别</span><br><span class="line">        JDK1<span class="number">.5</span>之前，synchronized性能低，使用Lock提高性能</span><br><span class="line">        JDK1<span class="number">.6</span>开始，java把synchronized性能做了优化，现在使用synchronized可有一样效果</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量，表示总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Lock对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(); <span class="comment">//可重入锁</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现卖票的业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock(); <span class="comment">//加锁</span></span><br><span class="line">                <span class="keyword">if</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    total--;</span><br><span class="line">                    System.out.println(name + <span class="string">&quot;售票成功，剩余票数&quot;</span> + total);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">//没有票，结束循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();<span class="comment">//释放锁，一定要执行的代码，放入finally中</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//让释放锁的线程，休眠一会，让其他线程有机会争取锁，并发的效果更好</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建任务类</span></span><br><span class="line">        Ticket ticket= <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建3个线程，模拟3个窗口卖票</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程，开始执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！&lt;strong&gt;学习最好的方式就是教授别人 —费曼学习法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础与加强" scheme="https://onlyonemomo.github.io/categories/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/"/>
    
    
  </entry>
  
</feed>
