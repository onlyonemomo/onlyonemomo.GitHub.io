<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>畅聊数字货币</title>
    <url>/2022/09/04/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/006-%E7%95%85%E8%81%8A%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语：</strong>IBM在未来两到三年将会推出量子电脑进行商用，那么对这个世界有怎么样的影响？第一个就是加密领域，需要上万年才能解决的问题，在量子电脑里甚至一分钟就给解决了。目前我们现有的加密技术无法阻挡量子电脑的庞大的运算能力，甚至比特币（第一代的区块链）会一夜之间归零。那么其他的数据加密，就形同虚设了。攻防一体，量子电脑的面向商业化，必然强制市场的技术升级，区块链将迎来最好的发展时代。区块链最牛的具象化产物是数字货币！</p>
<span id="more"></span>

<h5 id="1、什么叫做数字货币"><a href="#1、什么叫做数字货币" class="headerlink" title="1、什么叫做数字货币"></a>1、什么叫做数字货币</h5><p>（1）科学是服务于主义的，主义是服务于信仰的！也就是整个世界的技术是政治科技。第一次工业文明诞生了机器，第二次工业文明诞生了信息技术，每一次文明的升级都是为了解决当下的矛盾。不知道大家是否知道今年将迎来史上最强的金融危机？今年五月份美国股债双跌，就可以看到金融危机一角了。为什么会有金融危机呢？答案是源于政府肆无忌惮的印钱导致的，这也就是资本主义必须要经历的一个阶段！</p>
<p>（2）但这和数字货币有什么关系呢？数字货币自从诞生的那天起就是为了取代法币而存在的，就是要把政府肆无忌惮印钱的权利重新回归到人们的手里。在这里跟大家普及一下什么叫做法币和数字货币？</p>
<p>法币是政府发行的，在某个区域范围内指定强制使用用于交换物质、衡量生产力、劳动价值的一种证券。法币不承诺兑换金银在内的任何物质，也不承诺信用，这个是法币的核心。但货币却不同于法币！在没有产生法币之前，可以衡量衡量生产力、劳动价值，兑换物质（包含金银）的凭证叫做货币。目前指的货币是拿金银锚定的，没有区域性，可以世界流通。货币的价值取决于能兑换多少实物，信用和可兑换性是货币的核心！</p>
<p>通过这里可得知数字货币自从诞生之初起就具备价值了，可在市场上兑换，比特币不属于数字货币这个行列，是传统的虚拟信用币。</p>
<h5 id="2、数字货币将重新回归布雷斯体系"><a href="#2、数字货币将重新回归布雷斯体系" class="headerlink" title="2、数字货币将重新回归布雷斯体系"></a>2、数字货币将重新回归布雷斯体系</h5><p>目前市场上的数字货币繁杂，根本分辨不清什么数字货币的种类！数字货币按我的分类就三种，一种是浮动币，另一种是稳定币，还有一种是信用币。按照我上面的说法数字货币自从诞生之初就具备价值了，那么就是锚定了实物。实物中最具有价值的就是金银，也就是我们说得金本位系统！我目前认为浮动币跟黄金挂钩会成为史上最牛的货币之一，因为是彻底回归了布雷斯体系，回归了传统货币的价值。现在的互联网时代，你不可能拿着黄金去其他地方进行交易，只能通过挂钩的方式进行。</p>
<p><strong>什么叫稳定币呢</strong>？就是跟主权国家一对一货币挂钩，不做任何杠杆的数字货币就叫做稳定币。众所周知，银行是靠放贷款盈利的，是可以破产的！但是你存在稳定币之后，无法发生挤兑破产现象，因为你的钱百分百在银行存着，就算银行破产了也是可以取得出来的。因为线下的律师团队指定这笔钱不能被挪用，线上的稳定币是受到全世界金融法的管辖，所以能做到百分百不会被挤兑。这个稳定币的设定将是最牛的稳定币，永远不会被挤兑破产，从根源上保障了人们的财产安全。</p>
<p><strong>那什么叫做信用币</strong>？目前整个世界就是信用体系，所以会出现担保，金融借贷等服务。信用币说白了就是我相信你，你就值钱。那么信用币里面还出现一个特殊的币种叫做分享币。目前的广告投放都是请大V的，粉丝关注互动只能增加大V的流量和广告费，分享币的出来彻底改变了广告费的结构。就拿社交媒体来说，如果有广告费投入进来，那么就会大V和粉丝都会获得费用，使用即价值！</p>
<h5 id="3、美国即将立法稳定币法案"><a href="#3、美国即将立法稳定币法案" class="headerlink" title="3、美国即将立法稳定币法案"></a>3、美国即将立法稳定币法案</h5><p>大家知道全世界最反数字货币的国家是谁吗？答案是美国！美国无法接受数字货币，因为会彻底改变美元霸权，把swif系统干掉。一月份美国还是很反数字货币的，三月份拜登就开始一百八十度大转弯，签署了行政命令，指示对加密货币的监管和发行进行研究！甚至今年年底即将出来稳定币法案。我想大家很奇怪为什么美国会有如此大的转变呢？</p>
<p>数字货币时代的到来，就算是美国也得跪下双手迎接她。就像当年的大清一样试图阻止西方文明的到来，最终发现是螳臂当车罢了！美国已经意识到无法阻止数字货币的到来，最终一定会进行监管的。</p>
<h5 id="4、数字货币一统天下"><a href="#4、数字货币一统天下" class="headerlink" title="4、数字货币一统天下"></a>4、数字货币一统天下</h5><p>很多人都没有意识到数字货币的到来，将会给这个世界带来什么？第一，你的钱放进数字货币里面，那么谁也拿不走，这个是区块链的性质决定的。人生最重要的两样东西就是健康和安全，当合法和不合法的流氓都拿不走你的钱的时候，那么你就自由了。</p>
<p>举例：你在美国赚了一千万需要在美国缴纳税，那么回国也是需要缴纳税务，这样就构成了多次交税。但数字货币就彻底解决了这个问题，只需要一次缴纳税务即可，极大的解放了人们的生产力。据我所知，目前世界上点对点支付是不需要缴纳税的！</p>
<p>举例：你在朝鲜，连独裁者也无法拿走你的钱，那么他还有什么统治的意义吗？独裁就是为了满足自身的喜好，实现这个目标就是用钱来实现的，当放在数字货币里面，金正恩也拿不走。区块链的特性是可追溯，拿走了也能拿的回来！数字货币将彻底干掉全世界的独裁者，解放好人。</p>
]]></content>
      <categories>
        <category>三千世界</category>
      </categories>
      <tags>
        <tag>数字货币</tag>
      </tags>
  </entry>
  <entry>
    <title>进化论是个惊天骗局</title>
    <url>/2022/08/19/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/002-%E8%BF%9B%E5%8C%96%E8%AE%BA%E6%98%AF%E4%B8%AA%E9%AA%97%E5%B1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我看了卫斯理系列中的《木炭》，讲的是人的灵魂在木炭中寄存。以前的我是不相信鬼神的，现在的我相信人是不死不灭的。我们这个世界是个表征的世界，解释人类的起源无疑是《进化论》占据很大的话语权。但很多人都不知道的是进化论的作者达尔文根本没有在书中说过人是进化而来的，只是强烈暗示这一结果！</p>
<span id="more"></span>

<p>最近韦伯望远镜拍摄了130亿年前的照片，足以证明宇宙的时间是永恒的。可以想象一下，现在有一台照相机能捕摄到你小时候的照片那般震撼，也进一步说明人是不死不灭的。我们日常所说的时间是用来描述物体运动的，并不是宇宙定义的时间。下列是我收集挑战进化论的一些论点，在此之前先看罗翔老师的一个视频。</p>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=211870755&bvid=BV11a41187gG&cid=515291490&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>

<h5 id="1、古生物学几大问题无法回答"><a href="#1、古生物学几大问题无法回答" class="headerlink" title="1、古生物学几大问题无法回答:"></a>1、古生物学几大问题无法回答:</h5><p>(1）如果人类是渐变进化而来的，那么目前为止没有发现相关化石，也就是没有进化这个过程。也就直接违反了生物是进化而来的这个理论。</p>
<p>(2）在寒武纪之前的生命是以单细胞和多细胞的形式存在，但寒武纪生命大爆发就出现了很多物种，几乎所有生物的门都在同一时间出现。这就直接反驳达尔文的进化论，物种是从水生到陆生，由简单到复杂，由低级到高级循序渐进的进化而来。</p>
<p>(3）按照目前的理解，生物进化的速度越来越快。但生物学在基因生物这个领域的话，你会发现其实生命越高级它的基因越稳定越不容易发生突变，也就是说它的这种进化速度，其实是应该越高级越慢。可是从化石上来看，从它们其它别的证据上来看，反而好像是越高级它的进化就越快一样，所以说就是进化论本身的论据之间也存在着冲突。</p>
<h5 id="2、埃及金字塔里面的秘密"><a href="#2、埃及金字塔里面的秘密" class="headerlink" title="2、埃及金字塔里面的秘密:"></a>2、埃及金字塔里面的秘密:</h5><p>(1）金字塔的构成: 它大概由230万到250万块巨石构成，每一块巨石大概在3吨到30吨，巨石之间，不知道用了什么样的工艺，使得互相之间压得非常紧，拿一个最锋利的刀片都没有办法插到两块石头中间去，就是这种工艺现在的人都很难造出来。</p>
<p>(2）有一种说法说，当时埃及用了10万奴隶，花了20年时间造了这个金字塔。为什么不可信呢? 因为这个金字塔里面一共有230万到250万块石头，刚才讲过 每块石头3吨到30吨，如果是用了20年的时间，咱们说每年365天，每天从早到晚一分钟都不休息，需要每五分钟放一块石头上去，才能够把这个金字塔在20年造出来。就算是目前的现代人也很难能造得出来!</p>
<h5 id="3、这个金字塔有很多天文学的奇观。"><a href="#3、这个金字塔有很多天文学的奇观。" class="headerlink" title="3、这个金字塔有很多天文学的奇观。"></a>3、这个金字塔有很多天文学的奇观。</h5><p>比如说四个面是对着正东正西正南正北，然后在某一个时刻金字塔上的某一个点，对着天上的某一颗星星等等，就是它整个设计包含了非常精密的数学计算，然后包含了丰富的天文学，包括地球测量，包括在建筑工艺上也是非常先进。</p>
<p>(1）金字塔的底边是一个正方形，这个正方形每边长230.37米。角度51度50分，包括230.37米，或者说觉得没什么奇怪的数字。但是如果用三角函数值计算一下，就会发现，这个金字塔四边的周长，除以金字塔的高度，然后再除以二，结果就是π。这就是说当时建造金字塔的人已经知道了π! 这是四千多年前的古埃及人就懂得使用了，而中国是南北朝的祖冲之才计算出六七位的。</p>
<p>(2) 经线和纬线相交的地方就是这个吉萨金字塔。吉萨金字塔的高度是146.8米，如果把这个高度乘以10亿，就是地球到太阳的距离。这个金字塔的重量大概是590万吨，如果乘以1000万亿就是地球的重量，非常不可思议的一个整数倍1000万亿。高度是10亿， 重量是1000万亿倍。</p>
<h5 id="4、石油越来越多反而冲击了进化论"><a href="#4、石油越来越多反而冲击了进化论" class="headerlink" title="4、石油越来越多反而冲击了进化论:"></a>4、石油越来越多反而冲击了进化论:</h5><p>(1) 全球的石油储量到底有多少? 在2004年，埃克森美孚 ExxonMobil统计说全球的石油储量大概在1717亿吨。这个《Science》 科学杂志，美国最权威的科学期刊，它的统计数据更乐观一些，说全球大概有4000亿吨石油储量。</p>
<p>(2) 众所周知，石油是由动物的尸体在地底下转化而来的，植物则变成炭。在2018年4月份有三个科学家做了一个研究，这个研究发表在美国的科学院，就是叫 Proceedings of National Academy of America。National Academy of America 可以译为美国的科学院，相当于中国的中科院，Proceedings 指的是他们的杂志——学术期刊。也就是相当于中国中科院这样一个级别的美国科学院，它的学术期刊里边登了三个科学家的文章。</p>
<p>3.1 这三个科学家花了很多很多年的时间，去统计全世界所有地球表面上的生物所含碳的含量到底有多少，后来发现这个碳的含量大概在5500万亿吨。5500万亿吨是个什么概念呢？就是说地球上主要的碳存在于植物之中，植物中含有4万5千亿吨碳。当然我们知道植物是不会变成石油的，因为它埋到地下就变成煤了，煤是这么来的。那么动物有多少呢？经过他们的计算发现动物的含碳量大概是20亿吨。20亿吨的全世界所有活着的动物，不管是陆地上的还是海洋上的，加一块儿20亿吨。</p>
<p>3.2 如果要产生4000亿吨石油的话，需要把现在地球上所有的动物全部灭绝，而且一点儿不能糟践，不能说腐烂了、分解了、什么之类的不行，一点不糟践的转化成为石油，那也不过就是20亿吨。如果要产生4000亿吨石油的话，需要把地球上的生物毁灭200遍，所有的生物毁灭200遍。</p>
<p>这样计算的话，平均每一百万年就得来场灭世浩劫，才能产生这么多石油，那么生物明显就无法进化了。目前来说石油还在源源不断被发现，很显然进化论无法解释这一点。</p>
<h5 id="5、还有一些不解之谜"><a href="#5、还有一些不解之谜" class="headerlink" title="5、还有一些不解之谜:"></a>5、还有一些不解之谜:</h5><p>(1) 比如说在非洲加蓬共和国有一个奥克洛矿区，这个奥克洛矿区发现了一个20亿年以前的核反应堆，而且这个核反应堆运转了50万年。核反应堆不可能是自然形成的，稍有不慎就炸了。</p>
<p>(2)NASA在2006年刊登了一篇文章。当时是访问了一个NASA的科学家，他说NASA从1972年开始到1977年 5年的时间，观察月亮上的地震，其实这个不应该叫做Earthquake了，Earthquake是地震，它应该叫Moonquake，就是月震。</p>
<p>地球发生地震的时候，由于地球是一个实心球体，所以地球一震之后地震波在地表的传播，最多不过半分钟就不见了，因为被地表吸收了。而当月球发生地震的时候，月震波在月球上可以传递长达10分钟之久。当时那科学家说了一句话，他说这个月球 ring like a bell，说月亮就像是一个钟一样敲起来，10分钟的时间余音不绝，余音袅袅，所以月球是空心的。</p>
<p>从道理上来讲，一个陨石如果落到地球上来，它砸出来那个坑应该是比较浅。为什么呢？因为地球上有空气，当大的小行星或者是一些什么样的小的天体，比如说一公里两公里的小天体掉到地球上来的时候，它在跟空气的摩擦当中，会起到一种好像是风力刹车的作用，能够让它速度有所减低，而月球没有空气，所以说，如果是一些天体砸到月球上，砸出的坑应该更深，但是实际上砸出的坑都很浅，所以就有人说实际上月球有一个金属的外壳，非常坚硬，所以才能够保证这个坑砸出的这么浅。</p>
<p>月亮的重量非常可疑! 我们看月亮它是地球直径的1&#x2F;4，计算体积的话它和一个球体的直径的立方成正比，这么算下来月球的质量应该是地球的1&#x2F;64，如果它们构成是同样的质地就是1&#x2F;64。但是月球比这个轻，它是地球质量的1&#x2F;81。这样一轻就有一个想法，其实是两个答案了。第一个答案就是月球的土壤密度比地球的要小，这是一种解释；还有一种解释更不可思议，就是月球是空心的，别看它那么大，因为它空所以它轻。</p>
<p>小结：我希望大家能用我“<strong>浅谈ADE效应</strong>”那篇文章一样，<strong>我们要以一个什么都不知道的人为出发点，然后以其个人的智力来挖掘与确定的知识</strong>。知识论的思考规则是：</p>
<blockquote>
<p>(1)拒绝既定的现象。<br>(2)拒绝确定的教条。<br>(3)拒绝过去的权威。<br>(4)只接受个人理性验证为实的真理。</p>
</blockquote>
<p>为什么进化论遭受如此大的挑战还仍然是主流？因为是要理论才能打败理论，不是日常的他说错就可以推翻他的理论，这也是中国人惯有的思维。就像曾经的<code>燃素理论</code>一样，后面出现<code>氧化反应理论</code>才彻底击败<code>燃素理论</code>。</p>
]]></content>
      <categories>
        <category>三千世界</category>
      </categories>
      <tags>
        <tag>进化论</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈“ADE效应”陷阱</title>
    <url>/2022/08/16/001-%E6%B5%85%E8%B0%88%E2%80%9CADE%E6%95%88%E5%BA%94%E2%80%9D%E9%99%B7%E9%98%B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导读：</strong>ADE即抗体依赖增强。之前开发的登革病毒疫苗，还是西尼罗病毒疫苗，都被发现具有很强的ADE 效应，即针对E蛋白产生的抗体，会通过抗体的Fc受体结合巨噬细胞，并进入巨噬细胞，从而导致严重的细胞因子风暴。 这一ADE效应导致接种过西尼罗病毒疫苗的人反而更容易感染其他黄病毒（登革病毒、寨卡病毒！ 科学家早在1979年发表的《Nature》文章中就研究了黄病毒的 ADE 效应（Antibody-mediated enhancement of flavivirus replication in macrophage-like cell lines. Nature 1979）</p>
<span id="more"></span>

<p><strong>正文：</strong>通过导语可知，我们原有的观念就发生了颠覆。我们一直以为打了疫苗就可以有抗体抵御病毒攻击，可事实却相反！这就是“ADE效应“。我们的生活中也常常陷入“ADE效应陷阱”，像心理疾病一样，去看心理医生往往病情无法减轻，甚至可能更加重病情，但我们通过森田疗法（也称〃放弃治疗〃）常常有意想不到的效果！</p>
<h3 id="1、生活中有哪些ADE效应陷阱？"><a href="#1、生活中有哪些ADE效应陷阱？" class="headerlink" title="1、生活中有哪些ADE效应陷阱？"></a>1、生活中有哪些ADE效应陷阱？</h3><p><strong>心理疾病的ADE效应陷阱：</strong>根据传统认知，我们不能讳疾忌医，生病就应该去看医生。但是心理疾病确实一大反例，例如森田正马，“上学时，医生诊断为神经衰弱和脚气病，经常服药治疗，大学一年级时，父母因农忙，两个月忘记了给森田寄生活费，森田误以为是父母不支持他上学，感到很气愤，甚至想到当着父母的面自杀，于是暗下决心，豁出去拼命地学习，要干出个样子来让家里人看看，在这时期什么药也不吃了，放弃一切治疗，不顾一切地拼命学习，考完试后，取得了想不到的好成绩，不知什么时候，神经衰弱和脚气病等症状不知不觉也消失了。”</p>
<p><strong>古典文学的ADE效应陷阱：</strong>人们常说，要多读点书，可是有的书越读越困惑。胡适编写的《中国古代哲学 简史》里面就举例了大量的伪篇。“汉代的书，如贾谊的《新书》，董仲舒的《春秋繁露》，都有后人增加 的痕迹。又如王充的《论衡》，是汉代一部奇书，但其中如《乱龙篇》极力为董仲舒作土龙求雨一事辩护，与全书的宗旨恰相反。篇末又有”论衡终之，故曰 乱龙。乱者，终也“ 的话，全无道理。明是后人假造 的。此外重复的话极多。伪造的书定不止这一篇。又 如仲长统的《昌言》，乃是中国政治哲学史上有数的书，如今已失，仅存三篇魏晋人的书，散失更多。 《三国志》、《晋书》、《世说新语》所称各书，今 所存的，不过几部书。如《世说新语》说魏晋注《庄 子》的有几十家，今但有郭象注完全存在。” </p>
<p><strong>新闻的ADE效应陷阱：</strong>美国的总统拜登，在演讲中频频出错，就如同一个老年痴呆一样。本来是竞选总统的，但是他竟然说成竞选参议员，更有甚者认为美国白宫里面的总统并不是拜登。给大家普及一下，美国总统身份验证需要46项生物信息，包括指纹，笔迹等。拜登总统是一个老的政治家，政治家在公共场所 的所言所行都是有深意的。顺便说一下，<strong>政治没有巧合！</strong>由此可见，人们并不具备辨别假新闻的能力。</p>
<p><strong>体育上的ADE效应陷阱：</strong>我们的乒乓球很厉害，为什 么足球这么差劲？大家都在责怪足球运动员拿高薪， 却没有成就。大家可以看一下国外有哪些乒乓球俱乐部吗？足球的俱乐部我倒是知道很多，例如：皇家马德里足球俱乐部、拜仁慕尼黑俱乐部、巴塞罗那足球俱乐部、曼彻斯特联足球俱乐部、切尔西足球俱乐部 等。乒乓球就是一个业余活动，怎么能跟人家专业的比呢？我相信还有人不服气，我再说一个例子。我们知道学术界最高奖项是诺贝尔奖，但是很多人说受外国势力控制。那菲尔兹奖（全世界最高的数学奖）呢？ 只要你能证明得了数学，就可以获奖了。这个总不能再受外国势力控制了吧！中国一个人都没能获得过这个奖项，倒是奥数经常碾压外国人。</p>
<p><strong>逻辑上的ADE效应陷阱：</strong>由于我们受到意识形态影响太深，明明一些没有逻辑的话，却认为很有道理。例 如，“落后就要挨打”，为什么落后就要挨打呢？有人公然地说，“穷是原罪”，而希特勒的口号是，“让每一 户德国人餐桌上都有面包和牛奶”。</p>
<p><strong>小结：</strong>像生活中诸如此类地ADE效应很普遍，但大多数的人都深陷〃ADE效应陷阱〃里面无法自拔。由于填鸭式地教育的影响，我们明明知道这些不合理却无法跳出这个思想的沼泽，更无法有力的还击这些人。</p>
<h3 id="2-如何确定百分百正确的知识？"><a href="#2-如何确定百分百正确的知识？" class="headerlink" title="2.如何确定百分百正确的知识？"></a>2.如何确定百分百正确的知识？</h3><p><strong>”如何确定百分百正确的知识？“</strong>相信很多人说，这不可能获得百分百正确的知识。就算是牛顿的经典力学，也被爱因斯坦的相对论击败。这里我想引用一个小故事说明，“某高校的课堂上，有个教授问女学生， 你愿意接受你的男朋友一年365天，364天都是爱着你 的，另外一天是爱着别人的吗？女生思索了一下，然后坚定地说，不行！他必须365天中每一分钟都是爱着我的。”虽然明知道她的男朋友不可能每一分钟都是爰着她的，但她仍然这样要求。这就是在追求百分百确定的知识！</p>
<p><strong>”如何确定百分百正确的知识？“</strong>是笛卡尔提出来的。 笛卡尔提出来这个问题，引爆了欧洲的讨论，从而开创现代文明。人民从此告别了旧时代，迎接新科学。 顺带一提，数学的演绎推理便是他开创的。科学有可能会出错，但是数学永远不会出错！</p>
<h5 id="2-1、-笛卡尔知识论的问题：如何获得100-确定的知识？"><a href="#2-1、-笛卡尔知识论的问题：如何获得100-确定的知识？" class="headerlink" title="2.1、 笛卡尔知识论的问题：如何获得100%确定的知识？"></a>2.1、 笛卡尔知识论的问题：如何获得100%确定的知识？</h5><blockquote>
<p><strong>(1)拒绝既定的现象</strong><br><strong>(2)拒绝确定的教条</strong><br><strong>(3)拒绝过去的权威</strong><br><strong>(4)只接受个人理性验证为实的真理</strong></p>
</blockquote>
<p>笛卡尔有一天晚上连续做了三个梦，梦中梦。由此<strong>方法论</strong>就诞生了。例如《楚门的世界》，便是根据笛卡尔的方法论而拍摄的。在这里我想用一个例子来说明，100%确定知识的运用！像传销1040阳关工程， 他们所用的手法都是很低级的。他们使用心灵的复杂学习即**”谎言说一千遍便成真的”**，非常好破解。投资本来就是有赔有赚的，他们说投资就能获得高回报， 明显违背了市场的运行。又如六合彩百分百”特码”诈 骗，骗子往五百多万的手机号分为49的倍数，发一条 “特码”信息。连续四次便有49个人连续中4次特码，接下来骗子便打电话索要好处费。因为人民缺乏这个知识论的思维，认为人家真的能掌握特码信息。</p>
<h5 id="2-2、-如何建立自己的体系"><a href="#2-2、-如何建立自己的体系" class="headerlink" title="2.2、 如何建立自己的体系"></a>2.2、 如何建立自己的体系</h5><p>在讲完笛卡尔的100%确定的知识，就涉及到了如何建立自己的体系。攻防是一体的，道高一尺魔高一 丈。我们用笛卡尔获取知识的方法去思考规则：</p>
<blockquote>
<p><strong>a.拒绝偏见，获得【清晰与明确的知识】</strong><br><strong>b.分析细部来解决问题</strong><br><strong>c.从简而繁，由浅入深来构建解决问题的秩序</strong><br><strong>d.全面的确定没有遗漏应当检视的对象</strong></p>
</blockquote>
<p>规则的目的，运用理智，找出事物的方法。方法的目的在于挖掘事物，找出它们，并确定所找出的为真。 除非清晰地认知，否则不接受任何事物为真，甚至怀疑原有已经接受事物地真实性。<strong>我们要以一个什么都 不知道的人为出发点，然后以其个人的智力来挖掘与确定的知识。</strong>在信息大爆炸的时代，如何获取真实的信息尤为重要。例如我们日常下载的软件，如何确保不是盗版的？如Python下载，官网下载速度极慢，我想到其他的网站或者共享盘下载。如何保证下载的是官网的，而不是被人动了手脚？这时候我们可以校验它的MD5&#x2F;SHA1。</p>
<p>又如目前的区块链技术，到底是这个世界的未来，还是一波炒作的概念捞钱的手段。这就需要我们凭借自己的个人智力来挖掘这个区块链到底是什么？为什么这么多人推崇，有人这么多人诋毁？</p>
<p><strong>在建立体系的关键</strong>，在于必须有一个公共的标准。如果不是这样，就不能对事物有一个公正的判断。但是”公正“从何而来？答曰：来自一个共同的标准。我们要用一个同样的标准、一个客观的标准，一个大家乐于接受的标准。这样我们才能揭穿假象，辨别实情，回答种种的污蔑。例如，对待近代史的人物评判，这个标准是爰国的还是卖国的，是民主的还是走向专制 的。我相信这个标准是大家都乐于接受和认同的。回想过去，每当我与别人争论的时候，盖因〃批判的武器 〃，而不会受到〃武器的批判〃，才会使我落入敌人语言上的”圈套“。</p>
]]></content>
      <categories>
        <category>三千世界</category>
      </categories>
      <tags>
        <tag>知识论</tag>
      </tags>
  </entry>
  <entry>
    <title>024-java语法加强之xml、Dom4j、设计模式</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/024-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8Bxml%E3%80%81Dom4j%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、XML"><a href="#1、XML" class="headerlink" title="1、XML"></a>1、XML</h3><h5 id="1-1-XML-的作用"><a href="#1-1-XML-的作用" class="headerlink" title="1.1 XML 的作用"></a>1.1 XML 的作用</h5><blockquote>
<p>作用：保存和传输数据</p>
</blockquote>
<h5 id="1-2-XML-的组成元素"><a href="#1-2-XML-的组成元素" class="headerlink" title="1.2 XML 的组成元素"></a>1.2 XML 的组成元素</h5><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>文档声明</span><br><span class="line"><span class="number">2.</span>注释</span><br><span class="line"><span class="number">3.</span>标签<span class="comment">(元素)</span></span><br><span class="line"><span class="number">4.</span>属性</span><br><span class="line"><span class="number">5.</span>实体字符      &lt;       &amp;<span class="keyword">lt</span>;</span><br><span class="line"><span class="number">6.</span>CDATA字符数据区</span><br></pre></td></tr></table></figure>

<h5 id="1-3-XML-约束技术"><a href="#1-3-XML-约束技术" class="headerlink" title="1.3 XML 约束技术"></a>1.3 XML 约束技术</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.DTD</span> 弱</span><br><span class="line"><span class="number">2</span><span class="selector-class">.SCHEMA</span> 强</span><br></pre></td></tr></table></figure>

<h5 id="1-4-解析XML文档DOM方式原理"><a href="#1-4-解析XML文档DOM方式原理" class="headerlink" title="1.4 解析XML文档DOM方式原理"></a>1.4 解析XML文档DOM方式原理</h5><blockquote>
<p>原理：一次性把XML文件中所有内容读取到内存中,形成一颗DOM</p>
</blockquote>
<h3 id="2、Dom4j"><a href="#2、Dom4j" class="headerlink" title="2、Dom4j"></a>2、Dom4j</h3><h5 id="2-1-dom4j解析XML文档"><a href="#2-1-dom4j解析XML文档" class="headerlink" title="2.1 dom4j解析XML文档"></a>2.1 dom4j解析XML文档</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>导入dom4j<span class="number">-2.1</span><span class="number">.1</span>.jar</span><br><span class="line"><span class="number">2.</span>创建解析器  SAXReader reader = <span class="built_in">new</span> SAXReader();</span><br><span class="line"><span class="number">3.</span>解析<span class="type">XML</span>文档  Document document = reader.<span class="keyword">read</span>(<span class="type">xml</span>路径)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-xpath解析XML或HTML文档"><a href="#2-2-xpath解析XML或HTML文档" class="headerlink" title="2.2 xpath解析XML或HTML文档"></a>2.2 xpath解析XML或HTML文档</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.绝对路径: <span class="regexp">/根元素/</span>子元素/孙元素</span><br><span class="line"><span class="number">2</span>.相对路径: .<span class="regexp">/子元素/</span>孙元素</span><br><span class="line"><span class="number">3</span>.全文搜索: <span class="regexp">//</span>元素</span><br><span class="line"><span class="number">4</span>.属性查找: <span class="regexp">//</span>@属性名  找属性</span><br><span class="line">		<span class="regexp">//</span>元素[@属性名]  找元素</span><br></pre></td></tr></table></figure>

<h5 id="3-3-解析XML-操作Element"><a href="#3-3-解析XML-操作Element" class="headerlink" title="3.3 解析XML-操作Element"></a>3.3 解析XML-操作Element</h5><table>
<thead>
<tr>
<th align="left">方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">List<Element> elements()</td>
<td>得到当前元素下所有子元素</td>
</tr>
<tr>
<td align="left">Element element(String name)</td>
<td>得到当前元素下指定名字的子元素返回集合</td>
</tr>
<tr>
<td align="left">String getName()</td>
<td>得到当前元素下指定名字的子元素,如果有很多名字相同的返回第一个</td>
</tr>
<tr>
<td align="left">String  attributeValue(String name)</td>
<td>得到元素名字</td>
</tr>
<tr>
<td align="left">String elementText(子元素名)</td>
<td>通过属性名直接得到属性值</td>
</tr>
<tr>
<td align="left">String getText()</td>
<td>得到指定名称的子元素的文本</td>
</tr>
</tbody></table>
<h3 id="3、工厂模式"><a href="#3、工厂模式" class="headerlink" title="3、工厂模式"></a>3、工厂模式</h3><blockquote>
<p>定义一个工厂类,编写创建对象的方法,在方法中根据不同参数创建不同对象</p>
</blockquote>
<h6 id="Car-接口"><a href="#Car-接口" class="headerlink" title="Car 接口"></a>Car 接口</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Bmw"><a href="#Bmw" class="headerlink" title="Bmw"></a>Bmw</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bmw</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;宝马飞快的跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Benz"><a href="#Benz" class="headerlink" title="Benz"></a>Benz</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Benz</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奔驰飞快的奔驰!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="CarFactory"><a href="#CarFactory" class="headerlink" title="CarFactory"></a>CarFactory</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 汽车工厂 (工厂模式)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="comment">// 专门用于生成汽车</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createCar</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Demo03"><a href="#Demo03" class="headerlink" title="Demo03"></a>Demo03</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 以前自己创建对象并使用(既要创建对象也要使用对象)</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">        c1.run();</span><br><span class="line"></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">        c2.run();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用工厂类创建汽车(通过工厂类创建对象,我们主要是使用对象)</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c3</span> <span class="operator">=</span> CarFactory.createCar(<span class="number">1</span>);</span><br><span class="line">        c3.run();</span><br><span class="line"></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c4</span> <span class="operator">=</span> CarFactory.createCar(<span class="number">2</span>);</span><br><span class="line">        c4.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="4、动态代理"><a href="#4、动态代理" class="headerlink" title="4、动态代理"></a>4、动态代理</h3><h5 id="4-1-动态代理模式的作用"><a href="#4-1-动态代理模式的作用" class="headerlink" title="4.1 动态代理模式的作用"></a>4.1 动态代理模式的作用</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.对功能进行增强</span><br><span class="line">2.对功能进行拦截</span><br></pre></td></tr></table></figure>

<h5 id="4-2-Proxy的方法生成代理对象"><a href="#4-2-Proxy的方法生成代理对象" class="headerlink" title="4.2 Proxy的方法生成代理对象"></a>4.2 Proxy的方法生成代理对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Proxy类</span><br><span class="line">    <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class="line">    创建代理对象</span><br><span class="line"></span><br><span class="line">    ClassLoader loader:     类加载器, 当前类型.class.getClassLoader</span><br><span class="line">    Class&lt;?&gt;[] interfaces:  <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;多个接口&#125;</span><br><span class="line">    InvocationHandler h:    执行处理器,给一个匿名内部类</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>023-java语法加强之反射、注解</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/023-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、反射"><a href="#1、反射" class="headerlink" title="1、反射"></a>1、反射</h3><h5 id="1-1获取Class-字节码对象（重点）"><a href="#1-1获取Class-字节码对象（重点）" class="headerlink" title="1.1获取Class 字节码对象（重点）"></a>1.1获取Class 字节码对象（重点）</h5><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:学习三种获取<span class="keyword">Class</span>对象的方式</span><br><span class="line"></span><br><span class="line">小结:</span><br><span class="line">    三种获取<span class="keyword">Class</span>对象的方式</span><br><span class="line">        方式<span class="number">1</span>：类名.class</span><br><span class="line">        方式<span class="number">2</span>：对象名.getClass()</span><br><span class="line">        方式<span class="number">3</span>：<span class="keyword">Class</span>.forName(<span class="string">&quot;类全名&quot;</span>); //类全名就是 包名.类名</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Class</span>类中的方法:</span><br><span class="line">        String getSimpleName(); 获得类名</span><br><span class="line">        String getName();  获得类全名：包名.类名</span><br><span class="line"></span><br><span class="line">    注意:</span><br><span class="line">        这三种方式获取的是同一个<span class="keyword">Class</span>对象</span><br><span class="line">        一个类只有一个<span class="keyword">Class</span>对象（可以理解为一个类只有一个字节码文件）</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式1：类名.class</span></span><br><span class="line">        Class&lt;Person&gt; clazz1 = Person.class;</span><br><span class="line">        System.out.println(clazz1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：对象名.getClass()</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; clazz2 = p.getClass();</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式3：Class.forName(&quot;类全名&quot;);</span></span><br><span class="line">        Class&lt;?&gt; clazz3 = Class.forName(<span class="string">&quot;com.itheima.test.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这三种方式获取的是同一个Class对象</span></span><br><span class="line">        System.out.println(clazz1==clazz2);</span><br><span class="line">        System.out.println(clazz1==clazz3);</span><br><span class="line"></span><br><span class="line">        System.out.println(clazz1.getName());<span class="comment">//获得类全名 包名.类名  com.itheima.test.Person</span></span><br><span class="line">        System.out.println(clazz1.getSimpleName()); <span class="comment">//获得类名  Person</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-Constructor-构造器对象"><a href="#1-2-Constructor-构造器对象" class="headerlink" title="1.2 Constructor 构造器对象"></a>1.2 Constructor 构造器对象</h5><figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:通过反射获取public的构造方法</span><br><span class="line"></span><br><span class="line">讲解:</span><br><span class="line">    1.Constructor类作用:</span><br><span class="line">        表示类中的构造方法，每一个构造方法就是一个Constructor的对象。</span><br><span class="line"></span><br><span class="line">    2.通过反射获取public的构造方法 (Constructor对象)</span><br><span class="line">        Constructor<span class="attribute">&lt;?&gt;</span>[]  getConstructors()：返回public修饰的所有构造方法对象的数组</span><br><span class="line">        Constructor<span class="attribute">&lt;T&gt;</span> getConstructor​(Class<span class="attribute">&lt;?&gt;</span>... parameterTypes)：返回public修饰的单个构造方法对象</span><br><span class="line"></span><br><span class="line">        Constructor<span class="attribute">&lt;?&gt;</span>[] getDeclaredConstructors​()：返回任意权限的所有构造方法对象的数组</span><br><span class="line">        Constructor<span class="attribute">&lt;T&gt;</span> getDeclaredConstructor​(Class<span class="attribute">&lt;?&gt;</span>... parameterTypes)：返回任意权限的单个构造方法对象</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射获取Person类所有的公开的构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c : cons)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Person类某个公开的构造器</span></span><br><span class="line">        Constructor&lt;Person&gt; con1 = clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(con1);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Person类无参的构造器</span></span><br><span class="line">        Constructor&lt;Person&gt; con2 = clazz.getConstructor();</span><br><span class="line">        System.out.println(con2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取任意权限的构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons2 = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; c : cons2) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取任意权限的单个构造器,参数的类型是String</span></span><br><span class="line">        Constructor&lt;Person&gt; c2 = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-使用Constructor-创建对象（重点）"><a href="#1-3-使用Constructor-创建对象（重点）" class="headerlink" title="1.3 使用Constructor 创建对象（重点）"></a>1.3 使用Constructor 创建对象（重点）</h5><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：利用Constructor类创建对象</span><br><span class="line"></span><br><span class="line">    要求：</span><br><span class="line">        反射方式获取带参构造方法，并创建对象</span><br><span class="line">        反射方式获取无参构造方法，并创建对象</span><br><span class="line">        反射方式获取私有构造方法，并创建对象</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        Constructor类代表 <span class="string">&quot;构造方法&quot;</span> 这类事物，</span><br><span class="line">        而一个Constructor对象就代表一个具体的构造方法，可以用于创建该构造方法对应的对象。</span><br><span class="line"></span><br><span class="line">        Constructor类中创建对象的方法：</span><br><span class="line">            T newInstance​(<span class="type">Object</span>... initargs)：根据指定的构造方法创建对象，</span><br><span class="line">            setAccessible(<span class="type">boolean</span> flag)：设置为<span class="literal">true</span>,表示取消访问检查</span><br><span class="line"></span><br><span class="line">       反射方式创建对象特点：</span><br><span class="line">            代码更复杂，但是灵活度更高，而且可以使用任何权限的构造方法创建对象</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Person(String name, int age)构造器</span></span><br><span class="line">        Constructor&lt;Person&gt; con = clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//newInstance(构造方法的实参) ：使用构造器创建对象</span></span><br><span class="line">        <span class="comment">//Person p = new Person(&quot;张三&quot;, 19);</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> con.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射调用私有的构造器</span></span><br><span class="line">        Constructor&lt;Person&gt; con2 = clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置允许访问</span></span><br><span class="line">        con2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> con2.newInstance(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-4-Method对象"><a href="#1-4-Method对象" class="headerlink" title="1.4 Method对象"></a>1.4 Method对象</h5><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">目标：利用反射获取类的成员方法</span><br><span class="line"></span><br><span class="line">小结：</span><br><span class="line">    <span class="built_in">Method</span>类：</span><br><span class="line">        表示 <span class="string">&quot;成员方法&quot;</span> 这类事物，每一个<span class="built_in">Method</span>对象代表一个成员方法。</span><br><span class="line"></span><br><span class="line">    <span class="variable">Class</span>类中获取成员方法：（<span class="built_in">Method</span>对象）</span><br><span class="line">        <span class="number">1.</span>获取<span class="variable">public</span>的成员方法：</span><br><span class="line">            <span class="built_in">Method</span><span class="punctuation">[</span><span class="punctuation">]</span> <span class="variable">getMethods</span><span class="punctuation">(</span><span class="punctuation">)</span>：获取所有成员方法，包括从父类继承的。</span><br><span class="line">            <span class="built_in">Method</span> <span class="variable">getMethod</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">name</span><span class="operator">,</span> <span class="variable">Class</span><span class="operator">&lt;?&gt;...</span> <span class="variable">parameterTypes</span><span class="punctuation">)</span> ：获取单个成员方法。</span><br><span class="line">                   参数<span class="variable">name</span>：表示方法名</span><br><span class="line">                   参数<span class="variable">parameterTypes</span>：表示方法的形参类型</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>获取本类中任何权限的成员方法：</span><br><span class="line">            <span class="built_in">Method</span><span class="punctuation">[</span><span class="punctuation">]</span> <span class="variable">getDeclaredMethods</span><span class="punctuation">(</span><span class="punctuation">)</span>：获取所有成员方法，不包括继承的。</span><br><span class="line">            <span class="built_in">Method</span> <span class="variable">getDeclaredMethod</span>​<span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">name</span><span class="operator">,</span> <span class="variable">Class</span><span class="operator">&lt;?&gt;...</span> <span class="variable">parameterTypes</span><span class="punctuation">)</span>：获取单个成员方法对象。</span><br><span class="line"></span><br><span class="line">    注意<span class="operator">:</span> <span class="variable">int</span><span class="operator">.</span><span class="variable">class</span> 和 <span class="built_in">Integer</span><span class="operator">.</span><span class="variable">class</span> 是不一样的</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类全名获取字节码</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.itheima.test.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的public的方法，包括继承下来的方法</span></span><br><span class="line">        Method[] m1 = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : m1) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取任意权限的所有方法，只能获取本类的所有方法</span></span><br><span class="line">        Method[] m2 = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : m2) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-5-使用Method对象运行方法-重点）"><a href="#1-5-使用Method对象运行方法-重点）" class="headerlink" title="1.5 使用Method对象运行方法(重点）"></a>1.5 使用Method对象运行方法(重点）</h5><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：使用<span class="built_in">Method</span>对象运行方法</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Method</span>类：</span><br><span class="line">        一个<span class="built_in">Method</span>类的对象就代表一个成员方法。</span><br><span class="line">        只要获得一个<span class="built_in">Method</span>对象，就可以让它对应的成员方法运行。</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Method</span>类中的方法：</span><br><span class="line">        <span class="variable">Object</span> <span class="variable">invoke</span>​<span class="punctuation">(</span><span class="variable">Object</span> <span class="variable">obj</span><span class="operator">,</span> <span class="variable">Object</span><span class="operator">...</span> <span class="variable">args</span><span class="punctuation">)</span>：使用反射运行方法</span><br><span class="line">            参数<span class="variable">obj</span>：调用成员方法的对象</span><br><span class="line">            参数<span class="variable">args</span>：可变参数，表示调用方法时传递的实参（如果没有就不写）</span><br><span class="line">            返回值：方法的返回值（如果没有就不用接）</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//类全名获取字节码</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.itheima.test.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取单个公开权限的Method对象</span></span><br><span class="line">        <span class="comment">//getMethod(方法名, 方法的参数类型)</span></span><br><span class="line">        <span class="comment">//获取公开的show方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m3</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;show&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(m3);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//运行show方法 ：</span></span><br><span class="line">        <span class="comment">// 运行一个成员方法：1要有对象，2要有参数</span></span><br><span class="line">        <span class="comment">//Person p = new Person();</span></span><br><span class="line">        <span class="comment">//int a = p.show(10, 20);</span></span><br><span class="line">        <span class="comment">//System.out.println(a);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//invoke(对象,实参)：反射运行方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) clazz.getConstructor().newInstance(); <span class="comment">//反射创建对象</span></span><br><span class="line">        <span class="comment">//让m3这个方法执行，传入调用这个方法的对象p，和这个方法的实参</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">int</span>)m3.invoke(p, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射运行私有的work方法</span></span><br><span class="line">        <span class="comment">//1.获取work的Method对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">work</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;work&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.设置权限为允许访问</span></span><br><span class="line">        work.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.反射运行方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> (<span class="type">int</span>)work.invoke(p, <span class="number">8</span>);</span><br><span class="line">        System.out.println(money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射运行静态的run方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">run</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        <span class="comment">//类名调用，不需要对象</span></span><br><span class="line">        run.invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//run.invoke(p);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-6-通过Field操作成员变量"><a href="#1-6-通过Field操作成员变量" class="headerlink" title="1.6 通过Field操作成员变量"></a>1.6 通过Field操作成员变量</h5><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:通过反射获取成员变量Field并使用</span><br><span class="line"></span><br><span class="line">小结:</span><br><span class="line">    <span class="number">1</span>.Field的作用:</span><br><span class="line">        Filed代表类中的成员变量。一个Field对象就是一个成员变量</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>.通过<span class="keyword">Class</span>获取Field</span><br><span class="line">        Field getField​(<span class="type">String</span> name)：返回单个公共成员变量对象</span><br><span class="line">        Field[] getFields​()：返回所有公共成员变量对象的数组</span><br><span class="line">        Field getDeclaredField​(<span class="type">String</span> name)：返回单个成员变量对象</span><br><span class="line">        Field[] getDeclaredFields​()：返回所有成员变量对象的数组</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>.通过Field操作成员变量</span><br><span class="line">        保存值:</span><br><span class="line">            <span class="keyword">set</span>(<span class="type">Object</span> obj, <span class="type">Object</span> value);</span><br><span class="line">                参数obj: 成员变量所在对象</span><br><span class="line">                参数value: 成员变量的值</span><br><span class="line">        获取值:</span><br><span class="line">            <span class="type">Object</span> <span class="keyword">get</span>(<span class="type">Object</span> obj);</span><br><span class="line">                参数obj: 成员变量所在对象</span><br><span class="line">                返回值<span class="type">Object</span>: 返回成员变量的值</span><br><span class="line"></span><br><span class="line">    通常不会直接反射成员变量,而是反射成员变量对应的<span class="keyword">get</span>/<span class="keyword">set</span>方法</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回所有公共成员变量对象的数组</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回所有任意权限的成员变量</span></span><br><span class="line">        Field[] fs2 = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fs2) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回name成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f1</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//赋值  set</span></span><br><span class="line">        <span class="comment">//set(对象, 值)</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line">        f1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f1.set(p,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取值  get</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> f1.get(p);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-7-反射练习案例"><a href="#1-7-反射练习案例" class="headerlink" title="1.7 反射练习案例"></a>1.7 反射练习案例</h5><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">需求: 利用反射根据文件中的不同类名和方法名，创建不同的对象并调用方法。</span><br><span class="line"></span><br><span class="line">分析:</span><br><span class="line">    <span class="number">1.</span>通过Properties加载配置文件  load(字符流)</span><br><span class="line">    <span class="number">2.</span>从Properties中获取类名和方法名</span><br><span class="line">    <span class="number">3.</span>通过类名反射得到<span class="keyword">Class</span>对象</span><br><span class="line">    <span class="number">4.</span>通过<span class="keyword">Class</span>对象创建一个对象</span><br><span class="line">    <span class="number">5.</span>通过<span class="keyword">Class</span>对象得到方法</span><br><span class="line">    <span class="number">6.</span>调用方法</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        p.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day13\\ceshi\\config.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射运行方法</span></span><br><span class="line">        <span class="comment">//1.获取字节码对象 forName</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.反射获取Method对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredMethod(method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.运行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line">        m.invoke(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、注解"><a href="#2、注解" class="headerlink" title="2、注解"></a>2、注解</h3><h5 id="2-1-自定义注解"><a href="#2-1-自定义注解" class="headerlink" title="2.1 自定义注解"></a>2.1 自定义注解</h5><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标<span class="operator">:</span>了解自定义注解的格式</span><br><span class="line"></span><br><span class="line">小结<span class="operator">:</span></span><br><span class="line">    <span class="number">1.</span>自定义注解的格式</span><br><span class="line">        <span class="operator">@</span><span class="keyword">interface</span> 注解名 &#123;</span><br><span class="line">            数据类型 属性名();</span><br><span class="line">        &#125;</span><br><span class="line">        注解中的属性可以有默认值,格式为：</span><br><span class="line">        数据类型 属性名() <span class="keyword">default</span> 默认值;</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>注解中的属性类型</span><br><span class="line">        <span class="number">8</span>种基本数据类型</span><br><span class="line">        String, Class, 枚举, 注解</span><br><span class="line">        以上类型的数组</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Anno &#123;</span><br><span class="line">    <span class="comment">//数据类型  属性名();</span></span><br><span class="line">    <span class="comment">//常用的数据类型有： 基本类型  String  枚举</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>; <span class="comment">//指定默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="symbol">Anno2</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Anno2</span></span><br><span class="line"><span class="meta">@Anno(name = &quot;张三&quot;, age = 18)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Anno2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Anno2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-注解的Value属性"><a href="#2-2-注解的Value属性" class="headerlink" title="2.2 注解的Value属性"></a>2.2 注解的Value属性</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标:了解自定义注解的特殊格式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    小结:</span></span><br><span class="line"><span class="comment">        当注解中只有一个属性，并且属性名是value时：在为属性赋值时，省略value属性名。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Week &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Week(value = &quot;周三&quot;)</span></span><br><span class="line"><span class="meta">@Week(&quot;周三&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo09</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-元注解"><a href="#2-3-元注解" class="headerlink" title="2.3 元注解"></a>2.3 元注解</h5><figure class="highlight graphql"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标<span class="punctuation">:</span>了解元注解的作用</span><br><span class="line"></span><br><span class="line">小结<span class="punctuation">:</span></span><br><span class="line">    <span class="number">1</span>.什么是元注解?</span><br><span class="line">        修饰注解的注解</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>. <span class="meta">@Target</span>元注解</span><br><span class="line">        限制注解的使用位置。（注解默认可以放在类的任何成员上）</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>.<span class="meta">@Target</span>常用配置</span><br><span class="line">        <span class="meta">@Target</span><span class="punctuation">(</span>ElementType.<span class="keyword">TYPE</span><span class="punctuation">)</span> ：在类或接口上</span><br><span class="line">        <span class="meta">@Target</span><span class="punctuation">(</span>ElementType.CONSTRUCTOR<span class="punctuation">)</span> ：在构造方法</span><br><span class="line">        <span class="meta">@Target</span><span class="punctuation">(</span>ElementType.METHOD<span class="punctuation">)</span> ：在成员方法上</span><br><span class="line">        <span class="meta">@Target</span><span class="punctuation">(</span>ElementType.FIELD<span class="punctuation">)</span> ：在成员变量上</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Target常用配置</span></span><br><span class="line"><span class="comment">        @Target(ElementType.TYPE) ：在类或接口上</span></span><br><span class="line"><span class="comment">        @Target(ElementType.CONSTRUCTOR) ：在构造方法</span></span><br><span class="line"><span class="comment">        @Target(ElementType.METHOD) ：在成员方法上</span></span><br><span class="line"><span class="comment">        @Target(ElementType.FIELD) ：在成员变量上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.CONSTRUCTOR&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Week &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Week</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Week</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo10</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Week</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Week</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-元注解Retention"><a href="#2-4-元注解Retention" class="headerlink" title="2.4 元注解Retention"></a>2.4 元注解Retention</h5><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:了解元注解的作用</span><br><span class="line"></span><br><span class="line">小结:</span><br><span class="line">    <span class="number">1</span>.<span class="variable">@Retention</span>元注解:</span><br><span class="line">        指定注解的生命周期 (即注解会保留到哪个阶段)</span><br><span class="line"></span><br><span class="line">        <span class="variable">@Retention</span>(RetentionPolicy.SOURCE) 注解只在源代码阶段有效，编译后就没有了。</span><br><span class="line">        <span class="variable">@Retention</span>(RetentionPolicy.CLASS) 注解只在源代码，字节码阶段有效，运行后就没有了 （默认）</span><br><span class="line">        <span class="variable">@Retention</span>(RetentionPolicy.RUNTIME) 注解在所有阶段都存在。</span><br><span class="line"></span><br><span class="line">        SOURCE(源代码阶段)       CLASS(字节码阶段)         RUNTIME(运行时阶段)</span><br><span class="line">        xxx.java源文件    --&gt;    xxx.<span class="keyword">class</span>字节码    --&gt;   调用JVM虚拟机运行程序</span><br><span class="line"> *<span class="regexp">/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="comment">//注解的生命周期改到源代码阶段（编译完成后，就消失了）</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnno</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo11</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-5-注解解析"><a href="#2-5-注解解析" class="headerlink" title="2.5 注解解析"></a>2.5 注解解析</h5><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:使用反射完成注解解析</span><br><span class="line"></span><br><span class="line">小结：</span><br><span class="line">    <span class="number">1.</span>注解解析相关方法：</span><br><span class="line">            Annotation[] getAnnotations​() 获取所有注解</span><br><span class="line">            &lt;Annotation&gt; T getAnnotation(<span class="keyword">Class</span>&lt;T&gt; annotationClass) 获取一个指定的注解</span><br><span class="line">            boolean isAnnotationPresent(<span class="keyword">Class</span>&lt;Annotation&gt; annotationClass) 判断是否有指定的注解</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>如何解析注解?</span><br><span class="line">        通过反射来解析注解，注解在谁头上就用谁来解析</span><br><span class="line">            如果注解在类上,使用<span class="keyword">Class</span>来获取</span><br><span class="line">            如果注解在构造方法上,使用Constructor来获取</span><br><span class="line">            如果注解在成员方法上,使用Method来获取</span><br><span class="line">            如果注解在成员变量上,使用<span class="keyword">Field</span>来获取</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">//规定Book注解只能用在方法上</span></span><br><span class="line"><span class="comment">//默认生命周期是CLASS</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//在反射阶段才能解析到注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">    String[] author();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookTest</span> &#123;</span><br><span class="line">    <span class="meta">@Book(name = &quot;红楼梦&quot;,price = 19.9, author = &#123;&quot;曹雪芹&quot;,&quot;高鹗&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射获取show方法</span></span><br><span class="line">    <span class="comment">//1.获取字节码对象</span></span><br><span class="line">    Class&lt;BookTest&gt; clazz = BookTest.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.通过字节码对象获取方法</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过方法获取方法头上的注解</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">an</span> <span class="operator">=</span> show.getAnnotation(Book.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断注解是否存在</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> show.isAnnotationPresent(Book.class);</span><br><span class="line">    System.out.println(b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作注解，获取属性</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> an.name();</span><br><span class="line">    <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> an.price();</span><br><span class="line">    String[] author = an.author();</span><br><span class="line"></span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(price);</span><br><span class="line">    System.out.println(Arrays.toString(author));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-6-注解案例-模拟"><a href="#2-6-注解案例-模拟" class="headerlink" title="2.6 注解案例_模拟"></a>2.6 注解案例_模拟</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标:注解应用案例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    需求:模拟JUnit自带的<span class="doctag">@Test</span>注解,自动运行带<span class="doctag">@MyTest</span>注解的方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现步骤:</span></span><br><span class="line"><span class="comment">        1.定义MyTest注解。</span></span><br><span class="line"><span class="comment">        2.定义java类并包含多个方法, 在一些方法上加<span class="doctag">@MyTest</span>注解。</span></span><br><span class="line"><span class="comment">        3.使用反射得到类中的所有Method。</span></span><br><span class="line"><span class="comment">        4.遍历每个Method，如果有<span class="doctag">@MyTest</span>注解, 就运行这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只能在方法使用</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="comment">//注解能在运行阶段获取</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">weakup</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;起床&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取MyClass的字节码</span></span><br><span class="line">        Class&lt;MyClass&gt; clazz = MyClass.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射获取所有方法</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射创建对象</span></span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> clazz.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历methods数组，得到每个方法对象</span></span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m.isAnnotationPresent(MyTest.class))&#123;</span><br><span class="line">                <span class="comment">//运行该方法</span></span><br><span class="line">                m.invoke(myClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>022-java语法加强之网络编程</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/022-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、InetAddress类"><a href="#1、InetAddress类" class="headerlink" title="1、InetAddress类"></a>1、InetAddress类</h3><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:学习InetAddress类的使用</span><br><span class="line"></span><br><span class="line">    小结:</span><br><span class="line">        <span class="number">1</span>.InetAddress的作用?</span><br><span class="line">            表示IP地址</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.如何得到InetAddress对象?</span><br><span class="line">            <span class="keyword">static</span> InetAddress getLocalHost() ：获取本机的IP地址对象</span><br><span class="line">            <span class="keyword">static</span> InetAddress getByName(<span class="type">String</span> host) ：通过 IP地址/主机名/域名, 获取IP地址对象</span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>.InetAddress类中的方法</span><br><span class="line">            <span class="type">String</span> getHostName(): 获取主机名</span><br><span class="line">            <span class="type">String</span> getHostAddress() ：返回IP地址字符串</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取本机的IP地址对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ip1</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(ip1);</span><br><span class="line">        System.out.println(ip1.getHostName());</span><br><span class="line">        System.out.println(ip1.getHostAddress());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取本地或远程的IP地址对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ip2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(ip2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、UDP通信（了解）"><a href="#2、UDP通信（了解）" class="headerlink" title="2、UDP通信（了解）"></a>2、UDP通信（了解）</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：编写UDP接收端</span><br><span class="line"></span><br><span class="line">    接收数据的步骤：</span><br><span class="line">        <span class="number">1</span>.创建接收端。 DatagramSocket s = new DatagramSocket(<span class="keyword">int</span> port);</span><br><span class="line">        <span class="number">2</span>.创建空的数据包，用于装数据。DatagramPacket</span><br><span class="line">        <span class="number">3</span>.接收数据。receive(DatagramPacket p)方法</span><br><span class="line">        <span class="number">4</span>.解析数据。（从数组中获取有效内容）</span><br><span class="line">        <span class="number">5</span>.关闭资源。<span class="keyword">close</span></span><br><span class="line"></span><br><span class="line">    DatagramPacket接收数据的构造方法：</span><br><span class="line">        DatagramPacket(byte[] buf, <span class="keyword">int</span> <span class="keyword">length</span>)</span><br><span class="line">            buf: 用来保存接收到的数据</span><br><span class="line">            <span class="keyword">length</span>: 指定接收数据的长度</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：编写UDP发送端</span><br><span class="line"></span><br><span class="line">    发送数据的步骤：</span><br><span class="line">        <span class="number">1</span>.创建发送端。 DatagramSocket s = new DatagramSocket();</span><br><span class="line">        <span class="number">2</span>.创建数据包，并指定IP和端口。DatagramPacket</span><br><span class="line">        <span class="number">3</span>.发送数据。send(DatagramPacket p)方法</span><br><span class="line">        <span class="number">4</span>.关闭资源。</span><br><span class="line"></span><br><span class="line">    DatagramPacket发送数据的构造方法：</span><br><span class="line">        DatagramPacket(byte[] buf, <span class="built_in">int</span> <span class="built_in">offset</span>, <span class="built_in">int</span> length, InetAddress <span class="built_in">address</span>, <span class="built_in">int</span> port)</span><br><span class="line">            buf ：要发送的字节数据</span><br><span class="line">            <span class="built_in">offset</span>：从数组的哪个位置开始发送</span><br><span class="line">            length：发送数据的长度</span><br><span class="line">            <span class="built_in">address</span>：接收端的IP</span><br><span class="line">            port：接收端的端口号</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="3、TCP通信（重点）"><a href="#3、TCP通信（重点）" class="headerlink" title="3、TCP通信（重点）"></a>3、TCP通信（重点）</h3><h6 id="TCPClient"><a href="#TCPClient" class="headerlink" title="TCPClient"></a>TCPClient</h6><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：编写<span class="type">TCP</span>客户端程序</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1.</span> 创建客户端<span class="type">Socke</span>对象，与指定服务端连接</span><br><span class="line">                <span class="type">Socket</span>(<span class="type">String</span> host, int <span class="keyword">port</span>)</span><br><span class="line">                    host ：服务端IP地址</span><br><span class="line">                    <span class="keyword">port</span> ：服务端端口号</span><br><span class="line"></span><br><span class="line">        2. 得到输出流写数据</span><br><span class="line">                OutputStream  getOutputStream()</span><br><span class="line"></span><br><span class="line">        3. 得到输入流读取数据</span><br><span class="line">                InputStream   getInputStream()</span><br><span class="line"></span><br><span class="line">        4. 关闭资源</span><br><span class="line">                void  close()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端启动&quot;</span>);</span><br><span class="line">        <span class="comment">//1.创建TCP客户端，指定目的地的ip和端口</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">22222</span>); <span class="comment">//127.0.0.1代表本机</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.往服务端发送数据(得到输出流写数据)</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        out.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        socket.shutdownOutput(); <span class="comment">//发出输出结束的标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.接收服务端的回复信息(得到输入流读取数据)</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> in.read(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务端的回复：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,length));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.关闭资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="TCPServer"><a href="#TCPServer" class="headerlink" title="TCPServer"></a>TCPServer</h6><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：编写<span class="type">TCP</span>服务端程序</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1.</span> 创建<span class="type">TCP</span>服务端<span class="type">ServerSocket</span>对象。</span><br><span class="line">                 <span class="type">ServerSocket</span>(int <span class="keyword">port</span>)</span><br><span class="line">        2. 监听客户端的连接，连接成功返回一个Socket对象。</span><br><span class="line">                 Socket   accept()</span><br><span class="line">        3.得到输入流读取数据。</span><br><span class="line">                 InputStream   getInputStream()</span><br><span class="line">        4.得到输出流写数据。</span><br><span class="line">                 OutputStream  getOutputStream()</span><br><span class="line">        5.关闭资源</span><br><span class="line">                 void  close()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端启动&quot;</span>);</span><br><span class="line">        <span class="comment">//创建服务端ServerSocket</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">22222</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//和客户端建立连接（TCP通信的建立）</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        System.out.println(socket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收客户端的消息（读取数据）</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=in.read(array))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端的消息：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回复客户端（写出数据）</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        out.write(<span class="string">&quot;大家好&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        <span class="comment">//ss.close(); //通常不关闭</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、文件上传-重要"><a href="#4、文件上传-重要" class="headerlink" title="4、文件上传(重要)"></a>4、文件上传(重要)</h3><p>需要自己看代码</p>
<h3 id="5、模拟网站服务器"><a href="#5、模拟网站服务器" class="headerlink" title="5、模拟网站服务器"></a>5、模拟网站服务器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:模拟网站服务器</span><br><span class="line"></span><br><span class="line">    网站服务器的核心?</span><br><span class="line">        网站服务器底层使用TCP服务端,浏览器访问服务器,服务器就给浏览器返回数据</span><br><span class="line"></span><br><span class="line">    原理：</span><br><span class="line">    1.浏览器 (TCP客户端)</span><br><span class="line">        在浏览器的地址栏中输入: http://服务器域名或IP:端口号</span><br><span class="line">        我们现在输入: http://127.0.0.1:9999</span><br><span class="line"></span><br><span class="line">        http:// 是超文本传输协议,可以传输文字图片,视频等等资源</span><br><span class="line">        127.0.0.1: 服务器的IP地址（访问本机自己）</span><br><span class="line">        9999: 服务器的端口号</span><br><span class="line"></span><br><span class="line">    2.服务器 (TCP服务端)</span><br><span class="line">        网站服务器相当于TCP服务端，网站服务器要将数据传输给浏览器，本质就是TCP传输数据。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务端</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收浏览器客户端的请求</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，要发送过去的数据 格式和特点</span></span><br><span class="line">        out.write(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">&quot;Content-Type:text/html\r\n&quot;</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把index.html页面返回给浏览器</span></span><br><span class="line">        <span class="comment">//读取index.html页面</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day12\\web\\index.html&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bys = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、Commons-io工具"><a href="#6、Commons-io工具" class="headerlink" title="6、Commons_io工具"></a>6、Commons_io工具</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：了解 <span class="variable">Commons</span><span class="operator">-</span><span class="variable">io</span>的常用功能</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span><span class="variable">FileUtils</span>操作文件或文件夹</span><br><span class="line">        拷贝文件：<span class="variable">copyFile</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">srcFile</span><span class="operator">,</span> <span class="built_in">File</span> <span class="variable">destFile</span><span class="punctuation">)</span></span><br><span class="line">        拷贝文件夹：<span class="variable">copyDirectoryToDirectory</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">srcDir</span><span class="operator">,</span> <span class="built_in">File</span> <span class="variable">destDir</span><span class="punctuation">)</span> 文件夹里面的子文件夹也会一起拷贝</span><br><span class="line">        删除文件夹<span class="operator">:</span> <span class="variable">deleteDirectory</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">directory</span><span class="punctuation">)</span> 注意：整个文件夹都会直接删除，不管里面是否有内容</span><br><span class="line">        获取文件或文件夹大小：<span class="variable">long</span> <span class="variable">sizeOf</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">file</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span><span class="variable">FileUtils</span>读取文件</span><br><span class="line">        读取文件内容为字符串：<span class="built_in">String</span> <span class="variable">readFileToString</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">file</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">encoding</span><span class="punctuation">)</span></span><br><span class="line">        将文件内容按行读取成字符串集合：<span class="built_in">List</span><span class="operator">&lt;</span><span class="built_in">String</span><span class="operator">&gt;</span> <span class="variable">readLines</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">file</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">encoding</span><span class="punctuation">)</span></span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//拷贝文件</span></span><br><span class="line">        FileUtils.copyFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\test.jpg&quot;</span>),<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12\\web\\test.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拷贝文件夹</span></span><br><span class="line">        FileUtils.copyDirectoryToDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12&quot;</span>),<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件夹</span></span><br><span class="line">        <span class="comment">//注意：整个文件夹都会直接删除，不管里面是否有内容</span></span><br><span class="line">        FileUtils.deleteDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\t_day12&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件或文件夹大小</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> FileUtils.sizeOf(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12&quot;</span>));</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取文件内容为字符串  readFileToString(文件对象,编码)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> FileUtils.readFileToString(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12\\web\\gbk_file.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将文件内容按行读取成字符串集合：List&lt;String&gt; readLines(文件对象,编码)</span></span><br><span class="line">        List&lt;String&gt; list = FileUtils.readLines(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day12\\web\\gbk_file.txt&quot;</span>), <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、扩展NIO"><a href="#7、扩展NIO" class="headerlink" title="7、扩展NIO"></a>7、扩展NIO</h3><h5 id="7-1-BIO"><a href="#7-1-BIO" class="headerlink" title="7.1 BIO"></a>7.1 BIO</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>解决阻塞办法：在获取客户端连接后，使用多线程，一个socket对应一个线程</span><br><span class="line"><span class="regexp">//</span>缺点：如果同时连接的客户太多，，会造成线程频繁创建，系统开销较大</span><br></pre></td></tr></table></figure>

<h5 id="7-2-NIO"><a href="#7-2-NIO" class="headerlink" title="7.2 NIO"></a>7.2 NIO</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NIO服务端：</span></span><br><span class="line"><span class="comment">    1.使用Selector多路复用器，监听每个客户端的请求事件。</span></span><br><span class="line"><span class="comment">    2.服务端不会阻塞等待某个客户端。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    NIO 有对应的框架netty</span></span><br><span class="line"><span class="comment">        tomcat服务器底层也是NIO</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="8、单元测试"><a href="#8、单元测试" class="headerlink" title="8、单元测试"></a>8、单元测试</h3>]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>021-java语法加强之IO流加强</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/021-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BIO%E6%B5%81%E5%8A%A0%E5%BC%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、字节缓冲流"><a href="#1、字节缓冲流" class="headerlink" title="1、字节缓冲流"></a>1、字节缓冲流</h3><h5 id="1-1-字节缓冲输入流"><a href="#1-1-字节缓冲输入流" class="headerlink" title="1.1 字节缓冲输入流"></a>1.1 字节缓冲输入流</h5><h6 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h6><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：学习字节缓冲流的使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     1.字节缓冲输入流：</span></span><br><span class="line"><span class="comment">        BufferedInputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     2.特点：</span></span><br><span class="line"><span class="comment">        缓冲流以Buffered开头，用法和FileInputStream一样。</span></span><br><span class="line"><span class="comment">        缓冲流底层使用数组作为缓冲区，能提高读写的效率。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     3.构造方法：</span></span><br><span class="line"><span class="comment">        BufferedInputStream(InputStream in)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\a.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环，一次读一个数组</span></span><br><span class="line">    <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=bis.read(array))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//会把基本流也关闭</span></span><br><span class="line">    bis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-字节缓冲输出流"><a href="#1-2-字节缓冲输出流" class="headerlink" title="1.2 字节缓冲输出流"></a>1.2 字节缓冲输出流</h5><h6 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h6><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：学习字节缓冲流的使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     1.字节缓冲输出流：</span></span><br><span class="line"><span class="comment">        BufferedOutputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     2.特点：</span></span><br><span class="line"><span class="comment">        缓冲流以Buffered开头，用法和FileOutputStream一样。</span></span><br><span class="line"><span class="comment">        缓冲流底层使用数组作为缓冲区，能提高读写的效率。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     3.构造方法：</span></span><br><span class="line"><span class="comment">        BufferedOutputStream(OutputStream out)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//ctrl + q 查看方法的参数</span></span><br><span class="line">    <span class="comment">//BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;t_day11\\abc\\a.txt&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day11\\abc\\a.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//追加写出</span></span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">    bos.write(<span class="string">&quot;黑马程序员&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意：缓冲流一定要关闭或刷新，否则数据只在缓冲区，不会写出到文件</span></span><br><span class="line">    bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、字符缓冲流"><a href="#2、字符缓冲流" class="headerlink" title="2、字符缓冲流"></a>2、字符缓冲流</h3><h5 id="2-1-字符输入缓冲流"><a href="#2-1-字符输入缓冲流" class="headerlink" title="2.1 字符输入缓冲流"></a>2.1 字符输入缓冲流</h5><h6 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h6><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：学习字符缓冲流的使用</span><br><span class="line"></span><br><span class="line">    字符输入缓冲流：BufferedReader</span><br><span class="line"></span><br><span class="line">    特点：</span><br><span class="line">        继承自Reader，用法和FileReader一样。</span><br><span class="line">        底层使用缓冲数组读取数据，效率高。</span><br><span class="line"></span><br><span class="line">    构造方法：</span><br><span class="line">         BufferedReader(Reader in)</span><br><span class="line"></span><br><span class="line">    特有方法：</span><br><span class="line">        String readLine() 读取一行数据，读取不到返回<span class="literal">null</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day11\\abc\\b.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读数据</span></span><br><span class="line">        <span class="comment">//方式1：循环读写字符数组</span></span><br><span class="line">        <span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=br.read(array))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println( <span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：循环，按行读取数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-字符输出缓冲流"><a href="#2-2-字符输出缓冲流" class="headerlink" title="2.2 字符输出缓冲流"></a>2.2 字符输出缓冲流</h5><h6 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h6><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：学习字符缓冲流的使用</span><br><span class="line"></span><br><span class="line">    字符输出缓冲流：BufferedWriter</span><br><span class="line"></span><br><span class="line">    特点：</span><br><span class="line">        继承自Reader，用法和FileWriter一样。</span><br><span class="line">        底层使用缓冲数组读取数据，效率高。</span><br><span class="line"></span><br><span class="line">    构造方法：</span><br><span class="line">        BufferedWriter(Writer out)</span><br><span class="line"></span><br><span class="line">    特有方法：</span><br><span class="line">        void newLine() 写一个换行符，相当于写出<span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">    注意：</span><br><span class="line">        使用BufferedWriter写出数据后，记得调用<span class="built_in">flush</span>或者<span class="built_in">close</span>。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;t_day11\\abc\\b.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写字符</span></span><br><span class="line">        bw.write(<span class="string">&quot;传智教育1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//特有的功能</span></span><br><span class="line">        bw.newLine(); <span class="comment">//换行</span></span><br><span class="line"></span><br><span class="line">        bw.write(<span class="string">&quot;传智教育2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、文件解析练习"><a href="#3、文件解析练习" class="headerlink" title="3、文件解析练习"></a>3、文件解析练习</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">需求：</span><br><span class="line">    解析出“用户列表.txt”文件中的用户姓名和年龄，封装成<span class="keyword">User</span>对象，保存到集合中，并对年龄进行升序排序。</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">    创建字符输入缓冲流BufferedReader。</span><br><span class="line">    定义<span class="keyword">User</span>类，提供name和age属性。</span><br><span class="line">    循环读取一行数据，将每行数据切割（split）出姓名和年龄，每行数据对应一个<span class="keyword">User</span>对象。</span><br><span class="line">    创建ArrayList&lt;<span class="keyword">User</span>&gt;集合，存储<span class="keyword">User</span>对象。</span><br><span class="line">    使用Collections工具类实现集合元素排序，按照年龄降序排序。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day11\\abc\\用户列表.txt&quot;</span>));</span><br><span class="line">        ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环按行读取 readLine()</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//切割</span></span><br><span class="line">            String[] array = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(array[<span class="number">0</span>], Integer.parseInt(array[<span class="number">1</span>]));</span><br><span class="line">            <span class="comment">//添加到集合中</span></span><br><span class="line">            list.add(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照年龄降序排序</span></span><br><span class="line">        Collections.sort(list, (o1, o2) -&gt; o2.getAge() - o1.getAge());</span><br><span class="line"></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、缓冲流的效率对比"><a href="#4、缓冲流的效率对比" class="headerlink" title="4、缓冲流的效率对比"></a>4、缓冲流的效率对比</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标:对比四种字节流复制文件的效率</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    四种方式复制:</span></span><br><span class="line"><span class="comment">        基本流读取一个字节  29699</span></span><br><span class="line"><span class="comment">        缓冲流读取一个字节  53</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        基本流读取一个字节数组  41</span></span><br><span class="line"><span class="comment">        缓冲流读取一个字节数组  16</span></span><br><span class="line"><span class="comment">    要求：</span></span><br><span class="line"><span class="comment">        把 高清无码.flv 文件拷贝到 D:\\MyTest中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     结论1：读写的时候，一定要使用数组去操作，能明显提高效率</span></span><br><span class="line"><span class="comment">     结论2：通常缓冲流效率更高，如果基本流的数组容量设置大一些，效率也接近缓冲流</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//测试运行效率</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//test01();</span></span><br><span class="line">        <span class="comment">//test02();</span></span><br><span class="line">        test03();</span><br><span class="line">        <span class="comment">//test04();</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本流读取一个字节</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//读</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\高清无码.flv&quot;</span>);</span><br><span class="line">        <span class="comment">//写</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\MyTest\\高清无码1.flv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基本流一次读写一个字节</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓冲流读取一个字节</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\高清无码.flv&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\MyTest\\高清无码2.flv&quot;</span>);</span><br><span class="line">        <span class="comment">//缓冲输入流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//缓冲输出流</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//缓冲流一次读写一个字节</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b=bis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只需要关闭缓冲流就行，基本流会在缓冲流里面进行关闭</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本流读取一个字节数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//读</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\高清无码.flv&quot;</span>);</span><br><span class="line">        <span class="comment">//写</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\MyTest\\高清无码3.flv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基本流一次读写一个字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓冲流读取一个字节数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\高清无码.flv&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\MyTest\\高清无码4.flv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);<span class="comment">//读</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);<span class="comment">//写</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//缓冲流一次读写一个字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(buf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5、字符流读取字符乱码问题"><a href="#5、字符流读取字符乱码问题" class="headerlink" title="5、字符流读取字符乱码问题"></a>5、字符流读取字符乱码问题</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：了解字符流读取字符的乱码问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    IDEA中默认使用UTF-8编码，如果在IDEA中读取其他编码的文件，就容易乱码。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day11\\abc\\gbk_file.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chs = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、转换流"><a href="#6、转换流" class="headerlink" title="6、转换流"></a>6、转换流</h3><h5 id="6-1-输入转换流"><a href="#6-1-输入转换流" class="headerlink" title="6.1 输入转换流"></a>6.1 输入转换流</h5><h6 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h6><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：学习<span class="variable">InputStreamReader</span>转换流读取数据</span><br><span class="line"></span><br><span class="line">    <span class="variable">InputStreamReader</span>：</span><br><span class="line">        输入转换流，继承<span class="variable">Reader</span>。</span><br><span class="line">        可以使用平台默认或者指定编码读取字符。</span><br><span class="line"></span><br><span class="line">    构造方法：</span><br><span class="line">        <span class="variable">InputStreamReader</span><span class="punctuation">(</span><span class="built_in">InputStream</span> <span class="variable">in</span><span class="punctuation">)</span> ：使用默认编码读取文件（<span class="variable">IDEA</span>默认是<span class="variable">UTF</span><span class="operator">-</span><span class="number">8</span>编码）</span><br><span class="line"></span><br><span class="line">        <span class="variable">InputStreamReader</span><span class="punctuation">(</span><span class="built_in">InputStream</span> <span class="variable">in</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">charsetName</span><span class="punctuation">)</span>：使用指定编码读取文件</span><br><span class="line">            <span class="variable">charsetName</span>参数值可以是 <span class="variable">GBK</span>、<span class="variable">UTF</span><span class="operator">-</span><span class="number">8</span>等字符编码，大小写都行</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//InputStreamReader 字符流</span></span><br><span class="line">        <span class="comment">//要读取的内容是什么编码，就传什么编码的名字  GBK  UTF-8</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\gbk_file.txt&quot;</span>), <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环读取</span></span><br><span class="line">        <span class="type">char</span>[] chs = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-2-输出转换流"><a href="#6-2-输出转换流" class="headerlink" title="6.2 输出转换流"></a>6.2 输出转换流</h5><h6 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h6><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：学习<span class="variable">OutputStreamWriter</span>写出字符数据</span><br><span class="line"></span><br><span class="line">    <span class="variable">OutputStreamWriter</span>：</span><br><span class="line">        输出转换流， 继承<span class="variable">Writer</span>。</span><br><span class="line">        可以使用平台默认或者指定编码写出字符。</span><br><span class="line"></span><br><span class="line">    构造方法：</span><br><span class="line">        <span class="variable">OutputStreamWriter</span><span class="punctuation">(</span><span class="built_in">OutputStream</span> <span class="variable">out</span><span class="punctuation">)</span> ：使用默认编码写出字符（<span class="variable">IDEA</span>默认是<span class="variable">UTF</span><span class="operator">-</span><span class="number">8</span>）。</span><br><span class="line"></span><br><span class="line">        <span class="variable">OutputStreamWriter</span><span class="punctuation">(</span><span class="built_in">OutputStream</span> <span class="variable">out</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">charsetName</span><span class="punctuation">)</span>：使用指定编码写出字符。</span><br><span class="line">                    <span class="variable">charsetName</span>参数值可以是 <span class="variable">GBK</span>、<span class="variable">UTF</span><span class="operator">-</span><span class="number">8</span>等字符编码，大小写都行。</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出转换流  字符流</span></span><br><span class="line">        <span class="comment">//使用指定的编码格式，保存数据到文件中</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day11\\abc\\c.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"></span><br><span class="line">        osw.write(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line"></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-3-文件编码转换练习"><a href="#6-3-文件编码转换练习" class="headerlink" title="6.3 文件编码转换练习"></a>6.3 文件编码转换练习</h5><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：练习文件的编码转换</span><br><span class="line"></span><br><span class="line">    需求：读取GBK编码的文本文件gbk_file.txt，转换为UTF<span class="string">-8</span>编码的文本文件utf8_file.txt。</span><br><span class="line"></span><br><span class="line">    分析：</span><br><span class="line">        使用GBK编码读取文件内容。</span><br><span class="line">        使用UTF<span class="string">-8</span>编码写字符数据到文件。</span><br><span class="line">        循环读写。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//使用GBK编码读取文件内容。</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\gbk_file.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用UTF-8编码保存文件。</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day11\\abc\\utf8_file.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环读写。</span></span><br><span class="line">        <span class="type">char</span>[] chs = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、对象流"><a href="#7、对象流" class="headerlink" title="7、对象流"></a>7、对象流</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标<span class="operator">:</span>使用对象输出流将内存中的对象写到文件中。</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="variable">ObjectOutputStream</span> <span class="punctuation">(</span>对象输出流<span class="operator">/</span>序列化流<span class="punctuation">)</span></span><br><span class="line">                继承自<span class="built_in">OutputStream</span>，可以将内存中的对象数据写出到文件中。</span><br><span class="line"></span><br><span class="line">        <span class="number">1.</span>构造方法<span class="operator">:</span> <span class="variable">ObjectOutputStream</span><span class="punctuation">(</span><span class="built_in">OutputStream</span> <span class="variable">out</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>序列化对象<span class="punctuation">(</span>将对象持久化保存<span class="punctuation">)</span><span class="operator">:</span> <span class="variable">writeObject</span><span class="punctuation">(</span><span class="variable">Object</span> <span class="variable">obj</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>要求：对象所属的类要实现 <span class="variable">Serializable</span>接口</span><br><span class="line"></span><br><span class="line">        <span class="number">4.</span><span class="variable">transient</span>关键字：被修饰的成员变量不会被序列化</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要序列化对象，类要实现Serializable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//为当前类加一个唯一序列化标记（相当于该类的身份证）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8210835191788987208L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//transient不让成员变量序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day11\\abc\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//序列化对象(将对象持久化保存)</span></span><br><span class="line">        oos.writeObject(p);</span><br><span class="line"></span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h6><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:使用对象输入流将文件中的对象读入程序中</span><br><span class="line"></span><br><span class="line"><span class="attribute">小结</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">ObjectInputStream(对象输入流/反序列化流)</span></span><br><span class="line"><span class="attribute">        把写到本地文件中的对象读到内存中。</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    1.构造方法</span><span class="punctuation">:</span> <span class="string">ObjectInputStream(InputStream in)</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">2.反序列化(将对象读回内存)</span><span class="punctuation">:</span> <span class="string"> Object readObject()</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day11\\abc\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//反序列化对象(将对象读回内存)</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> ois.readObject(); <span class="comment">//EOFException 读取不到对象，报异常</span></span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、打印流"><a href="#8、打印流" class="headerlink" title="8、打印流"></a>8、打印流</h3><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:了解打印流的使用</span><br><span class="line"></span><br><span class="line"><span class="attribute">小结</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">1.打印流分类</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">字节打印流</span><span class="punctuation">:</span> <span class="string">PrintStream</span></span><br><span class="line">        <span class="attribute">字符打印流</span><span class="punctuation">:</span> <span class="string">PrintWriter</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">2.PrintStream构造方法</span><span class="punctuation">:</span></span><br><span class="line">            <span class="attribute">PrintStream(String fileName) ：根据字符串路径指定打印目的地。</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    3.重要方法</span><span class="punctuation">:</span></span><br><span class="line">            print(任意类型数据) 打印数据,不换行</span><br><span class="line">            println(任意类型数据) 打印数据,换行</span><br><span class="line">            原样输出，参数写什么就打印什么</span><br><span class="line"></span><br><span class="line">    说明：PrintWriter和PrintStream用法几乎一样。</span><br><span class="line">         只不过PrintStream是操作字节，PrintWriter是操作字符。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印流</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;t_day11\\abc\\d.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存数据到文件，并换行</span></span><br><span class="line">        <span class="comment">//参数传递什么，就保存什么</span></span><br><span class="line">        ps.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        ps.println(<span class="number">666</span>);</span><br><span class="line">        ps.println(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、属性集"><a href="#9、属性集" class="headerlink" title="9、属性集"></a>9、属性集</h3><h5 id="9-1-Properties"><a href="#9-1-Properties" class="headerlink" title="9.1 Properties"></a>9.1 Properties</h5><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">目标<span class="operator">:</span>掌握<span class="built_in">Properties</span>作为集合的使用</span><br><span class="line"></span><br><span class="line">小结<span class="operator">:</span></span><br><span class="line">    <span class="built_in">Properties</span>作为<span class="built_in">Map</span>集合的特有方法<span class="operator">:</span></span><br><span class="line">        <span class="variable">Object</span> <span class="variable">setProperty</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">key</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">value</span><span class="punctuation">)</span> ：添加键值对，键和值都是字符串类型。</span><br><span class="line">        <span class="built_in">String</span> <span class="variable">getProperty</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">key</span><span class="punctuation">)</span> ：通过键获取值，获取不到返回<span class="variable">null</span></span><br><span class="line">        <span class="variable">stringPropertyNames</span><span class="punctuation">(</span><span class="punctuation">)</span> 获取所有的属性名，遍历属性名获取属性值</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            属性</span></span><br><span class="line"><span class="comment">            属性名 属性值</span></span><br><span class="line"><span class="comment">            name  张三</span></span><br><span class="line"><span class="comment">            age   18</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            用户名  system</span></span><br><span class="line"><span class="comment">            密码    123456</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//setProperty  添加键值对，键和值都是字符串类型。</span></span><br><span class="line">        p.setProperty(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;广州&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getProperty(String key)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历  stringPropertyNames 获取所有的属性名</span></span><br><span class="line">        Set&lt;String&gt; keys = p.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> p.getProperty(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;,&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="9-2-store-保存文件"><a href="#9-2-store-保存文件" class="headerlink" title="9.2 store 保存文件"></a>9.2 store 保存文件</h5><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">目标<span class="operator">:</span>掌握<span class="built_in">Properties</span>保存和加载文件的方式</span><br><span class="line"></span><br><span class="line">小结<span class="operator">:</span></span><br><span class="line">        <span class="number">1.</span>将<span class="built_in">Properties</span>中的键值对数据保存到文件中：</span><br><span class="line">            <span class="variable">void</span> <span class="variable">store</span><span class="punctuation">(</span><span class="variable">Writer</span> <span class="variable">writer</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">comments</span><span class="punctuation">)</span> ：第一个参数为字符输出流，第二个参数为写到文件的注释。</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>加载文件数据到<span class="built_in">Properties</span>集合中：</span><br><span class="line">            <span class="variable">void</span> <span class="variable">load</span><span class="punctuation">(</span><span class="variable">Reader</span> <span class="variable">reader</span><span class="punctuation">)</span> ： 参数为字符输入流</span><br><span class="line"><span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        p.setProperty(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;广州&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把属性信息保存到文件中  store</span></span><br><span class="line">        p.store(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;t_day11\\abc\\info.txt&quot;</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="9-3-load-加载文件"><a href="#9-3-load-加载文件" class="headerlink" title="9.3 load 加载文件"></a>9.3 load 加载文件</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加载文件数据到Properties集合中：</span></span><br><span class="line"><span class="comment">    void load(Reader reader) ： 参数为字符输入流</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//load(Reader reader) 加载配置信息到集合中</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        p.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day11\\abc\\用户列表.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = p.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> p.getProperty(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;,&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="10、IO异常处理"><a href="#10、IO异常处理" class="headerlink" title="10、IO异常处理"></a>10、IO异常处理</h3><figure class="highlight golo"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:掌握JDK7之后IO异常的处理</span><br><span class="line"></span><br><span class="line">    小结:</span><br><span class="line">        <span class="number">1.</span> JDK7之前处理IO异常的方式：</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                可能出现异常的代码;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (异常类名 变量名) &#123;</span><br><span class="line">                异常处理代码;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                关闭流，释放资源</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span> JDK7开始处理IO异常的方式：（推荐）</span><br><span class="line">            <span class="keyword">try</span> (创建流的代码) &#123;</span><br><span class="line">                可能出现异常的代码;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (异常类名 变量名) &#123;</span><br><span class="line">                异常处理代码;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            好处：会自动关闭流，减少代码量</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="comment">/* FileWriter fw = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            fw = new FileWriter(&quot;t_day11\\abc\\test.txt&quot;);</span></span><br><span class="line"><span class="comment">            fw.write(&quot;黑马&quot;);</span></span><br><span class="line"><span class="comment">            //int i = 1/0;</span></span><br><span class="line"><span class="comment">        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;出现异常：&quot;+ e.toString());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;finally &#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                if(fw!=null) &#123;</span></span><br><span class="line"><span class="comment">                    fw.close(); //一定要执行的代码</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//try() 小括号可以自动释放资源，前提要有close的方法（类要实现Closeable接口）</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;t_day11\\abc\\test.txt&quot;</span>);</span><br><span class="line">             )&#123;</span><br><span class="line">            fw.write(<span class="string">&quot;黑马12&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常：&quot;</span>+ e.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="11、装饰者模式"><a href="#11、装饰者模式" class="headerlink" title="11、装饰者模式"></a>11、装饰者模式</h3><h6 id="Drive"><a href="#Drive" class="headerlink" title="Drive"></a>Drive</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Drive</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Car"><a href="#Car" class="headerlink" title="Car"></a>Car</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Drive</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;行驶功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;刹车功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Tank"><a href="#Tank" class="headerlink" title="Tank"></a>Tank</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//装饰对象：增强原来对象的功能，在原来的基础上扩展功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tank</span> <span class="keyword">implements</span> <span class="title class_">Drive</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tank</span><span class="params">(Car car)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置的功能&quot;</span>);</span><br><span class="line">        car.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;后置的功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        car.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fire</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火力覆盖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h6><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"><span class="section">目标:学习装饰设计模式</span></span><br><span class="line"></span><br><span class="line"><span class="section">小结:</span></span><br><span class="line">    装饰设计模式有几个角色：</span><br><span class="line">        1.共同的接口</span><br><span class="line">        2.原目标类</span><br><span class="line">        3.装饰者类</span><br><span class="line"></span><br><span class="line">    装饰设计模式的作用：</span><br><span class="line">        可以原本类的功能增强和扩展类的功能</span><br><span class="line"></span><br><span class="line">     增强的流都是使用了装饰者模式，比如 BufferedReader</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Tank</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tank</span>(<span class="keyword">new</span> <span class="title class_">Car</span>());</span><br><span class="line">        t.run();</span><br><span class="line">        t.stop();</span><br><span class="line">        t.fire();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//装饰者模式</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">        br.read(); <span class="comment">//扩展原来的FileReader功能</span></span><br><span class="line">        br.readLine(); <span class="comment">//新增的功能</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>020-java语法加强之IO流基础</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/020-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BIO%E6%B5%81%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、File-类"><a href="#1、File-类" class="headerlink" title="1、File 类"></a>1、File 类</h3><h5 id="1-1-File-的构造方法"><a href="#1-1-File-的构造方法" class="headerlink" title="1.1 File 的构造方法"></a>1.1 File 的构造方法</h5><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">目标：掌握<span class="built_in">File</span>类的构造方法</span><br><span class="line"></span><br><span class="line"><span class="built_in">File</span>构造方法<span class="operator">:</span></span><br><span class="line">    <span class="built_in">File</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">path</span><span class="punctuation">)</span> 根据<span class="variable">path</span>路径创建<span class="built_in">File</span>对象，表示文件夹或者文件。</span><br><span class="line">    <span class="built_in">File</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">parent</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">child</span><span class="punctuation">)</span> 通过父路径和子路径创建<span class="built_in">File</span>对象</span><br><span class="line">    <span class="built_in">File</span><span class="punctuation">(</span><span class="built_in">File</span> <span class="variable">parent</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">child</span><span class="punctuation">)</span> 使用<span class="built_in">File</span>对象表示父路径，字符串表示子路径，创建新的<span class="variable">Filed</span>对象。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//File(String pathname)</span></span><br><span class="line">     	<span class="comment">//磁盘上文件或者文件夹的地址（盘符一定要正确，文件夹或者文件可以存在或者不存在）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line">    	<span class="comment">//磁盘上文件或者文件夹的地址（盘符一定要正确，文件夹或者文件可以存在或者不存在）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\aaa&quot;</span>); </span><br><span class="line">    	<span class="comment">//磁盘上文件或者文件夹的地址（盘符一定要正确，文件夹或者文件可以存在或者不存在）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/aaa&quot;</span>); </span><br><span class="line"></span><br><span class="line">		<span class="comment">//磁盘上文件或者文件夹的地址（盘符一定要正确，文件夹或者文件可以存在或者不存在）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\test.jpg&quot;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(String parent, String child) 通过父路径和子路径创建File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>,<span class="string">&quot;test.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(File parent, String child) 使用File对象表示父路径，字符串表示子路径，创建新的File对象。</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(f1,<span class="string">&quot;test.jpg&quot;</span>);</span><br><span class="line">        System.out.println(f6);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-绝对路径和相对路径"><a href="#1-2-绝对路径和相对路径" class="headerlink" title="1.2 绝对路径和相对路径"></a>1.2 绝对路径和相对路径</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：理解绝对路径和相对路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    绝对路径：从盘符开始。</span></span><br><span class="line"><span class="comment">    相对路径：IDEA中是从项目路径开始。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="comment">//绝对路径：直接以盘符开头 （完整路径）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\javacode\\javase174\\t_day10\\abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相对路径：直接以文件夹或者文件名开头</span></span><br><span class="line">        <span class="comment">//在idea中，如果使用相对路径，会默认加上工程的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day10\\abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用相对路径表示aaa.txt ：IDEA中是从项目路径开始。</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day10\\src\\aaa.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(f1.getAbsolutePath());</span><br><span class="line">        System.out.println(f2.getAbsolutePath());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-创建文件或文件夹"><a href="#1-3-创建文件或文件夹" class="headerlink" title="1.3 创建文件或文件夹"></a>1.3 创建文件或文件夹</h5><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:掌握File创建文件或文件夹</span><br><span class="line"></span><br><span class="line">    File类的创建功能:</span><br><span class="line">       <span class="built_in"> boolean</span> createNewFile() 创建新文件, 创建成功返<span class="built_in">回true</span>，如果文件已存在，则无法创建,返<span class="built_in">回false</span>。</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> boolean</span> mkdir() 创建单级文件夹, 创建成功返<span class="built_in">回true</span>.</span><br><span class="line">                        如果文件夹已存在，则无法创建,返<span class="built_in">回false</span>。（如果父目录不存在，也无法创建）</span><br><span class="line">                        （其实就是创建路径的最后一层）</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> boolean</span> mkdirs() 创建一个多级文件夹, 创建成功返<span class="built_in">回true</span>。</span><br><span class="line">                         如果文件夹已存在，则无法创建，返<span class="built_in">回false</span>。（如果父目录不存在，会一并创建）</span><br><span class="line"></span><br><span class="line">    注意:</span><br><span class="line">        Windows中文件名不区分大小写。</span><br><span class="line">        Java中路径斜杠支持\\ 或者 // 或者 / 写法。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//在D:\MyTest 文件夹下， 创建 hello.txt 文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件不存在，可以直接创建，返回true，文件已存在，不会创建</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> f1.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在D:\MyTest 文件夹下，创建 aaa文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\aaa\\bbb&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> f2.mkdir(); <span class="comment">//创建最后一级（保证最后一级之前的文件夹都存在才能成功）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b1 = &quot;</span> + b1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建多级文件夹</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> f2.mkdirs();</span><br><span class="line">        System.out.println(<span class="string">&quot;b2 = &quot;</span> + b2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-4-删除文件或空文件夹"><a href="#1-4-删除文件或空文件夹" class="headerlink" title="1.4 删除文件或空文件夹"></a>1.4 删除文件或空文件夹</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:掌握<span class="keyword">File</span>删除功能</span><br><span class="line"></span><br><span class="line">    <span class="keyword">File</span>删除功能：</span><br><span class="line">        boolean delete() 删除该<span class="keyword">File</span>对象表示的文件或文件夹。</span><br><span class="line"></span><br><span class="line">    注意:</span><br><span class="line">        <span class="number">1</span>.删除不走回收站</span><br><span class="line">        <span class="number">2</span>.如果删除的是文件，直接删除。</span><br><span class="line">        <span class="number">3</span>.如果删除的是文件夹，文件夹如果不为空，则无法删除。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\aa.docx&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f1.delete() = &quot;</span> + f1.delete());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件夹：删除空文件夹才能成功</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f2.delete() = &quot;</span> + f2.delete());</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\aaa&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f3.delete() = &quot;</span> + f3.delete());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-5-File类的判断"><a href="#1-5-File类的判断" class="headerlink" title="1.5 File类的判断"></a>1.5 File类的判断</h5><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    File类的判断功能：</span><br><span class="line">       <span class="built_in"> boolean</span> isDirectory() 判断是否是文件夹,如果是返<span class="built_in">回true</span></span><br><span class="line">       <span class="built_in"> boolean</span> isFile() 判断是否是文件,如果是返<span class="built_in">回true</span></span><br><span class="line">       <span class="built_in"> boolean</span><span class="built_in"> exists</span>() 判断文件或文件夹是否存在，存在返<span class="built_in">回true</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f1.isDirectory() = &quot;</span> + f1.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">&quot;f1.isFile() = &quot;</span> + f1.isFile());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest\\test.jpg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f2.isDirectory() = &quot;</span> + f2.isDirectory()); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;f2.isFile() = &quot;</span> + f2.isFile());<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//断文件或文件夹是否存在，存在返回true</span></span><br><span class="line">        System.out.println(f1.exists());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-6-File类的获取"><a href="#1-6-File类的获取" class="headerlink" title="1.6 File类的获取"></a>1.6 File类的获取</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    <span class="keyword">File</span>类的获取功能：</span><br><span class="line">        <span class="keyword">String</span> getAbsolutePath() 获取<span class="keyword">File</span>对象的绝对路径(完整路径)</span><br><span class="line">        <span class="keyword">String</span> getPath() 获取创建<span class="keyword">File</span>对象时给出的路径</span><br><span class="line">        <span class="keyword">String</span> getName() 获取文件或文件夹名字（路径中最后一个斜杠后面的内容）</span><br><span class="line">        long length() 获取文件的大小，返回文件的字节数。（对文件夹无效）</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;getAbsolutePath() = &quot;</span> + f1.getAbsolutePath()); <span class="comment">//获取绝对路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getPath() = &quot;</span> + f1.getPath()); <span class="comment">//获取构造方法中传入的路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getName() = &quot;</span> + f1.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件的大小（单位是字节）对文件夹操作无效</span></span><br><span class="line">        System.out.println(f1.length());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-7-File类的遍历"><a href="#1-7-File类的遍历" class="headerlink" title="1.7 File类的遍历"></a>1.7 File类的遍历</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">目标:掌握<span class="keyword">File</span>类的遍历功能</span><br><span class="line"></span><br><span class="line">    <span class="keyword">File</span>遍历功能:</span><br><span class="line">        <span class="keyword">File</span>[] listFiles()： 遍历文件夹中的内容，封装成<span class="keyword">File</span>数组。</span><br><span class="line"></span><br><span class="line">    注意:</span><br><span class="line">        只有<span class="keyword">File</span>对象代表文件夹，才能调用listFiles()。</span><br><span class="line">        如果<span class="keyword">File</span>对象代表文件，调用listFiles()，得到的结果是null。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\MyTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件夹的所有结构（文件或者文件夹）</span></span><br><span class="line">        File[] files = f.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-8-递归"><a href="#1-8-递归" class="headerlink" title="1.8 递归"></a>1.8 递归</h5><h6 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h6><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：理解递归的概念</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.什么是递归?</span></span><br><span class="line"><span class="comment">            递归指的是在一个方法中，自己调用自己。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.递归注意事项:</span></span><br><span class="line"><span class="comment">            1.递归调用要有结束条件。</span></span><br><span class="line"><span class="comment">            2.递归次数不能太多，否则容易有栈溢出异常。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.递归调用要有结束条件。</span></span><br><span class="line">        <span class="comment">//2.递归次数不能太多，否则容易有栈溢出异常。</span></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">5000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h6><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：掌握递归的求和案例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    需求：递归求1-n的和</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2_GetSum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> getSum(<span class="number">5</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1-5的和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          5 +  1-4的和</span></span><br><span class="line"><span class="comment">               4  +  1-3的和</span></span><br><span class="line"><span class="comment">                     3 + 1-2的和</span></span><br><span class="line"><span class="comment">                         2 + 1-1的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + getSum(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h6><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：</span></span><br><span class="line"><span class="comment">      定义一个方法 findAllJava(File dir)，遍历找出某个文件夹中的所有java文件.</span></span><br><span class="line"><span class="comment">      如果文件夹中有其他文件夹也要找出来。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_FileSearch</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;t_day10&quot;</span>);</span><br><span class="line">        findAllJava(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法 findAllJava(File dir)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findAllJava</span><span class="params">(File dir)</span>&#123;</span><br><span class="line"></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(files==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组，判断File对象是文件还是文件夹</span></span><br><span class="line">        <span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">               <span class="comment">//文件，判断是否后缀为.java格式</span></span><br><span class="line">                <span class="comment">//取出文件名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> f.getName();</span><br><span class="line">                <span class="keyword">if</span>(name.endsWith(<span class="string">&quot;.java&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//文件夹，递归调用</span></span><br><span class="line">                findAllJava(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、IO流"><a href="#2、IO流" class="headerlink" title="2、IO流"></a>2、IO流</h3><h5 id="2-1-字节流"><a href="#2-1-字节流" class="headerlink" title="2.1 字节流"></a>2.1 字节流</h5><h6 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h6><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:学习FileOutputStream类写一个字节数据</span><br><span class="line"></span><br><span class="line">    IO流写出数据的<span class="number">3</span>个步骤：</span><br><span class="line"></span><br><span class="line">        <span class="number">1</span>.创建FileOutputStream对象</span><br><span class="line">            FileOutputStream(String name) ：通过路径名创建字节输出流,将来流中的数据就会写入这个文件。</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.写数据</span><br><span class="line">            void <span class="keyword">write</span>(<span class="keyword">int</span> <span class="keyword">b</span>)： 一次写出一个字节到文件中。</span><br><span class="line">            void <span class="keyword">write</span>(byte[] <span class="keyword">b</span>)：一次写出一个字节数组到文件</span><br><span class="line">            void <span class="keyword">write</span>(byte[] <span class="keyword">b</span>, <span class="keyword">int</span> off, <span class="keyword">int</span> <span class="built_in">len</span>) ：一次写出一个字节数组一部分到文件</span><br><span class="line">                                 <span class="keyword">int</span> off ：开始索引</span><br><span class="line">                                 <span class="keyword">int</span> <span class="built_in">len</span>：长度</span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>.关闭流</span><br><span class="line">            void <span class="keyword">close</span>()</span><br><span class="line">     */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//FileOutputStream(文件地址)</span></span><br><span class="line">        <span class="comment">//不管a.txt是否存在，创建流的时候都会覆盖原文件，创建一个新的</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day10\\abc\\a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//true表示在原来文件的基础上，追加内容</span></span><br><span class="line">        <span class="comment">//FileOutputStream fos = new FileOutputStream(&quot;t_day10\\abc\\a.txt&quot;,true);</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //往a.txt文件写出一个字节</span></span><br><span class="line"><span class="comment">        fos.write(65);</span></span><br><span class="line"><span class="comment">        fos.write(66);</span></span><br><span class="line"><span class="comment">        //一次写出一个字节数组到文件</span></span><br><span class="line"><span class="comment">        byte[] bys = &#123;65,66,67,68,69&#125;;</span></span><br><span class="line"><span class="comment">        fos.write(bys);</span></span><br><span class="line"><span class="comment">        //一次写出一个字节数组一部分到文件</span></span><br><span class="line"><span class="comment">        fos.write(bys,0,3);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写出3行 “黑马程序员”</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//fos.write(&quot;黑马程序员&quot;.getBytes());</span></span><br><span class="line">            <span class="comment">//fos.write(&quot;\r\n&quot;.getBytes());</span></span><br><span class="line"></span><br><span class="line">            fos.write(<span class="string">&quot;黑马程序员\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h6><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:使用FileInputStream从文件一次读取一个字节</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="number">1</span>.FileInputStream的构造方法</span><br><span class="line">            FileInputStream(<span class="keyword">String</span> name) 通过文件路径创建字节输入流对象，读取指定文件的内容。</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.FileInputStream读取一个字节的方法</span><br><span class="line">            int <span class="keyword">read</span>() ：读取流中的一个字节, 返回值就是读取到的字节数据。读不到数据，返回-<span class="number">1</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day10\\abc\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字节并返回，如果读取结束，返回-1</span></span><br><span class="line">        <span class="comment">/*int ch = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch); //97</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch); //98</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch);//99</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch); //-1*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* while (true)&#123;</span></span><br><span class="line"><span class="comment">            int ch = fis.read();</span></span><br><span class="line"><span class="comment">            if(ch!=-1)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(ch);</span></span><br><span class="line"><span class="comment">            &#125;else &#123;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环方式一次读取一个字节</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ch = fis.read()</span></span><br><span class="line"><span class="comment">            ch!=-1</span></span><br><span class="line"><span class="comment">            System.out.println(ch);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch = fis.read())!=-<span class="number">1</span> )&#123;</span><br><span class="line">            System.out.println(ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="读取字节数组"><a href="#读取字节数组" class="headerlink" title="读取字节数组"></a>读取字节数组</h6><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标:使用FileInputStream一次读取多个字节</span><br><span class="line"></span><br><span class="line">    一次读取一个字节数组，效率更高</span><br><span class="line">            int <span class="built_in">read</span>(<span class="built_in">byte</span>[] b) ：一次读取多个字节保存到数组中，并返回读取的数量，读不到数据时，返回<span class="number">-1</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day10\\abc\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*byte[] array = new byte[3];</span></span><br><span class="line"><span class="comment">        int len = fis.read(array);</span></span><br><span class="line"><span class="comment">        System.out.println( new String(array,0,len) ); //hel</span></span><br><span class="line"><span class="comment">        System.out.println(len); //3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        len = fis.read(array);</span></span><br><span class="line"><span class="comment">        System.out.println( new String(array,0,len) ); //lo</span></span><br><span class="line"><span class="comment">        System.out.println(len); //2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //读取结束，返回-1</span></span><br><span class="line"><span class="comment">        len = fis.read(array);</span></span><br><span class="line"><span class="comment">        System.out.println(len); //-1</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">//一般以1024的倍数去赋值</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=fis.read(array)) !=-<span class="number">1</span>  )&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="字节流实现文件复制案例"><a href="#字节流实现文件复制案例" class="headerlink" title="字节流实现文件复制案例"></a>字节流实现文件复制案例</h6><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    案例：文件复制</span><br><span class="line">    需求：</span><br><span class="line">        使用字节流将 <span class="string">&quot;D:\MyTest\test.jpg&quot;</span> 复制到 <span class="string">&quot;t_day10\abc\test.jpg&quot;</span></span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1</span>.创建字节输入流，用于读取文件到程序。</span><br><span class="line">        <span class="number">2</span>.创建字节输出流，用于写出文件到磁盘。</span><br><span class="line">        <span class="number">3</span>.循环读写数据。</span><br><span class="line">        <span class="number">4</span>.关闭流。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先将磁盘的文件读进内容</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\MyTest\\test.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t_day10\\abc\\test.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=fis.read(array)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//将读取的内容写出到磁盘</span></span><br><span class="line">            fos.write(array,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="字节流中文乱码问题"><a href="#字节流中文乱码问题" class="headerlink" title="字节流中文乱码问题"></a>字节流中文乱码问题</h6><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    小结：字节流读取中文的乱码问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        因为一个中文都是多个字节，用字节流每次只能读其中的一部分，</span></span><br><span class="line"><span class="comment">        一个中文的字节可能被拆成多次读取，所以就会出现乱码问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t_day10\\abc\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=fis.read(array)) !=-<span class="number">1</span>  )&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(array,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-字符流"><a href="#2-2-字符流" class="headerlink" title="2.2 字符流"></a>2.2 字符流</h5><h6 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">目标：使用FileReader读取一个字符</span><br><span class="line"></span><br><span class="line">小结：</span><br><span class="line">    <span class="number">1.</span>字符输入流：</span><br><span class="line">        RFileReader继承了Reader，用于从文件中读取字符流。</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>FileReader构造方法：</span><br><span class="line">        FileReader(String fileName)</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span>一次读取一个字符</span><br><span class="line">         <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span></span><br><span class="line">         一次读取一个字符, 返回被读取的字符内容，读取不到时返回-<span class="number">1</span>。</span><br><span class="line">         </span><br><span class="line">    <span class="number">4.</span>一次读取多个字符：</span><br><span class="line">        <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] chs)</span></span><br><span class="line">        将读取的字符保存到<span class="type">char</span>数组中,返回读取的字符数量，读取不到返回-<span class="number">1</span>     </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符输入流</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;t_day10\\abc\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int ch = fr.read();</span></span><br><span class="line"><span class="comment">        System.out.println((char) ch);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fr.read();</span></span><br><span class="line"><span class="comment">        System.out.println((char) ch);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ch = fr.read();</span></span><br><span class="line"><span class="comment">        System.out.println(ch); //-1*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环一次读取一个字符</span></span><br><span class="line">        <span class="comment">/*int ch;</span></span><br><span class="line"><span class="comment">        while ( (ch=fr.read()) !=-1)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println((char) ch);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//重点</span></span><br><span class="line">        <span class="comment">//一次读取多个字符，把读到的内容装到字符数组，读取结束，返回-1</span></span><br><span class="line">        <span class="type">char</span>[] chs = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=fr.read(chs)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println( <span class="keyword">new</span> <span class="title class_">String</span>(chs,<span class="number">0</span>,len) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h6><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：使用FileWriter写出数据到文件</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="number">1.</span>字符输出流：</span><br><span class="line">            Writer是字符输出流的抽象父类。</span><br><span class="line">            FileWriter继承了Writer，用于从程序写出数据到文件。</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>FileWriter构造方法：</span><br><span class="line">            FileWriter(String fileName)</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>FileWriter写数据的方法：</span><br><span class="line">            void <span class="built_in">write</span>(int c) 写一个字符到流中</span><br><span class="line">            void <span class="built_in">write</span>(<span class="built_in">char</span>[] cbuf) 写入一个字符数组到流中</span><br><span class="line">            void <span class="built_in">write</span>(<span class="built_in">char</span>[] cbuf, int off, int <span class="built_in">len</span>) 写入字符数组的一部分到流中</span><br><span class="line">            void <span class="built_in">write</span>(String str) 写一个字符串到流中</span><br><span class="line">            void <span class="built_in">write</span>(String str, int off, int <span class="built_in">len</span>) 写一个字符串的一部分到流中</span><br><span class="line"></span><br><span class="line">       <span class="number">4.</span><span class="built_in">close</span>和<span class="built_in">flush</span>方法的区别</span><br><span class="line">        <span class="built_in">flush</span>(): 刷新缓冲区, <span class="built_in">flush</span>后可以再写数据。</span><br><span class="line">        <span class="built_in">close</span>(): 关闭文件,关闭文件前会自动<span class="built_in">flush</span>, <span class="built_in">close</span>后不能再写数据。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建字符输出流，每次创建一个新的文件</span></span><br><span class="line">    <span class="comment">//FileWriter fw = new FileWriter(&quot;t_day10\\abc\\c.txt&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建字符输出流，追加写入</span></span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;t_day10\\abc\\c.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FileWriter写数据的方法</span></span><br><span class="line">    <span class="comment">//写一个字符</span></span><br><span class="line">    <span class="comment">//fw.write(65);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入一个字符数组到流中</span></span><br><span class="line">    <span class="comment">//char[] array = &#123;&#x27;中&#x27;,&#x27;国&#x27;&#125;;</span></span><br><span class="line">    <span class="comment">//fw.write(array);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入字符数组的一部分到流中</span></span><br><span class="line">    <span class="comment">//fw.write(array,1,1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个字符串到流中</span></span><br><span class="line">    fw.write(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">    fw.write(<span class="string">&quot;中国&quot;</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一定要执行关闭或刷新，否则数据不会写出到文件中</span></span><br><span class="line">    fw.close();<span class="comment">//关闭流，关闭之后无法继续写数据</span></span><br><span class="line">    <span class="comment">//fw.flush(); //刷新流，可以继续写数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//fw.write(&quot;中国&quot;);</span></span><br><span class="line">    <span class="comment">//fw.flush();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>019-java语法加强之Stream流</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/019-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BStream%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、Lambda-格式"><a href="#1、Lambda-格式" class="headerlink" title="1、Lambda 格式"></a>1、Lambda 格式</h3><h5 id="1-1-格式一"><a href="#1-1-格式一" class="headerlink" title="1.1 格式一"></a>1.1 格式一</h5><figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握Lambda表达式的格式</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="number">1.</span>Lambda表达式的作用</span><br><span class="line">            简化匿名内部类</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>Lambda表达式的组成格式</span><br><span class="line">            (参数列表)</span><br><span class="line">            -&gt;</span><br><span class="line">            &#123;方法体;&#125;</span><br><span class="line"></span><br><span class="line">      Lambda表达式的省略格式：</span><br><span class="line">        <span class="number">1.</span>参数类型可以省略。</span><br><span class="line">            比如(<span class="built_in">Integer</span> o1, <span class="built_in">Integer</span> o2) 省略后:</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>如果参数有且仅有一个，参数类型和小括号都可以省略。</span><br><span class="line">            比如(<span class="built_in">String</span> s) 省略后:</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>如果代码块的语句只有一条，可以省略大括号，分号和return。</span><br><span class="line">            比如&#123;<span class="keyword">return</span> o2 - o1;&#125; 省略后:</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//将数字22,11,44,33,55添加到list集合中</span></span><br><span class="line">        Collections.addAll(list,<span class="number">22</span>,<span class="number">11</span>,<span class="number">44</span>,<span class="number">33</span>,<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对list降序排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda标准格式：简化匿名内部类（拿数据做操作）</span></span><br><span class="line">        Collections.sort(list,  (Integer o1, Integer o2) -&gt; &#123; <span class="keyword">return</span> o2 - o1;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//继续简化Lambda</span></span><br><span class="line">        <span class="comment">//1.参数类型可以省略</span></span><br><span class="line">        <span class="comment">//2.如果方法体只有一行，&#123;&#125;可以省略，return省略，;省略</span></span><br><span class="line">        Collections.sort(list,   ( o1,  o2) -&gt;  o2 - o1 );</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-格式二"><a href="#1-2-格式二" class="headerlink" title="1.2 格式二"></a>1.2 格式二</h5><figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    Lambda表达式的省略格式：</span><br><span class="line">        <span class="number">1.</span>参数类型可以省略。</span><br><span class="line">            比如(<span class="built_in">Integer</span> o1, <span class="built_in">Integer</span> o2) 省略后:</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>如果参数有且仅有一个，参数类型和小括号都可以省略。</span><br><span class="line">            比如(<span class="built_in">String</span> s) 省略后:</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>如果代码块的语句只有一条，可以省略大括号，分号和return。</span><br><span class="line">            比如&#123;<span class="keyword">return</span> o2 - o1;&#125; 省略后:</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/* Thread t = new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void run() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;线程执行了&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式表示</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;System.out.println(<span class="string">&quot;线程执行了&quot;</span>));</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、使用Lambda-的前提"><a href="#2、使用Lambda-的前提" class="headerlink" title="2、使用Lambda 的前提"></a>2、使用Lambda 的前提</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：清楚Lambda表达式的使用前提</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    小结：</span></span><br><span class="line"><span class="comment">        1.Lambda使用的前提</span></span><br><span class="line"><span class="comment">            ①.方法的参数是接口</span></span><br><span class="line"><span class="comment">            ②.接口中只能有一个抽象方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.什么是函数式接口</span></span><br><span class="line"><span class="comment">            接口中有且仅有一个抽象方法，这样的接口称为函数式接口。</span></span><br><span class="line"><span class="comment">            函数式接口可以使用<span class="doctag">@FunctionalInterface</span>注解标记。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数式接口：有且只有一个抽象方法</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//约束接口只能有一个抽象方法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Inter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda简化：1.匿名内部类，2.抽象方法只有一个</span></span><br><span class="line">        method( ()-&gt;System.out.println(<span class="string">&quot;Lambda实现&quot;</span>)  );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Inter in)</span>&#123;</span><br><span class="line">        in.test();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、获取Stream-流的两种方式"><a href="#3、获取Stream-流的两种方式" class="headerlink" title="3、获取Stream 流的两种方式"></a>3、获取Stream 流的两种方式</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握获取Stream流的<span class="number">2</span>种方式</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        方式<span class="number">1</span>：根据集合对象获取流</span><br><span class="line">            单列集合： 集合对象.stream()</span><br><span class="line">            双列集合：</span><br><span class="line">                先获取键的集合，在通过键的集合获取流</span><br><span class="line"></span><br><span class="line">        方式<span class="number">2</span>：根据of方法获取流</span><br><span class="line">            static <span class="symbol">&lt;T&gt;</span> Stream<span class="symbol">&lt;T&gt;</span> of(T... <span class="built_in">values</span>)</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;风清扬&quot;</span>);</span><br><span class="line">        <span class="comment">//通过集合获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据of方法获取流</span></span><br><span class="line">        Stream&lt;Integer&gt; s1 = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);</span><br><span class="line">        Stream&lt;Double&gt; s2 = Stream.of(<span class="number">1.1</span>, <span class="number">2.2</span>);</span><br><span class="line">        Stream&lt;String&gt; s3 = Stream.of(<span class="string">&quot;11&quot;</span>, <span class="string">&quot;12&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、Stream-流的常用方法"><a href="#4、Stream-流的常用方法" class="headerlink" title="4、Stream 流的常用方法"></a>4、Stream 流的常用方法</h3><h5 id="4-1-Count"><a href="#4-1-Count" class="headerlink" title="4.1 Count"></a>4.1 Count</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    count方法：</span></span><br><span class="line"><span class="comment">        终结方法，返回流中的元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建流，将整数11, 22, 33, 44, 55放到流中</span></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回流中的元素个数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stream.count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-forEach"><a href="#4-2-forEach" class="headerlink" title="4.2 forEach"></a>4.2 forEach</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    forEach方法：</span></span><br><span class="line"><span class="comment">        终结方法，遍历流中的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    流只能使用一次</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建流</span></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历流中的数据</span></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        stream.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer a)</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda简化</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        stream.forEach((Integer a) -&gt;&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(a);</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//stream.forEach( a -&gt; System.out.println(a));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用方法引用</span></span><br><span class="line">        <span class="comment">//抽象的accept方法，实现的代码就是单纯的引用了println方法</span></span><br><span class="line">        stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h5 id="4-3-filter"><a href="#4-3-filter" class="headerlink" title="4.3 filter"></a>4.3 filter</h5><figure class="highlight golo"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    <span class="keyword">filter</span>方法：</span><br><span class="line">        过滤数据，得到符合条件的数据，放入新Stream中</span><br><span class="line">        <span class="keyword">filter</span>返回新的流，是中间方法。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：筛选出偶数并遍历打印</span></span><br><span class="line">        Stream&lt;Integer&gt; stream1 = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//筛选出偶数</span></span><br><span class="line">        Stream&lt;Integer&gt; stream2 = stream1.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="comment">//Integer a 元素</span></span><br><span class="line">            <span class="comment">//返回值为true，元素保留存入新的流</span></span><br><span class="line">            <span class="comment">//返回值是false，元素被删除</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Integer a)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历打印</span></span><br><span class="line">        stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        stream1.filter(a -&gt; a%<span class="number">2</span>==<span class="number">0</span> ).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-4-limit"><a href="#4-4-limit" class="headerlink" title="4.4 limit"></a>4.4 limit</h5><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    limit(<span class="built_in">n</span>)方法：</span><br><span class="line">        截取前<span class="built_in">n</span>个数据，返回新Stream。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Stream流，放入整数11, 22, 33, 44, 55, 66</span></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//截取前3个数据</span></span><br><span class="line">        stream.limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-5-skip"><a href="#4-5-skip" class="headerlink" title="4.5 skip"></a>4.5 skip</h5><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    skip(<span class="built_in">n</span>)方法：</span><br><span class="line">        跳过前<span class="built_in">n</span>个数据，返回新Stream。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Stream流</span></span><br><span class="line">        Stream&lt;Integer&gt; st = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跳过前4个数据，并遍历结果</span></span><br><span class="line">        <span class="comment">//st.skip(4).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">        st.limit(<span class="number">4</span>).skip(<span class="number">2</span>).forEach(System.out::println); <span class="comment">// 33  44</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-6-map"><a href="#4-6-map" class="headerlink" title="4.6 map"></a>4.6 map</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    map方法：</span></span><br><span class="line"><span class="comment">        数据映射，将流中的数据类型进行转换。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//将流中的字符串转为整数类型，并筛选出奇数，遍历输出</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;11&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;33&quot;</span>, <span class="string">&quot;44&quot;</span>, <span class="string">&quot;55&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将流中的字符串转为整数类型</span></span><br><span class="line">        <span class="comment">//Function&lt;流的元素的原类型, 要转换的新的类型&gt;</span></span><br><span class="line">       <span class="comment">/* Stream&lt;Integer&gt; stream1 = stream.map(new Function&lt;String, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Integer apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                return Integer.parseInt(s); //Integer类的parseInt方法就是 apply方法要做的事情</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法引用  类名::静态方法名</span></span><br><span class="line">        <span class="comment">//并筛选出奇数</span></span><br><span class="line">        stream.map(Integer::parseInt)</span><br><span class="line">              .filter(a-&gt;a%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-7-concat"><a href="#4-7-concat" class="headerlink" title="4.7 concat"></a>4.7 concat</h5><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    <span class="built_in">concat</span>方法：</span><br><span class="line">        这是Stream的静态方法，可以把两个流合并为一个新的流。</span><br><span class="line"></span><br><span class="line">        static Stream <span class="built_in">concat</span>(流<span class="number">1</span>, 流<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; s1 = Stream.of(<span class="number">11</span>, <span class="number">22</span>);</span><br><span class="line">        Stream&lt;Integer&gt; s2 = Stream.of(<span class="number">33</span>, <span class="number">44</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并流</span></span><br><span class="line">        Stream.concat(s1,s2).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-8-流的注意事项"><a href="#4-8-流的注意事项" class="headerlink" title="4.8 流的注意事项"></a>4.8 流的注意事项</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    总结：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Stream流的常用方法大体分为两类：</span></span><br><span class="line"><span class="comment">        1.中间方法：返回值类型是一个新的Stream流，可以继续往后处理流。</span></span><br><span class="line"><span class="comment">        2.终结方法：返回值类型不是Stream，流的处理已经结束。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Stream流的使用注意：</span></span><br><span class="line"><span class="comment">        1.一个Stream流对象只能操作一次。</span></span><br><span class="line"><span class="comment">        2.终结方法如果没调用，中间方法也不会执行。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建流</span></span><br><span class="line">        Stream&lt;Integer&gt; s1 = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span> ,<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终结方法如果没调用，中间方法也不会执行。</span></span><br><span class="line">       <span class="comment">/* s1.filter(new Predicate&lt;Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean test(Integer a) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(a);</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        s1.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Integer a)</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).count();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、Stream流转集合"><a href="#5、Stream流转集合" class="headerlink" title="5、Stream流转集合"></a>5、Stream流转集合</h3><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">     Stream流收集到集合</span><br><span class="line"></span><br><span class="line">    方法：</span><br><span class="line">        collect(Collector<span class="variable">&lt;? super T,A,R&gt;</span> collector) 提供一个流收集器，用于收集数据，返回集合对象。</span><br><span class="line"></span><br><span class="line">     收集到List集合：</span><br><span class="line">        stream对象.collect(Collectors.<span class="keyword">to</span>List());</span><br><span class="line"></span><br><span class="line">     收集到Set集合：</span><br><span class="line">        stream对象.collect(Collectors.<span class="keyword">to</span>Set());</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集到List集合中</span></span><br><span class="line">        List&lt;Integer&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//单列集合 forEach方法</span></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; set = stream.collect(Collectors.toSet());</span><br><span class="line">        set.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、Stream-综合案例"><a href="#6、Stream-综合案例" class="headerlink" title="6、Stream 综合案例"></a>6、Stream 综合案例</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    已知两个集合数据：</span><br><span class="line">        第一个队伍数据：<span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;风清扬&quot;</span>, <span class="string">&quot;任我行&quot;</span>, <span class="string">&quot;东方不败&quot;</span>, <span class="string">&quot;岳不群&quot;</span>  <span class="keyword">of</span>()</span><br><span class="line">        第二个队伍数据：<span class="string">&quot;马云&quot;</span>, <span class="string">&quot;李彦宏&quot;</span>, <span class="string">&quot;刘强东&quot;</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="string">&quot;马保国&quot;</span>  <span class="keyword">of</span>()</span><br><span class="line"></span><br><span class="line">    要求：</span><br><span class="line">        第一个队伍只要名字为<span class="number">3</span>个字的姓名。<span class="built_in"> filter</span></span><br><span class="line">        第一个队伍筛选之后只要前<span class="number">3</span>人。limit(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        第二个队伍只要姓马的姓名。<span class="built_in"> filter</span></span><br><span class="line">        第二个队伍不要前<span class="number">2</span>人。 skip(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        将两个队伍合并到一个队伍 <span class="built_in"> concat</span>(流<span class="number">1</span>, 流<span class="number">1</span>)</span><br><span class="line">        根据姓名创建Person对象， <span class="keyword">map</span></span><br><span class="line">        存储到一个新集合。 collect(Collectors.toList())</span><br><span class="line">        遍历集合 forEach</span><br><span class="line"></span><br><span class="line">     使用Stream流式编程完成</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name = &quot;</span> + name + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-1-原生的流"><a href="#6-1-原生的流" class="headerlink" title="6.1 原生的流"></a>6.1 原生的流</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//第一个队伍数据：&quot;令狐冲&quot;, &quot;风清扬&quot;, &quot;任我行&quot;, &quot;东方不败&quot;, &quot;岳不群&quot;</span></span><br><span class="line">        Stream&lt;String&gt; s1 = Stream.of(<span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;风清扬&quot;</span>, <span class="string">&quot;任我行&quot;</span>, <span class="string">&quot;东方不败&quot;</span>, <span class="string">&quot;岳不群&quot;</span>);</span><br><span class="line">        <span class="comment">//第一个队伍只要名字为3个字的姓名。 filter</span></span><br><span class="line">        Stream&lt;String&gt; s2 = s1.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.length() == <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//第一个队伍筛选之后只要前3人。limit(3)</span></span><br><span class="line">        Stream&lt;String&gt; s3 = s2.limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二个队伍数据：&quot;马云&quot;, &quot;李彦宏&quot;, &quot;刘强东&quot;, &quot;马化腾&quot;, &quot;马保国&quot;</span></span><br><span class="line">        Stream&lt;String&gt; ss1 = Stream.of(<span class="string">&quot;马云&quot;</span>, <span class="string">&quot;李彦宏&quot;</span>, <span class="string">&quot;刘强东&quot;</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="string">&quot;马保国&quot;</span>);</span><br><span class="line">        <span class="comment">//第二个队伍只要姓马的姓名。 filter</span></span><br><span class="line">        Stream&lt;String&gt; ss2 = ss1.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.startsWith(<span class="string">&quot;马&quot;</span>);</span><br><span class="line">                <span class="comment">//return s.charAt(0)==&#x27;马&#x27;;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//第二个队伍不要前2人。 skip(2)</span></span><br><span class="line">        Stream&lt;String&gt; ss3 = ss2.skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将两个队伍合并到一个队伍  concat(流1, 流1)</span></span><br><span class="line">        Stream&lt;String&gt; s4 = Stream.concat(s3, ss3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据姓名创建Person对象， map</span></span><br><span class="line">        Stream&lt;Person&gt; s5 = s4.map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Person <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储到一个新集合。 collect(Collectors.toList())</span></span><br><span class="line">        List&lt;Person&gt; list = s5.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合 forEach</span></span><br><span class="line">        list.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">                System.out.println(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-2-Lambda-简化版的流"><a href="#6-2-Lambda-简化版的流" class="headerlink" title="6.2 Lambda 简化版的流"></a>6.2 Lambda 简化版的流</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; s1 = Stream.of(<span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;风清扬&quot;</span>, <span class="string">&quot;任我行&quot;</span>, <span class="string">&quot;东方不败&quot;</span>, <span class="string">&quot;岳不群&quot;</span>).filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">        Stream&lt;String&gt; s2 = Stream.of(<span class="string">&quot;马云&quot;</span>, <span class="string">&quot;李彦宏&quot;</span>, <span class="string">&quot;刘强东&quot;</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="string">&quot;马保国&quot;</span>).filter(s -&gt; s.startsWith(<span class="string">&quot;马&quot;</span>)).skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*s4.map(new Function&lt;String, Person&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Person apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                return new Person(s);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造方法引用</span></span><br><span class="line">        Stream.concat(s1,s2)</span><br><span class="line">              .map(Person::<span class="keyword">new</span>)</span><br><span class="line">              .collect(Collectors.toList())</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>018-java语法加强之多线程高级</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/018-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、线程等待和唤醒"><a href="#1、线程等待和唤醒" class="headerlink" title="1、线程等待和唤醒"></a>1、线程等待和唤醒</h3><h5 id="1-1-基础概述"><a href="#1-1-基础概述" class="headerlink" title="1.1 基础概述"></a>1.1 基础概述</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：了解线程间的等待和唤醒机制</span><br><span class="line"></span><br><span class="line">    1.等待和唤醒是两个线程或多个线程之间的事情。</span><br><span class="line"></span><br><span class="line">    2.等待和唤醒的方法：（来自Object类）</span><br><span class="line">        <span class="built_in">wait</span>(): 让当前线程释放锁并进入等待，直到其他线程调用锁的notify()或notifyAll()方法。</span><br><span class="line">        notify(): 唤醒正在等待的某个锁一个线程。</span><br><span class="line">        notifyAll()：唤醒正在等待某个锁的所有线程。</span><br><span class="line"></span><br><span class="line">    3.注意：</span><br><span class="line">        3.1 <span class="built_in">wait</span>和notify方法需要在同步代码块中，使用锁对象调用</span><br><span class="line">        3.2 执行了<span class="built_in">wait</span>方法的线程会释放锁，并进入等待，直到有其他线程将它唤醒。</span><br><span class="line">            执行了notify方法的线程，会唤醒其他等待的线程，但是不会马上释放锁，必须执行完代码块才会释放锁。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   4. <span class="built_in">wait</span>和<span class="built_in">sleep</span>的区别？</span><br><span class="line">        <span class="built_in">wait</span>等待过程中会释放锁，<span class="built_in">sleep</span>不会释放锁</span><br><span class="line">        <span class="built_in">wait</span>要在同步代码块中使用，<span class="built_in">sleep</span>不需要</span><br><span class="line">        <span class="built_in">wait</span>可以计时和无限等待，<span class="built_in">wait</span>如果是无限等待，需要被唤醒；<span class="built_in">sleep</span>只能计时进行休眠，会自动醒来</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//wait方法需要在同步代码块中，使用锁对象调用</span></span><br><span class="line">        <span class="comment">//Object obj = new Object();</span></span><br><span class="line">        <span class="comment">//obj.wait();</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait前1&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait(); <span class="comment">//让当前线程进入等待，会释放锁，直到某个线程调用notify方法后，才会被唤醒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait后1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait前3&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait(); <span class="comment">//让当前线程进入等待，会释放锁，直到某个线程调用notify方法后，才会被唤醒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait后3&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    <span class="comment">//obj.notify();//随机唤醒在等待的某个线程</span></span><br><span class="line">                    obj.notifyAll();<span class="comment">//唤醒在等待的线程的所有线程</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;唤醒&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-王者荣耀案例"><a href="#1-2-王者荣耀案例" class="headerlink" title="1.2 王者荣耀案例"></a>1.2 王者荣耀案例</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    王者荣耀</span></span><br><span class="line"><span class="comment">        2个线程，一个线程负责加载和开启游戏，一个线程负责加载玩家</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        开始游戏的线程，要等待加载玩家的线程执行完毕之后，才开始执行</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个线程负责加载和开启游戏</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;准备开始游戏&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait(); <span class="comment">//进入等待，释放锁</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;玩家加载结束，进入游戏&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start(); <span class="comment">//启动线程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个线程负责加载玩家</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;玩家&quot;</span>+i+<span class="string">&quot;加载完成&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    obj.notify(); <span class="comment">//唤醒等待的线程</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-打印1-100奇偶交替"><a href="#1-3-打印1-100奇偶交替" class="headerlink" title="1.3 打印1~100奇偶交替"></a>1.3 打印1~100奇偶交替</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印奇数</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (number&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(number%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;奇数线程：&quot;</span>+number);</span><br><span class="line">                            number++;</span><br><span class="line">                            <span class="comment">//通知</span></span><br><span class="line">                            lock.notify();</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                           <span class="comment">//等待</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                lock.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印偶数</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (number&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(number%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;偶数线程：&quot;</span>+number);</span><br><span class="line">                            number++;</span><br><span class="line">                            <span class="comment">//通知</span></span><br><span class="line">                            lock.notify();</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//等待</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                lock.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、线程死锁以及状态"><a href="#2、线程死锁以及状态" class="headerlink" title="2、线程死锁以及状态"></a>2、线程死锁以及状态</h3><h5 id="2-1-线程死锁"><a href="#2-1-线程死锁" class="headerlink" title="2.1 线程死锁"></a>2.1 线程死锁</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：了解什么是线程死锁及产生的原因</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.线程死锁：</span></span><br><span class="line"><span class="comment">        在多线程程序中，使用了多把锁，造成线程之间相互等待锁，程序无法向下执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.死锁产生的条件：</span></span><br><span class="line"><span class="comment">        有多个线程</span></span><br><span class="line"><span class="comment">        有多把锁</span></span><br><span class="line"><span class="comment">        有同步代码块嵌套</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.避免死锁：</span></span><br><span class="line"><span class="comment">        开发多线程程序时，应该避免三种条件同时出现在代码中，以免造成线程死锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-线程的6种状态"><a href="#2-2-线程的6种状态" class="headerlink" title="2.2 线程的6种状态"></a>2.2 线程的6种状态</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：了解线程运行的6种状态</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    线程6种状态：</span></span><br><span class="line"><span class="comment">        1.新建状态  NEW</span></span><br><span class="line"><span class="comment">        2.可运行状态 RUNNABLE</span></span><br><span class="line"><span class="comment">        3.阻塞状态  BLOCKED</span></span><br><span class="line"><span class="comment">        4.无限等待状态 WAITING</span></span><br><span class="line"><span class="comment">        5.计时等待  TIMED_WAITING</span></span><br><span class="line"><span class="comment">        6.终止状态  TERMINATED</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    获取线程状态的方法：</span></span><br><span class="line"><span class="comment">        getState()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="3、线程池"><a href="#3、线程池" class="headerlink" title="3、线程池"></a>3、线程池</h3><h5 id="3-1-线程池的使用-Runnable方式"><a href="#3-1-线程池的使用-Runnable方式" class="headerlink" title="3.1 线程池的使用_Runnable方式"></a>3.1 线程池的使用_Runnable方式</h5><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握Runnable方式使用线程池</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1</span>.创建线程池的方式？</span><br><span class="line">            使用 Executors 工具类的静态方法：newFixedThreadPool(<span class="built_in">int</span> nThreads)，参数是线程的数量</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.创建Runnable类型的任务，并提交任务给线程池</span><br><span class="line">            <span class="number">2.1</span> 定义任务类，实现Runnable接口，重写run方法。</span><br><span class="line">            <span class="number">2.2</span> 调用线程池的 submit(任务) 方法，提交任务。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        线程池的线程是有默认名字的</span><br><span class="line">            pool-线程池编号-thread-线程编号   pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">       ctrl + <span class="built_in">n</span> 快速搜索类</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程要执行的任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name+ <span class="string">&quot;执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程池，参数就是线程的数量</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把要执行的任务交给线程池，线程池会自动分配线程去执行任务</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        pool.submit(mr);</span><br><span class="line">        pool.submit(mr);</span><br><span class="line">        pool.submit(mr);</span><br><span class="line">        pool.submit(mr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程执行完后，会放回线程池</span></span><br><span class="line">        <span class="comment">//如果要停止程序，需要关闭线程池</span></span><br><span class="line">        <span class="comment">//pool.shutdown(); //通常不要关闭线程池</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-线程池的使用-Callable方法"><a href="#3-2-线程池的使用-Callable方法" class="headerlink" title="3.2 线程池的使用_Callable方法"></a>3.2 线程池的使用_Callable方法</h5><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握Callable方式使用线程池</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1</span>.创建线程池的方式？</span><br><span class="line">            使用 Executors 工具类的静态方法：newFixedThreadPool(<span class="built_in">int</span> nThreads)，参数是线程的数量</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.创建Callable类型的任务，并提交任务给线程池</span><br><span class="line">            <span class="number">2.1</span> 定义任务类，实现Callable接口，重写<span class="built_in">call</span>方法。</span><br><span class="line">            <span class="number">2.2</span> 调用线程池的 submit(任务) 方法，提交任务。</span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>.获取线程执行结果</span><br><span class="line">             Future&lt;返回值类型&gt; f = 线程池.submit(Callable任务);</span><br><span class="line">             返回值类型  变量  =  f.get();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">4</span>.run方法和<span class="built_in">call</span>方法的区别？</span><br><span class="line">            <span class="built_in">call</span>方法有返回值，run方法没有返回值</span><br><span class="line">            <span class="built_in">call</span>方法可以抛异常，也可以捕捉异常，run方法只能捕捉异常，不能抛出</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程任务执行结束，可以返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;执行了，随机数为：&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交任务给线程池</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行任务，并返回结果对象，返回值就封装在Future中</span></span><br><span class="line">        Future&lt;Integer&gt; f1 = pool.submit(mc);</span><br><span class="line">        Future&lt;Integer&gt; f2 = pool.submit(mc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过get方法，获取返回值，阻塞等待线程的返回</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a1</span> <span class="operator">=</span> f1.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;f1的结果：&quot;</span>+a1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a2</span> <span class="operator">=</span> f2.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;f2的结果：&quot;</span>+a2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这样会排队运行，效果很低</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Future&lt;Integer&gt; f1 = pool.submit(mc);</span></span><br><span class="line"><span class="comment">        Integer a1 = f1.get();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;f1的结果：&quot;+a1);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Future&lt;Integer&gt; f2 = pool.submit(mc);</span></span><br><span class="line"><span class="comment">        Integer a2 = f2.get();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;f2的结果：&quot;+a2);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-线程池原理扩展"><a href="#3-3-线程池原理扩展" class="headerlink" title="3.3 线程池原理扩展"></a>3.3 线程池原理扩展</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用工具类创建线程池</span></span><br><span class="line">        <span class="comment">//ExecutorService pool = Executors.newFixedThreadPool(3);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原生代码创建线程池</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ThreadPoolExecutor(int corePoolSize, 核心线程数量</span></span><br><span class="line"><span class="comment">                              int maximumPoolSize, 最大线程数量</span></span><br><span class="line"><span class="comment">                              long keepAliveTime, 线程存活时间</span></span><br><span class="line"><span class="comment">                              TimeUnit unit, 时间单位</span></span><br><span class="line"><span class="comment">                              BlockingQueue&lt;Runnable&gt; workQueue 任务队列</span></span><br><span class="line"><span class="comment">                              )</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>, <span class="comment">//核心线程</span></span><br><span class="line">                <span class="number">3</span>, <span class="comment">//核心线程 + 临时线程</span></span><br><span class="line">                <span class="number">0L</span>, <span class="comment">//一直存活</span></span><br><span class="line">                TimeUnit.MILLISECONDS, <span class="comment">//单位为毫秒</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="number">1</span>)<span class="comment">//任务队列的容量为1</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程执行</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程执行</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程满了，放入任务队列等待执行</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程满了，任务队列也满了，创建临时线程执行</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRun</span>()); <span class="comment">//核心线程满了，任务队列也满了，临时线程也满了，拒绝该任务（报错）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-4-线程池案例"><a href="#3-4-线程池案例" class="headerlink" title="3.4 线程池案例"></a>3.4 线程池案例</h5><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">需求：使用线程池方式创建两个线程任务：分段计算<span class="number">1~20000</span>之间的数字和。</span><br><span class="line">        <span class="number">1</span>.线程<span class="number">1</span>计算<span class="number">1~10000</span>之间的数字和，并返回结果。</span><br><span class="line">        <span class="number">2</span>.线程<span class="number">2</span>计算<span class="number">10001~20000</span>之间的数字和，并返回结果。</span><br><span class="line">        <span class="number">3</span>.提交任务，获取计算结果进行合并，打印最终结果。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.线程1计算1~10000之间的数字和，并返回结果。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//new Task(1,10000);</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统一提交任务</span></span><br><span class="line">        <span class="comment">//Future&lt;Integer&gt; f1 = pool.submit(new Task1());</span></span><br><span class="line">        <span class="comment">//Future&lt;Integer&gt; f2 = pool.submit(new Task2());</span></span><br><span class="line"></span><br><span class="line">        Future&lt;Integer&gt; f1 = pool.submit(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        Future&lt;Integer&gt; f2 = pool.submit(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="number">10001</span>,<span class="number">20000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统一获取结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum1</span> <span class="operator">=</span> f1.get();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum2</span> <span class="operator">=</span> f2.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并结果</span></span><br><span class="line">        System.out.println(sum1+sum2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>017-java语法加强之多线程基础</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/017-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、继承Thread类创建线程"><a href="#1、继承Thread类创建线程" class="headerlink" title="1、继承Thread类创建线程"></a>1、继承Thread类创建线程</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标<span class="number">1</span>：继承Thread类创建线程</span><br><span class="line"></span><br><span class="line">    步骤：</span><br><span class="line">        <span class="number">1.</span>自定义一个线程类继承Thread类。</span><br><span class="line">        <span class="number">2.</span>重写<span class="built_in">run</span>()方法。</span><br><span class="line">        <span class="number">3.</span>创建自定义线程类的对象。</span><br><span class="line">        <span class="number">4.</span>调用start方法，启动线程。</span><br><span class="line"></span><br><span class="line">    问题：</span><br><span class="line">        start()方法和<span class="built_in">run</span>()方法的区别？</span><br><span class="line">        start() 启动线程</span><br><span class="line">        <span class="built_in">run</span>() 线程要执行的任务</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建自定义线程类的对象。</span></span><br><span class="line">    <span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.调用start方法，启动线程。</span></span><br><span class="line">    mt.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.自定义一个线程类继承Thread类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.重写run()方法。</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        当前的线程要执行的代码，写在run方法中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread:&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、实现Runnable-接口创建线程（重点"><a href="#2、实现Runnable-接口创建线程（重点" class="headerlink" title="2、实现Runnable 接口创建线程（重点)"></a>2、实现Runnable 接口创建线程（重点)</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：实现Runnable接口创建线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    步骤：</span></span><br><span class="line"><span class="comment">        1.定义一个类（任务类）实现Runnable接口。</span></span><br><span class="line"><span class="comment">        2.重写接口的run()方法。</span></span><br><span class="line"><span class="comment">        3.创建任务类的对象。</span></span><br><span class="line"><span class="comment">        4.创建Thread类的对象，把任务对象作为构造方法的参数。</span></span><br><span class="line"><span class="comment">        5.调用start方法，启动线程。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个任务</span></span><br><span class="line">    <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr); <span class="comment">//ctrl + q查看重载的方法参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动线程</span></span><br><span class="line">    t.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程要执行的代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyRunnable:&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、获取和设置线程名称"><a href="#3、获取和设置线程名称" class="headerlink" title="3、获取和设置线程名称"></a>3、获取和设置线程名称</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：掌握获取和设置线程名称的方法</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span>获取线程名称：</span><br><span class="line">        <span class="built_in">String</span>  <span class="variable">getName</span><span class="punctuation">(</span><span class="punctuation">)</span> 默认 <span class="built_in">Thread</span><span class="operator">-</span>编号 ，编号从<span class="number">0</span>开始</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>设置线程名称：</span><br><span class="line">        <span class="variable">void</span> <span class="variable">setName</span><span class="punctuation">(</span><span class="built_in">String</span> <span class="variable">name</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span>构造方法设置线程名称：</span><br><span class="line">        <span class="built_in">Thread</span><span class="punctuation">(</span><span class="variable">Runnable</span> <span class="variable">target</span><span class="operator">,</span> <span class="built_in">String</span> <span class="variable">name</span><span class="punctuation">)</span></span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">mt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        mt1.setName(<span class="string">&quot;mt1&quot;</span>);</span><br><span class="line">        mt1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">mt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        mt2.setName(<span class="string">&quot;mt2&quot;</span>);</span><br><span class="line">        mt2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;线程执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、获取当前线程对象"><a href="#4、获取当前线程对象" class="headerlink" title="4、获取当前线程对象"></a>4、获取当前线程对象</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取对当前正在执行的线程对象：</span></span><br><span class="line"><span class="comment">        static Thread currentThread()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//main运行时，JVM默认启动了一个线程（主线程）</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        System.out.println(t.getName()); <span class="comment">//main</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取对当前正在执行的线程对象： Thread.currentThread()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>(); <span class="comment">//任务</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);<span class="comment">//线程</span></span><br><span class="line">        t.setName(<span class="string">&quot;t线程&quot;</span>);<span class="comment">//设置名字</span></span><br><span class="line">        t.start();<span class="comment">//启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前线程的名称</span></span><br><span class="line">        <span class="comment">//1.获取当前正在执行的线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="comment">//2.获取当前线程的名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> th.getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、线程睡眠与线程优先级"><a href="#5、线程睡眠与线程优先级" class="headerlink" title="5、线程睡眠与线程优先级"></a>5、线程睡眠与线程优先级</h3><figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：学习sleep方法的使用</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>.让当前正在执行的线程睡眠（单位毫秒）：<span class="keyword">static</span> <span class="type">void</span> sleep(long millis)</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>.线程优先级范围：</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>.获取优先级：<span class="type">int</span> getPriority()</span><br><span class="line"></span><br><span class="line">    <span class="number">4</span>.设置优先级：<span class="type">void</span> setPriority(<span class="type">int</span> newPriority)</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//让主线程进入休眠1秒</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;t1线程:&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;t2线程:&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出优先级，默认是5</span></span><br><span class="line">        <span class="comment">//System.out.println(t1.getPriority());</span></span><br><span class="line">        <span class="comment">//System.out.println(t2.getPriority());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置优先级</span></span><br><span class="line">        t1.setPriority(<span class="number">10</span>);</span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、卖票案例"><a href="#6、卖票案例" class="headerlink" title="6、卖票案例"></a>6、卖票案例</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：通过案例理解什么是线程安全问题</span><br><span class="line"></span><br><span class="line">     需求：某电影院目前正在上映国产大片，共有<span class="number">100</span>张票，而它有<span class="number">3</span>个窗口卖票，请设计一个程序模拟该电影院卖票。</span><br><span class="line">     步骤：</span><br><span class="line">            <span class="number">1.</span>定义Ticket类实现Runnable接口：</span><br><span class="line">                A：提供成员变量表示总票数</span><br><span class="line">                B：重写<span class="built_in">run</span>()方法实现卖票</span><br><span class="line">                    如果票数大于<span class="number">0</span>，进行售票，总票数减<span class="number">1</span>，</span><br><span class="line">                    打印<span class="string">&quot;xxx售票成功，剩余票数：xx&quot;</span> 。（xxx为线程名称，xx为剩余票数）</span><br><span class="line">            <span class="number">2.</span>定义一个测试类TicketDemo</span><br><span class="line">                A：创建三个Thread类的对象，把Ticket对象作为构造方法的参数，并设置线程名称。</span><br><span class="line">                B：启动线程三个线程。</span><br><span class="line"></span><br><span class="line">     问题：什么情况下会有线程安全问题？如何解决？</span><br><span class="line">            多个线程，共享同一个数据，多个线程进行修改，容易有线程安全问题</span><br><span class="line"></span><br><span class="line">     如何解决？</span><br><span class="line">            上锁，使用java的同步机制</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//卖票任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量，表示总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现卖票的业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(total&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//模拟卖票的时间消耗，可以比较容易演示问题</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                total--;</span><br><span class="line">                System.out.println(name+<span class="string">&quot;售票成功，剩余票数&quot;</span>+total);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//没有票，结束循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建任务类</span></span><br><span class="line">        Ticket ticket= <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建3个线程，模拟3个窗口卖票</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程，开始执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、同步代码块（重点）"><a href="#7、同步代码块（重点）" class="headerlink" title="7、同步代码块（重点）"></a>7、同步代码块（重点）</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：通过案例理解什么是线程安全问题</span><br><span class="line"></span><br><span class="line">     需求：某电影院目前正在上映国产大片，共有<span class="number">100</span>张票，而它有<span class="number">3</span>个窗口卖票，请设计一个程序模拟该电影院卖票。</span><br><span class="line">     步骤：</span><br><span class="line">            <span class="number">1.</span>定义Ticket类实现Runnable接口：</span><br><span class="line">                A：提供成员变量表示总票数</span><br><span class="line">                B：重写<span class="built_in">run</span>()方法实现卖票</span><br><span class="line">                    如果票数大于<span class="number">0</span>，进行售票，总票数减<span class="number">1</span>，</span><br><span class="line">                    打印<span class="string">&quot;xxx售票成功，剩余票数：xx&quot;</span> 。（xxx为线程名称，xx为剩余票数）</span><br><span class="line">            <span class="number">2.</span>定义一个测试类TicketDemo</span><br><span class="line">                A：创建三个Thread类的对象，把Ticket对象作为构造方法的参数，并设置线程名称。</span><br><span class="line">                B：启动线程三个线程。</span><br><span class="line"></span><br><span class="line">     问题：什么情况下会有线程安全问题？如何解决？</span><br><span class="line">            多个线程，共享同一个数据，多个线程进行修改，容易有线程安全问题</span><br><span class="line"></span><br><span class="line">     如何解决？</span><br><span class="line">            上锁，使用java的同步机制</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//卖票任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量，表示总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现卖票的业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//锁的对象可以是任意的java对象，前提是保证唯一（任意的引用类型）</span></span><br><span class="line">            <span class="comment">//synchronized (lock)&#123;</span></span><br><span class="line">            <span class="comment">//synchronized (&quot;锁&quot;)&#123;//字符串常量对象在常量池中是唯一的</span></span><br><span class="line">            <span class="comment">//synchronized (this)&#123; //this代表当前对象，需要保证当前类只被创建一次</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Ticket.class)&#123; <span class="comment">//Ticket.class 获取当前类的字节码对象，类的字节码是唯一的</span></span><br><span class="line">                <span class="keyword">if</span>(total&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    total--;</span><br><span class="line">                    System.out.println(name+<span class="string">&quot;售票成功，剩余票数&quot;</span>+total);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">//没有票，结束循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//让释放锁的线程，休眠一会，让其他线程有机会争取锁，并发的效果更好</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建任务类</span></span><br><span class="line">        Ticket ticket= <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建3个线程，模拟3个窗口卖票</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程，开始执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、同步方法"><a href="#8、同步方法" class="headerlink" title="8、同步方法"></a>8、同步方法</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握同步方法的使用</span><br><span class="line"></span><br><span class="line">    使用<span class="keyword">synchronized</span>修饰的方法，叫做同步方法。</span><br><span class="line"></span><br><span class="line">    格式：</span><br><span class="line">        修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">            方法体;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    执行原理：</span><br><span class="line">        调用方法的线程需要先抢到锁才能执行方法中的代码。</span><br><span class="line"></span><br><span class="line">    同步方法中的锁：</span><br><span class="line">        实例方法(无static)：锁对象就是this。</span><br><span class="line">        静态方法(static)：锁对象为当前方法所在类的字节码对象。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//卖票任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量，表示总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现卖票的业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            sale();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(total==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把认为有安全问题的代码，直接封装成一个方法，在方法上面直接加锁</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        成员方法（没static），锁是this对象</span></span><br><span class="line"><span class="comment">        静态方法， 锁是 当前类名.class 字节码对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(total&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            total--;</span><br><span class="line">            System.out.println(name+<span class="string">&quot;售票成功，剩余票数&quot;</span>+total);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建任务类</span></span><br><span class="line">        Ticket ticket= <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建3个线程，模拟3个窗口卖票</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程，开始执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、Lock-锁机制"><a href="#9、Lock-锁机制" class="headerlink" title="9、Lock 锁机制"></a>9、Lock 锁机制</h3><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：了解Lock锁的使用</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span>Lock接口中操作锁的方法：</span><br><span class="line">        加锁： <span class="keyword">void</span> <span class="built_in">lock</span>()</span><br><span class="line">        释放锁：<span class="keyword">void</span> unlock()</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>Lock接口的常用实现类：ReentrantLock</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span>Lock锁的使用格式：</span><br><span class="line">        Lock k <span class="operator">=</span> <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        k.<span class="built_in">lock</span>(); <span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            需要同步的代码;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            k.unlock(); <span class="comment">//在finally中，可以确保锁一定会释放</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    Lock接口和synchronized的区别</span><br><span class="line">        JDK1<span class="number">.5</span>之前，synchronized性能低，使用Lock提高性能</span><br><span class="line">        JDK1<span class="number">.6</span>开始，java把synchronized性能做了优化，现在使用synchronized可有一样效果</span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//卖票任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量，表示总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Lock对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(); <span class="comment">//可重入锁</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现卖票的业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock(); <span class="comment">//加锁</span></span><br><span class="line">                <span class="keyword">if</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    total--;</span><br><span class="line">                    System.out.println(name + <span class="string">&quot;售票成功，剩余票数&quot;</span> + total);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">//没有票，结束循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();<span class="comment">//释放锁，一定要执行的代码，放入finally中</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//让释放锁的线程，休眠一会，让其他线程有机会争取锁，并发的效果更好</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建任务类</span></span><br><span class="line">        Ticket ticket= <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建3个线程，模拟3个窗口卖票</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程，开始执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>016-java语法加强之异常处理</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/016-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、异常处理"><a href="#1、异常处理" class="headerlink" title="1、异常处理"></a>1、异常处理</h3><h5 id="1-1-try-catch异常"><a href="#1-1-try-catch异常" class="headerlink" title="1.1 try-catch异常"></a>1.1 try-catch异常</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能出现异常的代码;</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量)&#123;</span><br><span class="line">    处理异常的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>-<span class="keyword">catch</span>捕捉异常的执行流程</span><br><span class="line">            先执行<span class="keyword">try</span>的代码，</span><br><span class="line">                <span class="keyword">try</span>出现错误，定位到<span class="keyword">catch</span>中执行</span><br><span class="line">                <span class="keyword">try</span>没有错误，不会执行<span class="keyword">catch</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>try-catch的好处:可以保证出现异常后，程序可以接着运行，提高程序的健壮性</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//int[] arr = new int[5];</span></span><br><span class="line">            <span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">            System.out.println(arr.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;try&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出错了....&quot;</span>);</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-多重catch"><a href="#1-2-多重catch" class="headerlink" title="1.2 多重catch"></a>1.2 多重catch</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">多个<span class="keyword">catch</span>使用注意：</span><br><span class="line">    多个<span class="keyword">catch</span>中的异常不能相同。</span><br><span class="line">    若<span class="keyword">catch</span>中的多个异常之间有子父类异常的关系，那么子类异常要在上面的<span class="keyword">catch</span>处理，父类异常在下面的<span class="keyword">catch</span>处理。</span><br><span class="line">    如果出现异常，多个<span class="keyword">catch</span>最多也只会执行一个。（从上往下匹配）</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">            System.out.println(arr.length);</span><br><span class="line"></span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sf.parse(<span class="string">&quot;2009-10-01&quot;</span>);</span><br><span class="line">            System.out.println(date);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="number">10</span>/<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ParseException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;解析异常&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-异常处理练习"><a href="#1-3-异常处理练习" class="headerlink" title="1.3 异常处理练习"></a>1.3 异常处理练习</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：异常处理的案例</span></span><br><span class="line"><span class="comment">    需求：</span></span><br><span class="line"><span class="comment">        键盘录入用户的年龄，如果年龄录入的不是数字，提醒用户重新录入。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                System.out.println(age);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你输入的年龄有误，请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2、查看异常信息的办法"><a href="#2、查看异常信息的办法" class="headerlink" title="2、查看异常信息的办法"></a>2、查看异常信息的办法</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：掌握获取异常信息的方式</span><br><span class="line"></span><br><span class="line">    Throwable类中查看异常的方法:</span><br><span class="line">        void printStackTrace() 将异常详细信息显示在控制台</span><br><span class="line">        <span class="keyword">String</span> getMessage() 返回此异常的简单描述信息。</span><br><span class="line">        <span class="keyword">String</span> toString() 返回此异常的类型和简单描述信息。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">            System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace(); <span class="comment">//查看异常，程序员调试代码用的</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取异常的简单的描述信息，记录到文件中</span></span><br><span class="line">            <span class="comment">//有些异常没有描述信息，返回null</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">            System.out.println(message);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//返回异常的信息（类名，描述信息）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> e.toString();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、finally代码块"><a href="#3、finally代码块" class="headerlink" title="3、finally代码块"></a>3、finally代码块</h3><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="operator">/*</span></span><br><span class="line">    目标：掌握<span class="keyword">finally</span>代码块的应用</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="number">1.</span> <span class="keyword">finally</span>代码块的格式</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;catch (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span> <span class="keyword">finally</span>代码块的特点</span><br><span class="line">            <span class="keyword">finally</span>的代码一定会执行</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span> 什么样的代码放到<span class="keyword">finally</span>中？</span><br><span class="line">            一定要执行的代码，要放到<span class="keyword">finally</span>中</span><br><span class="line"></span><br><span class="line"> <span class="operator">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//int i = 10/0;</span></span><br><span class="line">            System.out.println(<span class="string">&quot;try&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//面试题的关键</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println( getNumber() );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//不建议使用return,通常写关闭资源的代码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">12</span>; <span class="comment">//在正常的return前会执行finally，在finally被return 12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、异常处理之throws-重点"><a href="#4、异常处理之throws-重点" class="headerlink" title="4、异常处理之throws 重点"></a>4、异常处理之throws 重点</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：掌握throws处理异常的方式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    小结：</span></span><br><span class="line"><span class="comment">        1. throws声明异常的格式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            修饰符 返回值类型 方法名(参数列表) throws 异常1,异常2&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="string">&quot;2009/10/10&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ParseException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;处理异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法中，编译异常通常抛出，原则就是谁调用谁处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String s)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sf.parse(s);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//test1();</span></span><br><span class="line">        <span class="comment">//test2();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编译异常，调用者必须处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行异常，调用者可以不处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span><span class="keyword">throws</span> NullPointerException&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法重写时，子类的异常要小于或等于父类的异常</span></span><br><span class="line">    <span class="comment">//重写后，权限可以更大，异常需要更小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> ParseException&#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sf.parse(<span class="string">&quot;2009-10-10&quot;</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、throw-关键字"><a href="#5、throw-关键字" class="headerlink" title="5、throw 关键字"></a>5、throw 关键字</h3><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    目标：如何在程序中创建异常</span><br><span class="line"></span><br><span class="line">    需求：使用键盘录入一个年龄, 如果年龄小于<span class="number">0</span>则产生一个异常。</span><br><span class="line"></span><br><span class="line">    小结：</span><br><span class="line">        <span class="number">1</span>.<span class="keyword">throw</span>的作用？</span><br><span class="line">            制造异常，方法停止，效果和<span class="keyword">return</span>一样</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>.<span class="keyword">throw</span>的格式？</span><br><span class="line">            在方法内部</span><br><span class="line">             <span class="keyword">throw</span> <span class="built_in">new</span> 异常();</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.setAge(<span class="number">15</span>);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//源码的throw的用法</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> r.nextInt(-<span class="number">10</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//制造运行时异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>  &#123;</span><br><span class="line">        <span class="keyword">if</span>(age&gt;=<span class="number">0</span> &amp;&amp; age&lt;=<span class="number">150</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果参数不正确，产生异常，提醒开发者，参数有问题，让方法停止调用</span></span><br><span class="line">            <span class="comment">//throw new 异常();</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;年龄输入有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//制造编译异常，需要方法上面使用throws进行抛出</span></span><br><span class="line">    <span class="comment">/*public void setAge(int age) throws Exception &#123;</span></span><br><span class="line"><span class="comment">        if(age&gt;=0 &amp;&amp; age&lt;=150)&#123;</span></span><br><span class="line"><span class="comment">            this.age = age;</span></span><br><span class="line"><span class="comment">        &#125;else &#123;</span></span><br><span class="line"><span class="comment">            throw new Exception(&quot;年龄输入有误&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>015-java语法加强之Map集合</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/015-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BMap%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、Map的使用"><a href="#1、Map的使用" class="headerlink" title="1、Map的使用"></a>1、Map的使用</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    键是唯一的，值可以重复</span></span><br><span class="line"><span class="comment">    添加时，如果键相同，键不变，会把新的值覆盖进入</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        <span class="comment">//Map&lt;键, 值&gt;</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//System.out.println( map.put(&quot;heima001&quot;, &quot;张三&quot;) ); //null 如果键不重复，添加后返回null</span></span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;heima001&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;heima002&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;heima003&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> map.put(<span class="string">&quot;heima003&quot;</span>, <span class="string">&quot;赵六&quot;</span>); <span class="comment">//如果键重复，新的值更新进入，返回旧的值</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据 get(键) 根据键获取值，如果键不存在，返回null</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(<span class="string">&quot;heima003&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">///删除数据 remove(键) ，根据键删除，返回值，删除失败，返回null</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> map.remove(<span class="string">&quot;heima002&quot;</span>);</span><br><span class="line">        System.out.println(v);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map.clear(); //清空</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断键或者值是否存在</span></span><br><span class="line">        System.out.println( map.containsKey(<span class="string">&quot;heima003&quot;</span>) );</span><br><span class="line">        System.out.println( map.containsValue(<span class="string">&quot;王五&quot;</span>) );</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、键找值的方式遍历"><a href="#2、键找值的方式遍历" class="headerlink" title="2、键找值的方式遍历"></a>2、键找值的方式遍历</h3><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    键找值的遍历：</span><br><span class="line">        <span class="number">1.</span>获取所有的键的集合  keySet()</span><br><span class="line">        <span class="number">2.</span>遍历键的集合</span><br><span class="line">        <span class="number">3.</span>根据键获取值 <span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;孙策&quot;</span>, <span class="string">&quot;大乔&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;周瑜&quot;</span>, <span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;吕布&quot;</span>, <span class="string">&quot;貂蝉&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取所有的键的集合</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历键的集合</span></span><br><span class="line">        <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">            <span class="comment">//3.根据键获取值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、键值对的遍历方式"><a href="#3、键值对的遍历方式" class="headerlink" title="3、键值对的遍历方式"></a>3、键值对的遍历方式</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    键值对的遍历（推荐）</span><br><span class="line">    <span class="number">1</span>.获取所有的键值对对象Map.<span class="keyword">Entry</span>&lt;K,V&gt;     entrySet();</span><br><span class="line">    <span class="number">2</span>.遍历集合，获取每一个键值对</span><br><span class="line">    <span class="number">3</span>.根据<span class="keyword">Entry</span>对象获取键和值</span><br><span class="line">        getKey() 键</span><br><span class="line">        getValue() 值</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;孙策&quot;</span>, <span class="string">&quot;大乔&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;周瑜&quot;</span>, <span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;吕布&quot;</span>, <span class="string">&quot;貂蝉&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取所有的键值对对象  Map.Entry&lt;K,V&gt;</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Set&lt;&gt;集合</span></span><br><span class="line"><span class="comment">            Map.Entry&lt;String, String&gt; 集合的元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="comment">//2.遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">            <span class="comment">//3.获取entry对象的键和值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;,&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、HashMap-的使用"><a href="#4、HashMap-的使用" class="headerlink" title="4、HashMap 的使用"></a>4、HashMap 的使用</h3><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">需求：创建一个HashMap集合，键是学生对象(Student)，值是家庭住址(<span class="type">String</span>)。存储三个键值对元素，并遍历</span><br><span class="line">要求：</span><br><span class="line">   学生姓名和年龄相同，认为是同一个对象，不要存入集合</span><br><span class="line"></span><br><span class="line">结论：</span><br><span class="line">    使用HashMap，保证键唯一，需要重写键的hashCode和<span class="keyword">equals</span>方法</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个HashMap集合，键是学生对象(Student)，值是家庭住址(String)</span></span><br><span class="line">        HashMap&lt;Student, String&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        hm.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>), <span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        hm.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">17</span>), <span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        hm.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">21</span>), <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        hm.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">21</span>), <span class="string">&quot;上海&quot;</span>); <span class="comment">//键相同时，新的值会覆盖前一个</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取键值对集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Student, String&gt;&gt; entrySet = hm.entrySet();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Student, String&gt; e : entrySet) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge() + <span class="string">&quot;,&quot;</span> + address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、TreeMap集合"><a href="#5、TreeMap集合" class="headerlink" title="5、TreeMap集合"></a>5、TreeMap集合</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">TreeMap&lt;键，值&gt;</span></span><br><span class="line"><span class="comment">    根据键去重和排序</span></span><br><span class="line"><span class="comment">        键排序要求：</span></span><br><span class="line"><span class="comment">            方式1：键实现Comparable接口</span></span><br><span class="line"><span class="comment">            方式2：TreeMap的构造方法接收一个比较器，对键进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="5-1-TreeMap的构造方法接收一个比较器，对键进行排序"><a href="#5-1-TreeMap的构造方法接收一个比较器，对键进行排序" class="headerlink" title="5.1 TreeMap的构造方法接收一个比较器，对键进行排序"></a>5.1 TreeMap的构造方法接收一个比较器，对键进行排序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*  TreeMap&lt;Integer,String&gt; tm = new TreeMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">        tm.put(1,&quot;优秀&quot;);</span></span><br><span class="line"><span class="comment">        tm.put(3,&quot;中等&quot;);</span></span><br><span class="line"><span class="comment">        tm.put(2,&quot;良好&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(tm);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据键，降序排序</span></span><br><span class="line">        TreeMap&lt;Integer,String&gt; tm = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        tm.put(<span class="number">1</span>,<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        tm.put(<span class="number">3</span>,<span class="string">&quot;中等&quot;</span>);</span><br><span class="line">        tm.put(<span class="number">2</span>,<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">        System.out.println(tm);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-键实现Comparable接口"><a href="#5-2-键实现Comparable接口" class="headerlink" title="5.2 键实现Comparable接口"></a>5.2 键实现Comparable接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1：键实现Comparable接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age - o.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Shift + F6 变量快速改名</span></span><br><span class="line">        <span class="comment">//方式2：通过TreeMap构造方法传入Comparator接口的实现类。</span></span><br><span class="line">        TreeMap&lt;Student, String&gt; tm = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge() - o2.getAge(); <span class="comment">//按照年龄进行升序排序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        tm.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>), <span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        tm.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">17</span>), <span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        tm.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">21</span>), <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        tm.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">21</span>), <span class="string">&quot;上海&quot;</span>); <span class="comment">//根据排序的属性去重，如果年龄一样，认为键是相同的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历Map集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Student, String&gt;&gt; entrySet = tm.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Student, String&gt; e : entrySet) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge() + <span class="string">&quot;,&quot;</span> + address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-3-应用案例"><a href="#5-3-应用案例" class="headerlink" title="5.3 应用案例"></a>5.3 应用案例</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求: 字符串“aababcabcdabcde”</span></span><br><span class="line"><span class="comment">         请统计字符串中每一个字符出现的次数，并按照以下格式输出</span></span><br><span class="line"><span class="comment">         输出结果：</span></span><br><span class="line"><span class="comment">            a（5）b（4）c（3）d（2）e（1）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        TreeMap&lt;字符, 次数&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合，键是字符，值是次数</span></span><br><span class="line">        TreeMap&lt;Character, Integer&gt; tm = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++)&#123;</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> line.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(tm.containsKey(ch))&#123;</span><br><span class="line">                <span class="comment">//键存在，获取并更新值</span></span><br><span class="line">                <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> tm.get(ch); <span class="comment">//旧的值</span></span><br><span class="line">                tm.put(ch, count+<span class="number">1</span>);<span class="comment">//更新值</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//键不存在，直接把值设置为1</span></span><br><span class="line">                tm.put(ch,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">       <span class="comment">//a（5）b（4）c（3）d（2）e（1）</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entrySet = tm.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">            <span class="type">Character</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey(); <span class="comment">//字符</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> entry.getValue(); <span class="comment">//次数</span></span><br><span class="line">            System.out.print(key+<span class="string">&quot;（&quot;</span>+count+<span class="string">&quot;）&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、图书管理系统"><a href="#6、图书管理系统" class="headerlink" title="6、图书管理系统"></a>6、图书管理系统</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//书名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price; <span class="comment">//价格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;name = &quot;</span> + name + <span class="string">&quot;, price = &quot;</span> + price + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HashMap&lt;图书类型, 该类型的图书集合&gt;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, ArrayList&lt;Book&gt;&gt; bookMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加测试数据，为了方便代码的调试，开发完成后记得删除</span></span><br><span class="line">        ArrayList&lt;Book&gt; mz = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        mz.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;西游记&quot;</span>,<span class="number">19.5</span>));</span><br><span class="line">        mz.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;水浒传&quot;</span>,<span class="number">29.5</span>));</span><br><span class="line">        bookMap.put(<span class="string">&quot;名著&quot;</span>,mz);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Book&gt; it = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        it.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Java入门到精通&quot;</span>,<span class="number">39.5</span>));</span><br><span class="line">        it.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;PHP入门到精通&quot;</span>,<span class="number">9.5</span>));</span><br><span class="line">        bookMap.put(<span class="string">&quot;it书籍&quot;</span>,it);</span><br><span class="line"></span><br><span class="line">        loop:</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------欢迎来到图书管理系统--------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1.查看所有书籍&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2.添加图书&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3.删除图书&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4.修改图书&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5.退出系统&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (a)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;查看&quot;);</span></span><br><span class="line">                    showAllBook();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;添加&quot;);</span></span><br><span class="line">                    addBook();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;删除&quot;);</span></span><br><span class="line">                    deleteBook();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;修改&quot;);</span></span><br><span class="line">                    editBook();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;谢谢使用&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>; <span class="comment">//结束main方法</span></span><br><span class="line">                    <span class="comment">//break loop;</span></span><br><span class="line">                    <span class="comment">//System.exit(0); //结束虚拟机，建议不要用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有图书</span></span><br><span class="line">    <span class="comment">//键找值的方式 keySet</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAllBook</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类型\t\t书名\t\t\t价格&quot;</span>);</span><br><span class="line">        <span class="comment">//获取所有的键的集合（类别的集合）</span></span><br><span class="line">        Set&lt;String&gt; keySet = bookMap.keySet();</span><br><span class="line">        <span class="comment">//遍历类别</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            <span class="comment">//根据图书类别获取对应的图书集合</span></span><br><span class="line">            ArrayList&lt;Book&gt; list = bookMap.get(key);</span><br><span class="line">            <span class="comment">//遍历图书集合</span></span><br><span class="line">            <span class="keyword">for</span> (Book b : list) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> b.getName();</span><br><span class="line">                <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> b.getPrice();</span><br><span class="line">                System.out.println(<span class="string">&quot;\t\t\t&quot;</span>+name +<span class="string">&quot;\t\t\t&quot;</span>+price);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加图书</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要添加的书籍类型&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">//根据图书类型获取对应的集合</span></span><br><span class="line">        ArrayList&lt;Book&gt; list = bookMap.get(type);</span><br><span class="line">        <span class="keyword">if</span>(list==<span class="literal">null</span>)&#123;</span><br><span class="line">            list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//录入图书信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要添加的书名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">//根据书名去list集合遍历，查找书名是否存在</span></span><br><span class="line">        <span class="keyword">for</span> (Book b : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b.getName().equals(name))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你输入的书名已存在，请重新输入&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;<span class="comment">//结束方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要添加的价格：&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Book对象，添加到对应的集合</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(name, price);</span><br><span class="line">        list.add(book);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放入map集合中</span></span><br><span class="line">        bookMap.put(type,list);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加&quot;</span>+name+<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除图书</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        先输入图书类型</span></span><br><span class="line"><span class="comment">            如果类型不存在，提示删除失败，结束方法</span></span><br><span class="line"><span class="comment">            如果类型存在，</span></span><br><span class="line"><span class="comment">                输入书名，判断书名是否存在，</span></span><br><span class="line"><span class="comment">                    存在直接删除，结束方法</span></span><br><span class="line"><span class="comment">                    不存在提示删除失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteBook</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要删除的书籍类型&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">//如果类型不存在，提示删除失败，</span></span><br><span class="line">        <span class="keyword">if</span>(!bookMap.containsKey(type))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的类型不存在，无法删除&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//结束方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型是存在的，根据类型获取图书集合</span></span><br><span class="line">        ArrayList&lt;Book&gt; list = bookMap.get(type);</span><br><span class="line">        <span class="comment">//录入书名，去list中查找是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要删除的书名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(book.getName().equals(name))&#123;</span><br><span class="line">                list.remove(i); <span class="comment">//根据索引删</span></span><br><span class="line">                <span class="comment">//list.remove(book); //根据元素删</span></span><br><span class="line">                System.out.println(name+<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">                <span class="comment">//该类型的图书已经全部删除了，直接删除该类型</span></span><br><span class="line">                <span class="keyword">if</span>(list.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                    bookMap.remove(type);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">//结束方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果运行到这里，说明没有这本书</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的书名不存在，无法删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改图书</span></span><br><span class="line">    <span class="comment">//逻辑参考删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">editBook</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要修改的书籍类型&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">//如果类型不存在，提示修改失败，</span></span><br><span class="line">        <span class="keyword">if</span>(!bookMap.containsKey(type))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的类型不存在，无法修改&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//结束方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//类型是存在的，根据类型获取图书集合</span></span><br><span class="line">        ArrayList&lt;Book&gt; list = bookMap.get(type);</span><br><span class="line">        <span class="comment">//录入书名，去list中查找是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要修改的书名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">//根据书名找图书</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(book.getName().equals(oldName))&#123;</span><br><span class="line">                <span class="comment">//修改</span></span><br><span class="line">                System.out.println(<span class="string">&quot;请输入新书名：&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                <span class="comment">//自行补充书名去重的判断</span></span><br><span class="line">                System.out.println(<span class="string">&quot;请输入新的价格：&quot;</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">                book.setName(newName);</span><br><span class="line">                book.setPrice(price);</span><br><span class="line">                System.out.println(<span class="string">&quot;修改成功，新的书名：&quot;</span>+newName);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的书名不存在的，无法修改&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>014-java语法加强之Set集合、迭代器、增强for参数</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/014-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BSet%E9%9B%86%E5%90%88%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E5%A2%9E%E5%BC%BAfor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<p><strong>导语：</strong>Collection 是 单列集合 的根接口。<br>            Collection有两个重要的子接口，分别是List和Set接口。</p>
<h3 id="1、Set-的特点"><a href="#1、Set-的特点" class="headerlink" title="1、Set 的特点"></a>1、Set 的特点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    存入和取出无序</span></span><br><span class="line"><span class="comment">    元素不重复</span></span><br><span class="line"><span class="comment">    无索引</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;c++&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;python&quot;</span>);</span><br><span class="line">        System.out.println(set.remove(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">11</span>);</span><br><span class="line">        list.add(<span class="number">22</span>);</span><br><span class="line">        list.add(<span class="number">33</span>);</span><br><span class="line">        <span class="comment">//list.remove(11); //错误，11会被当做索引使用</span></span><br><span class="line">        list.remove(Integer.valueOf(<span class="number">11</span>)); <span class="comment">//把11装箱成对象</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、迭代器"><a href="#2、迭代器" class="headerlink" title="2、迭代器"></a>2、迭代器</h3><blockquote>
<p>JDK中提供了一个Iterator接口，称为迭代器，可以实现单列集合元素的遍历。<br>Collection接口中提供了iterator()方法，可以获取迭代器对象。</p>
</blockquote>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    迭代器步骤：</span><br><span class="line">        <span class="number">1</span>.通过集合获取迭代器   集合.<span class="keyword">iterator</span>();</span><br><span class="line">        <span class="number">2</span>.判断是否有元素 hasNext()</span><br><span class="line">        <span class="number">3</span>.如果有元素，调用<span class="keyword">next</span>()获取元素</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="comment">//1.获取迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; itr = set.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断有没元素，如果有元素，调用next获取</span></span><br><span class="line">        <span class="keyword">while</span> ( itr.hasNext() )&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> itr.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(itr.next());</span></span><br><span class="line">        <span class="comment">//System.out.println(itr.next());</span></span><br><span class="line">        <span class="comment">//System.out.println(itr.next());</span></span><br><span class="line">        <span class="comment">//System.out.println(itr.next()); //NoSuchElementException 获取不到元素会报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-注意不要多次调用next"><a href="#2-1-注意不要多次调用next" class="headerlink" title="2.1 注意不要多次调用next"></a>2.1 注意不要多次调用next</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取姓 &quot;李&quot; 的姓名</span></span><br><span class="line">        Iterator&lt;String&gt; itr = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> itr.next();</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;李&quot;</span>))&#123; <span class="comment">//startsWith() 判断字符串是否以内容开头</span></span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误示范：不要在循环中多次调用next</span></span><br><span class="line">       <span class="comment">/* Iterator&lt;String&gt; itr = list.iterator();</span></span><br><span class="line"><span class="comment">        while (itr.hasNext())&#123;</span></span><br><span class="line"><span class="comment">            if(itr.next().startsWith(&quot;李&quot;))&#123; //李四</span></span><br><span class="line"><span class="comment">                System.out.println(itr.next()); //王五</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要重新遍历的话，需要再次获取获取新的迭代器</span></span><br><span class="line">        <span class="comment">/*Iterator&lt;String&gt; itr2 = list.iterator();</span></span><br><span class="line"><span class="comment">        while (itr2.hasNext())&#123;</span></span><br><span class="line"><span class="comment">            String s = itr2.next();</span></span><br><span class="line"><span class="comment">            System.out.println(s);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-并发修改异常"><a href="#2-2-并发修改异常" class="headerlink" title="2.2 并发修改异常"></a>2.2 并发修改异常</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    并发修改异常 ConcurrentModificationException</span></span><br><span class="line"><span class="comment">        原因：遍历集合和增删集合的对象不是同一个</span></span><br><span class="line"><span class="comment">             在使用迭代器遍历数据的时候，不能使用集合对象去增删数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        解决办法：</span></span><br><span class="line"><span class="comment">            使用同一个对象操作集合，遍历的和增删的都是集合对象或者是迭代器对象</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">11</span>);</span><br><span class="line">        list.add(<span class="number">22</span>);</span><br><span class="line">        list.add(<span class="number">33</span>);</span><br><span class="line">        list.add(<span class="number">44</span>);</span><br><span class="line">        list.add(<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用迭代器遍历集合，删除偶数元素</span></span><br><span class="line">        Iterator&lt;Integer&gt; itr = list.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> itr.next();<span class="comment">//获取元素</span></span><br><span class="line">            <span class="keyword">if</span>(number%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//list.remove(number); //ConcurrentModificationException</span></span><br><span class="line">                itr.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、增强for循环"><a href="#3、增强for循环" class="headerlink" title="3、增强for循环"></a>3、增强for循环</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    增强for循环底层是迭代器，作用是简化迭代器的代码</span></span><br><span class="line"><span class="comment">    增强for循环中不能增删元素，否则会有并发修改异常</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用增强for循环代替迭代器,遍历集合</span></span><br><span class="line">        <span class="comment">/*for(元素类型  变量 : 数组或单列集合)&#123;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">for</span>(String  s : set)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用增强for循环遍历数组</span></span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a : array)&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用增强for循环，输出索引为偶数的元素（了解）</span></span><br><span class="line">        <span class="comment">/*int i = 0;</span></span><br><span class="line"><span class="comment">        for(int a : array)&#123;</span></span><br><span class="line"><span class="comment">            if(i%2==0) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(a);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            i++;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>反编译后的代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator(); iterator.hasNext(); System.out.println(s))&#123;</span><br><span class="line">            s = (String)iterator.next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator(); <span class="comment">//只会执行一次</span></span><br><span class="line">        iterator.hasNext();</span><br><span class="line">        s = (String)iterator.next();</span><br><span class="line">        System.out.println(s)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、HashSet的原理"><a href="#4、HashSet的原理" class="headerlink" title="4、HashSet的原理"></a>4、HashSet的原理</h3><blockquote>
<p>重写equals和hashCode方法，HashSet集合会根据这两个方法的结果去重</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">//重写equals和hashCode方法，HashSet集合会根据这两个方法的结果去重</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：创建3个学生存储到HashSet中，学生包含姓名，年龄属性。</span></span><br><span class="line"><span class="comment">    如果对象姓名，年龄都相同，则认为是同一人，不存储。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    HashSet集合存储自定义元素，需要重写equals和hashCode方法，才能根据属性值去重</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Student&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">28</span>));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">17</span>));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">17</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(Student s : hs)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、LinkedHashSet使用"><a href="#5、LinkedHashSet使用" class="headerlink" title="5、LinkedHashSet使用"></a>5、LinkedHashSet使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用集合，把数组中重复的元素去掉，把剩下的不重复的元素存入新的数组中，要求顺序和之前的数组一样</span></span><br><span class="line">        <span class="comment">//效果&#123;1,  2, 3,  5,  4, 6 &#125;;</span></span><br><span class="line">        <span class="comment">//使用LinkedHashSet，既能去除重复，又能保证存入和取出的顺序</span></span><br><span class="line">        LinkedHashSet&lt;Integer&gt; link = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            link.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把剩下的不重复的元素存入新的数组中</span></span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[link.size()];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把集合的数据，遍历出来，添加到新的数组中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Integer a : link)&#123;</span><br><span class="line">            arr2[i] = a;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、TreeSet-使用"><a href="#6、TreeSet-使用" class="headerlink" title="6、TreeSet 使用"></a>6、TreeSet 使用</h3><p><strong>TreeSet 集合的特点：</strong></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">TreeSet是<span class="keyword">Set</span>接口下的集合。</span><br><span class="line">元素无索引，不重复。</span><br><span class="line">TreeSet集合会自动对元素进行排序。</span><br></pre></td></tr></table></figure>

<p><strong>排序规则：</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">元素为数字时，默认按照升序排序。（从小到大）</span><br><span class="line">元素为字符串时，按照字符的编码值升序排序。</span><br><span class="line">如果元素为自定义类型，需要指定排序规则。</span><br></pre></td></tr></table></figure>



<h5 id="6-1-内置自动排序"><a href="#6-1-内置自动排序" class="headerlink" title="6.1 内置自动排序"></a>6.1 内置自动排序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Integer&gt; ts1 = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts1.add(<span class="number">22</span>);</span><br><span class="line">        ts1.add(<span class="number">11</span>);</span><br><span class="line">        ts1.add(<span class="number">44</span>);</span><br><span class="line">        ts1.add(<span class="number">33</span>);</span><br><span class="line">        <span class="comment">//ts1.add(33); //自动去重</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer a : ts1) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TreeSet&lt;String&gt; ts2 = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts2.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        ts2.add(<span class="string">&quot;aac&quot;</span>);</span><br><span class="line">        ts2.add(<span class="string">&quot;aad&quot;</span>);</span><br><span class="line">        ts2.add(<span class="string">&quot;python&quot;</span>);</span><br><span class="line">        ts2.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        ts2.add(<span class="string">&quot;黑马&quot;</span>);</span><br><span class="line">        ts2.add(<span class="string">&quot;传智&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println((int)&#x27;黑&#x27;); //40657</span></span><br><span class="line">        <span class="comment">//System.out.println((int)&#x27;传&#x27;); //20256</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : ts2) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-2-Comparable接口"><a href="#6-2-Comparable接口" class="headerlink" title="6.2 Comparable接口"></a>6.2 Comparable接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        this：代表要添加的元素</span></span><br><span class="line"><span class="comment">        o :集合中已经存在的元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        返回值正数：要添加的元素比较大，存入右边</span></span><br><span class="line"><span class="comment">        返回值负数：要添加的元素比较小，存入左边</span></span><br><span class="line"><span class="comment">        返回值0：要添加的元素已经存在，不会存入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age - o.age; <span class="comment">//年龄升序</span></span><br><span class="line">       <span class="comment">//return o.age - this.age; //年龄降序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*int result = this.age - o.age;</span></span><br><span class="line"><span class="comment">        if(result==0)&#123;</span></span><br><span class="line"><span class="comment">            //如果年龄一样，按照姓名升序排序</span></span><br><span class="line"><span class="comment">            return this.name.compareTo(o.name);</span></span><br><span class="line"><span class="comment">        &#125;else &#123;</span></span><br><span class="line"><span class="comment">            return result;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：</span></span><br><span class="line"><span class="comment">    使用TreeSet存储学生对象，并按照年龄从小到大排列</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Student元素 实现Comparable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">16</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">21</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、TreeSet-比较器排序"><a href="#7、TreeSet-比较器排序" class="headerlink" title="7、TreeSet 比较器排序"></a>7、TreeSet 比较器排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让构造方法接收比较器对象</span></span><br><span class="line">        <span class="comment">//如果两种排序规则都有，比较器优先级更高</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="comment">//return o1.getAge() - o2.getAge(); //年龄升序</span></span><br><span class="line">                <span class="keyword">return</span> o2.getAge() - o1.getAge(); <span class="comment">//年龄降序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">16</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合元素是数字，默认就是升序排序，如果需要降序排序，</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>小数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小数降序排序</span></span><br><span class="line">        TreeSet&lt;Double&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Double o1, Double o2)</span> &#123;</span><br><span class="line">                <span class="comment">//return (int)(o2 - o1); //10.6-10.5  0.1，强转成0，认为重复了</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> o2 - o1;</span><br><span class="line">                <span class="keyword">if</span>(result&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ts.add(<span class="number">10.6</span>);</span><br><span class="line">        ts.add(<span class="number">10.5</span>);</span><br><span class="line">        ts.add(<span class="number">10.7</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ts);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、排序练习"><a href="#8、排序练习" class="headerlink" title="8、排序练习"></a>8、排序练习</h3><h5 id="8-1-TreeSet-排序练习"><a href="#8-1-TreeSet-排序练习" class="headerlink" title="8.1 TreeSet 排序练习"></a>8.1 TreeSet 排序练习</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> score</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, score = &quot;</span> + score + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">98.5</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">98.6</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">98.4</span>);</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="comment">/*double d =  o2.getScore() -o1.getScore(); //按照考试分数从高到低排序。</span></span><br><span class="line"><span class="comment">                if(d&lt;0)&#123;</span></span><br><span class="line"><span class="comment">                    return -1;</span></span><br><span class="line"><span class="comment">                &#125;else if(d&gt;0)&#123;</span></span><br><span class="line"><span class="comment">                    return 1;</span></span><br><span class="line"><span class="comment">                &#125;else &#123;</span></span><br><span class="line"><span class="comment">                    return 0;</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//return Double.compare(o2.getScore(), o1.getScore()); //降序</span></span><br><span class="line">                <span class="keyword">return</span> Double.compare(o1.getScore(), o2.getScore()); <span class="comment">//升序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-2-Collections的排序"><a href="#8-2-Collections的排序" class="headerlink" title="8.2 Collections的排序"></a>8.2 Collections的排序</h5><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"><span class="keyword">sort</span>(List<span class="symbol">&lt;T&gt;</span> <span class="keyword">list</span>) 根据自然顺序对<span class="keyword">list</span>集合的元素进行升序排序。</span><br><span class="line"><span class="keyword">sort</span>(List<span class="symbol">&lt;T&gt;</span> <span class="keyword">list</span>, Comparator<span class="symbol">&lt;T&gt;</span> <span class="keyword">c</span>) 根据指定的比较器,对<span class="keyword">list</span>集合元素进行自定义排序。</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">11</span>);</span><br><span class="line">        list.add(<span class="number">33</span>);</span><br><span class="line">        list.add(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用元素默认的排序规则排序</span></span><br><span class="line">        <span class="comment">//Collections.sort(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用指定的排序规则排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、斗地主排序"><a href="#9、斗地主排序" class="headerlink" title="9、斗地主排序"></a>9、斗地主排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//纸牌类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Card</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Card&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String number; <span class="comment">//牌号</span></span><br><span class="line">    <span class="keyword">private</span> String color; <span class="comment">//花色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; <span class="comment">//使用变量进行排序</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Card o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o.id - <span class="built_in">this</span>.id; <span class="comment">//id降序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Card</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Card</span><span class="params">(String number, String color, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(String number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> color</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//2♠</span></span><br><span class="line">        <span class="keyword">return</span> number+color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GardPlay</span> &#123;</span><br><span class="line">    <span class="comment">//放置纸牌的集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Card&gt; cardList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化纸牌（保证只初始化一次）</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cardList.add(<span class="keyword">new</span> <span class="title class_">Card</span>(<span class="string">&quot;大☠&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">54</span>));</span><br><span class="line">        cardList.add(<span class="keyword">new</span> <span class="title class_">Card</span>(<span class="string">&quot;小☠&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">53</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 花色</span></span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♠&quot;</span>,<span class="string">&quot;♥&quot;</span>,<span class="string">&quot;♣&quot;</span>,<span class="string">&quot;♦&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//牌号</span></span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;J&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环添加</span></span><br><span class="line">        <span class="comment">//数字是外循环</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">52</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="comment">//花色是内循环</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; colors.length; j++) &#123;</span><br><span class="line">                cardList.add(<span class="keyword">new</span> <span class="title class_">Card</span>(numbers[i], colors[j],id));</span><br><span class="line">                id--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始游戏</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;洗牌前：&quot;</span>+ cardList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌</span></span><br><span class="line">        Collections.shuffle(cardList);</span><br><span class="line">        System.out.println(<span class="string">&quot;洗牌后：&quot;</span>+ cardList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发牌</span></span><br><span class="line">        <span class="comment">//把51张牌均匀发给3个玩家，一张一张发牌</span></span><br><span class="line">        ArrayList&lt;Card&gt; player1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Card&gt; player2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Card&gt; player3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            player1  0  3  6  i%3==0</span></span><br><span class="line"><span class="comment">            player2  1  4  7  i%3==1</span></span><br><span class="line"><span class="comment">            player3  2  5  8  i%3==2</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">            <span class="type">Card</span> <span class="variable">card</span> <span class="operator">=</span> cardList.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                player1.add(card);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                player2.add(card);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                player3.add(card);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//底牌</span></span><br><span class="line">        ArrayList&lt;Card&gt; diPai = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(diPai, cardList.get(<span class="number">51</span>),cardList.get(<span class="number">52</span>),cardList.get(<span class="number">53</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对玩家的纸牌进行排序</span></span><br><span class="line">        Collections.sort(player1);</span><br><span class="line">        Collections.sort(player2);</span><br><span class="line">        Collections.sort(player3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看牌</span></span><br><span class="line">        System.out.println(<span class="string">&quot;玩家1：&quot;</span>+player1);</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家2：&quot;</span>+player2);</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家3：&quot;</span>+player3);</span><br><span class="line">        System.out.println(<span class="string">&quot;底牌：&quot;</span>+diPai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10、算法"><a href="#10、算法" class="headerlink" title="10、算法"></a>10、算法</h3><h5 id="10-1-冒泡排序"><a href="#10-1-冒泡排序" class="headerlink" title="10.1 冒泡排序"></a>10.1 冒泡排序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    冒泡排序</span></span><br><span class="line"><span class="comment">        原理：相邻元素两两比较，大的元素往后放</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        总轮数：数组长度-1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        外循环控制轮数</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; arr.length-1; i++) &#123;</span></span><br><span class="line"><span class="comment">            内循环：控制每轮比较的次数</span></span><br><span class="line"><span class="comment">            第1轮 i=0    j&lt;3-0</span></span><br><span class="line"><span class="comment">              arr[0]  arr[1]</span></span><br><span class="line"><span class="comment">              arr[1]  arr[2]</span></span><br><span class="line"><span class="comment">              arr[2]  arr[3]</span></span><br><span class="line"><span class="comment">              for(int j=0; j&lt;arr.length-1-i; j++)&#123;</span></span><br><span class="line"><span class="comment">                 arr[j]  arr[j+1]</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            第2轮 i=1    j&lt;3-1</span></span><br><span class="line"><span class="comment">              arr[0]  arr[1]</span></span><br><span class="line"><span class="comment">              arr[1]  arr[2]</span></span><br><span class="line"><span class="comment">              for(int j=0; j&lt;arr.length-1-i; j++)&#123;</span></span><br><span class="line"><span class="comment">                 arr[j]  arr[j+1]</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            第3轮 i=2    j&lt;3-2</span></span><br><span class="line"><span class="comment">              arr[0]  arr[1]</span></span><br><span class="line"><span class="comment">              for(int j=0; j&lt;arr.length-1-i; j++)&#123;</span></span><br><span class="line"><span class="comment">                 arr[j]  arr[j+1]</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外循环控制轮数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环：控制每轮比较的次数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;arr.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line">                <span class="comment">//相邻元素的比较</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//交换位置</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Arrays.sort(arr); //工具类的排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环结束，打印数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="10-2-选择排序"><a href="#10-2-选择排序" class="headerlink" title="10.2 选择排序"></a>10.2 选择排序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    选择排序</span></span><br><span class="line"><span class="comment">        原理：固定一个位置，和其他后面的所有位置比较</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        外循环控制轮数</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; arr.length-1; i++) &#123;</span></span><br><span class="line"><span class="comment">            第1轮：i=0</span></span><br><span class="line"><span class="comment">               arr[0] arr[1]</span></span><br><span class="line"><span class="comment">               arr[0] arr[2]</span></span><br><span class="line"><span class="comment">               arr[0] arr[3]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                for(int j=i+1; j&lt;arr.length; j++)&#123;</span></span><br><span class="line"><span class="comment">                    arr[i] arr[j]</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            第2轮：i=1</span></span><br><span class="line"><span class="comment">               arr[1] arr[2]</span></span><br><span class="line"><span class="comment">               arr[1] arr[3]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">               for(int j=i+1; j&lt;arr.length; j++)&#123;</span></span><br><span class="line"><span class="comment">                  arr[i]  arr[j]</span></span><br><span class="line"><span class="comment">               &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            第3轮：i=2</span></span><br><span class="line"><span class="comment">               arr[2] arr[3]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">               for(int j=i+1; j&lt;arr.length; j++)&#123;</span></span><br><span class="line"><span class="comment">                  arr[i]  arr[j]</span></span><br><span class="line"><span class="comment">               &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外循环控制轮数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//每轮比较的次数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环结束，打印数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="10-3-二分查找"><a href="#10-3-二分查找" class="headerlink" title="10.3 二分查找"></a>10.3 二分查找</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    二分查找</span></span><br><span class="line"><span class="comment">        前提：数组要排序</span></span><br><span class="line"><span class="comment">        思想：对半查找，每次减少至少一半</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">21</span>, <span class="number">32</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">67</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(getIndex(arr,<span class="number">23</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义方法，查找数组中某个元素的索引，并返回该索引，找不到返回-1</span></span><br><span class="line"><span class="comment">        返回值 ：int</span></span><br><span class="line"><span class="comment">        参数 ：数组，元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>  <span class="title function_">getIndex</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> arr.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中间索引</span></span><br><span class="line">        <span class="comment">//Ctrl + Alt + T 快速生成环绕的代码</span></span><br><span class="line">        <span class="keyword">while</span> (minIndex &lt;= maxIndex) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">midIndex</span> <span class="operator">=</span> (minIndex+maxIndex)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(number &lt; arr[midIndex])&#123;</span><br><span class="line">                <span class="comment">//要找的元素在中间值的左边，砍掉右边的元素</span></span><br><span class="line">                maxIndex = midIndex - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number &gt; arr[midIndex])&#123;</span><br><span class="line">                <span class="comment">//要找的元素在中间值的右边，砍掉左边的元素</span></span><br><span class="line">                minIndex = midIndex + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//要找的就是中间值</span></span><br><span class="line">                <span class="keyword">return</span> midIndex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环结束，说明没有找到元素，返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>013-java语法加强之List集合、Collections工具类、泛型和可变参数</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/013-java%E8%AF%AD%E6%B3%95%E5%8A%A0%E5%BC%BA%E4%B9%8BList%E9%9B%86%E5%90%88%E3%80%81Collections%E5%B7%A5%E5%85%B7%E7%B1%BB%E3%80%81%E6%B3%9B%E5%9E%8B%E5%92%8C%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>

<h3 id="1、List接口"><a href="#1、List接口" class="headerlink" title="1、List接口"></a>1、List接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    元素有索引</span></span><br><span class="line"><span class="comment">    元素可重复</span></span><br><span class="line"><span class="comment">    存和取的顺序一致</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//往末尾添加</span></span><br><span class="line">        list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c++&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;python&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往指定位置添加</span></span><br><span class="line">        <span class="comment">//list.add(1,&quot;大数据&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除元素</span></span><br><span class="line">        <span class="comment">//String s = list.remove(0);</span></span><br><span class="line">        <span class="comment">//System.out.println(s);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//只删除找到的第一个</span></span><br><span class="line">        <span class="comment">//boolean b = list.remove(&quot;java&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(b);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改（替换）</span></span><br><span class="line">        <span class="comment">//String s = list.set(2, &quot;javase&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(s);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除整个集合</span></span><br><span class="line">        <span class="comment">//list.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断集合中是否包含某个元素</span></span><br><span class="line">        <span class="comment">//boolean b = list.contains(&quot;python&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(b);</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;33&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量添加（把一个集合合并到另一个集合）</span></span><br><span class="line">        <span class="comment">//list2的元素全部加入list中</span></span><br><span class="line">        list.addAll(list2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(list.get(0));</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、ArrayList集合（重点"><a href="#2、ArrayList集合（重点" class="headerlink" title="2、ArrayList集合（重点)"></a>2、ArrayList集合（重点)</h3><blockquote>
<p>集合删除元素特点</p>
</blockquote>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">集合删除元素的特点:</span></span><br><span class="line">集合删除时，前面的元素被删除，后面的元素索引会改变</span><br><span class="line">集合的个数会变</span><br></pre></td></tr></table></figure>

<h5 id="2-1-删除集合元素注意事项"><a href="#2-1-删除集合元素注意事项" class="headerlink" title="2.1 删除集合元素注意事项"></a>2.1 删除集合元素注意事项</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合删除元素的特点</span></span><br><span class="line">        <span class="comment">//集合删除时，前面的元素被删除，后面的元素索引会改变</span></span><br><span class="line">        <span class="comment">//集合的个数会变</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式1：删除集合的所有&quot;b&quot;元素</span></span><br><span class="line">        <span class="comment">/*for(int i=0; i&lt;list.size(); i++)&#123;</span></span><br><span class="line"><span class="comment">            String s = list.get(i);</span></span><br><span class="line"><span class="comment">            if(s.equals(&quot;b&quot;))&#123;</span></span><br><span class="line"><span class="comment">                list.remove(i);</span></span><br><span class="line"><span class="comment">                i--;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：倒序遍历，删除</span></span><br><span class="line">        <span class="comment">/*for(int i=list.size()-1; i&gt;=0; i--)&#123;</span></span><br><span class="line"><span class="comment">            String s = list.get(i);</span></span><br><span class="line"><span class="comment">            if(s.equals(&quot;b&quot;))&#123;</span></span><br><span class="line"><span class="comment">                list.remove(i);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式3：</span></span><br><span class="line">        <span class="comment">/*while (true)&#123;</span></span><br><span class="line"><span class="comment">            boolean result = list.remove(&quot;b&quot;);</span></span><br><span class="line"><span class="comment">            if(result==false)&#123;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*while (list.remove(&quot;b&quot;))&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-案例"><a href="#2-2-案例" class="headerlink" title="2.2 案例"></a>2.2 案例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要求：</span></span><br><span class="line"><span class="comment">    定义Student学生类，包含姓名、年龄 属性。</span></span><br><span class="line"><span class="comment">    创建ArrayList集合，存储3个学生对象到集合中。</span></span><br><span class="line"><span class="comment">    找出年龄最小的学生对象，并从集合中删除该学生。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找出年龄最小的学生对象，并从集合中删除该学生。</span></span><br><span class="line">        <span class="comment">//找出最小年龄的学生，以及对应的索引，根据索引删除</span></span><br><span class="line">        <span class="comment">//记录最小年龄</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minAge</span> <span class="operator">=</span> list.get(<span class="number">0</span>).getAge();</span><br><span class="line">        <span class="comment">//记录最小年龄的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> list.get(i).getAge();</span><br><span class="line">            <span class="keyword">if</span>(age&lt;minAge)&#123;</span><br><span class="line">                minAge = age;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环结束后，根据索引删除</span></span><br><span class="line">        list.remove(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有多个年龄一样的，遍历删除</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; list.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">            Student s = list.get(i);</span></span><br><span class="line"><span class="comment">            if(s.getAge()==minAge)&#123;</span></span><br><span class="line"><span class="comment">                list.remove(i);</span></span><br><span class="line"><span class="comment">                i--;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印剩下的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、ArrayList-底层原理"><a href="#3、ArrayList-底层原理" class="headerlink" title="3、ArrayList 底层原理"></a>3、ArrayList 底层原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">目标：能够简述ArrayList的底层实现</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span>ArrayList底层是什么数据结构？</span><br><span class="line">         Object类型的数组， Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>底层的数组何时创建，初始化长度是多少？</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        使用无参构造方法创建对象时，初始化数组长度为<span class="number">0</span>，节省内存</span><br><span class="line">        使用带参构造方法创建对象时，可以手动指定数组的长度，提高效率</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span>首次调用add方法添加元素的时候，数组的长度变为多少？</span><br><span class="line">        长度由<span class="number">0</span>变为<span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="number">4.</span>如果添加的元素超过数组长度，怎么办？</span><br><span class="line">        数组会进行扩容，扩容的算法：旧长度 + 旧长度/<span class="number">2</span></span><br><span class="line">                                  <span class="number">10</span>+ <span class="number">10</span>/<span class="number">2</span> = <span class="number">10</span>+<span class="number">5</span>=<span class="number">15</span></span><br><span class="line">                                  <span class="number">15</span>+ <span class="number">15</span>/<span class="number">2</span> = <span class="number">15</span>+<span class="number">7</span>=<span class="number">22</span></span><br><span class="line">        <span class="keyword">if</span> (s == elementData.length)</span><br><span class="line">                   elementData = grow();</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">// 相当于int newCapacity = oldCapacity + (oldCapacity / 2);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建集合时，手动指定数组的长度</span></span><br><span class="line">        <span class="comment">//ArrayList&lt;Integer&gt; s = new ArrayList&lt;&gt;(20);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用无参构造方法创建对象时，初始化数组长度为0</span></span><br><span class="line">        ArrayList&lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        s.add(<span class="number">11</span>); <span class="comment">//长度由0变为10</span></span><br><span class="line">        s.add(<span class="number">12</span>);</span><br><span class="line">        s.add(<span class="number">13</span>);</span><br><span class="line">        s.add(<span class="number">14</span>);</span><br><span class="line">        s.add(<span class="number">15</span>);</span><br><span class="line">        s.add(<span class="number">16</span>);</span><br><span class="line">        s.add(<span class="number">17</span>);</span><br><span class="line">        s.add(<span class="number">18</span>);</span><br><span class="line">        s.add(<span class="number">19</span>);</span><br><span class="line">        s.add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        s.add(<span class="number">21</span>);</span><br><span class="line">        s.add(<span class="number">22</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、数据结构"><a href="#4、数据结构" class="headerlink" title="4、数据结构"></a>4、数据结构</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    栈    先进后出  弹夹</span></span><br><span class="line"><span class="comment">    队列  先进先出  排队</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    数组  查询快，增删慢 （索引）定义的时候就指定空间  ArrayList</span></span><br><span class="line"><span class="comment">    链表  查询慢，增删快 （节点）空间不受限制   LinkedList</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="5、LinkedList-集合"><a href="#5、LinkedList-集合" class="headerlink" title="5、LinkedList 集合"></a>5、LinkedList 集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        linkedList.add(<span class="number">22</span>);</span><br><span class="line">        linkedList.add(<span class="number">33</span>);</span><br><span class="line">        linkedList.add(<span class="number">44</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//头尾添加</span></span><br><span class="line">        <span class="comment">//linkedList.addFirst(11);</span></span><br><span class="line">        <span class="comment">//linkedList.addLast(55);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除头尾</span></span><br><span class="line">        <span class="comment">//Integer first = linkedList.removeFirst();</span></span><br><span class="line">        <span class="comment">//Integer last = linkedList.removeLast();</span></span><br><span class="line">        <span class="comment">//System.out.println(first);</span></span><br><span class="line">        <span class="comment">//System.out.println(last);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取头尾</span></span><br><span class="line">        System.out.println( linkedList.getFirst() );</span><br><span class="line">        System.out.println( linkedList.getLast() );</span><br><span class="line"></span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、可变参数"><a href="#6、可变参数" class="headerlink" title="6、可变参数"></a>6、可变参数</h3><h5 id="6-1-单个可变参数"><a href="#6-1-单个可变参数" class="headerlink" title="6.1 单个可变参数"></a>6.1 单个可变参数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println( getSum() );</span><br><span class="line">        System.out.println( getSum(<span class="number">1</span>) );</span><br><span class="line">        System.out.println( getSum(<span class="number">1</span>,<span class="number">2</span>) );</span><br><span class="line">        System.out.println( getSum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) );</span><br><span class="line">        System.out.println( getSum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) );</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println( getSum(arr) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可变参数：调用时候，参数的个数是可变的，（0-n个）</span></span><br><span class="line">    <span class="comment">//可变参数底层就是数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>... arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span>  <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sum+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-2-可变参数注意事项"><a href="#6-2-可变参数注意事项" class="headerlink" title="6.2 可变参数注意事项"></a>6.2 可变参数注意事项</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正确</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(  <span class="type">double</span> d,<span class="type">int</span> ... a)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误，可变参数一定要放到最后一个参数的位置</span></span><br><span class="line"><span class="comment">/*public static void test( int ... a, double d)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//错误，一个方法，只能最多有一个可变参数</span></span><br><span class="line"><span class="comment">/*public static void test(int ... a , int ...b)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br></pre></td></tr></table></figure>

<h3 id="7、泛型概述"><a href="#7、泛型概述" class="headerlink" title="7、泛型概述"></a>7、泛型概述</h3><h5 id="7-1-泛型的作用"><a href="#7-1-泛型的作用" class="headerlink" title="7.1 泛型的作用"></a>7.1 泛型的作用</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">泛型：</span><br><span class="line"><span class="code">    是JDK5中引入的特性，它提供了编译时类型安全检测机制</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">泛型的好处：</span><br><span class="line"><span class="code">    把运行时期的问题提前到了编译期间</span></span><br><span class="line"><span class="code">    避免了强制类型转换</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;3.14&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-2-泛型类"><a href="#7-2-泛型类" class="headerlink" title="7.2 泛型类"></a>7.2 泛型类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//泛型类的定义</span></span><br><span class="line"><span class="comment">//&lt;E&gt; 代表一个数据类型，通常用一个大写字母表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> E value; <span class="comment">//value的变量的数据类型是可变的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建对象时，需要确定泛型的类型</span></span><br><span class="line">    Box&lt;String&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">    box1.setValue(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> box1.getValue();</span><br><span class="line"></span><br><span class="line">    Box&lt;Double&gt; box2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">    box2.setValue(<span class="number">3.14</span>);</span><br><span class="line">    <span class="type">Double</span> <span class="variable">value1</span> <span class="operator">=</span> box2.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-3-泛型方法"><a href="#7-3-泛型方法" class="headerlink" title="7.3 泛型方法"></a>7.3 泛型方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//调用方法时，确定方法的泛型</span></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        printArray(arr);</span><br><span class="line"></span><br><span class="line">        Double[] arr2 = &#123;<span class="number">1.2</span>, <span class="number">2.3</span>&#125;;</span><br><span class="line">        printArray(arr2);</span><br><span class="line"></span><br><span class="line">        String[] arr3 = &#123;<span class="string">&quot;11&quot;</span>,<span class="string">&quot;22&quot;</span>&#125;;</span><br><span class="line">        printArray(arr3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;T&gt; 定义泛型，使用T表示某一个数据类型</span></span><br><span class="line">    <span class="comment">//T[]  引用泛型，使用泛型，T可以表示任意的引用类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(T[] array)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==array.length-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(array[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(array[i]+<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-4-泛型通配符"><a href="#7-4-泛型通配符" class="headerlink" title="7.4 泛型通配符"></a>7.4 泛型通配符</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//奥迪汽车</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Audi</span> <span class="keyword">extends</span> <span class="title class_">Car</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//吉普汽车</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jeep</span> <span class="keyword">extends</span> <span class="title class_">Car</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//汽车父类</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Audi&gt; audis = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        audis.add(<span class="keyword">new</span> <span class="title class_">Audi</span>());</span><br><span class="line">        play(audis);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Jeep&gt; jeeps = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        jeeps.add(<span class="keyword">new</span> <span class="title class_">Jeep</span>());</span><br><span class="line">        play(jeeps);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Car&gt; cars = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        cars.add(<span class="keyword">new</span> <span class="title class_">Car</span>());</span><br><span class="line">        play(cars);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        play(list);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ArrayList&lt;Object&gt; list1 = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        play(list1);*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法，可以接收任意汽车集合</span></span><br><span class="line">    <span class="comment">//？ 通配符，可以匹配任意类型</span></span><br><span class="line">    <span class="comment">/*public static void play(ArrayList&lt;?&gt; list)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;? extends Car&gt; 通配Car或者Car的子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(ArrayList&lt;? extends Car&gt; list)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;? super Car&gt; 通配Car或者Car的父类</span></span><br><span class="line">    <span class="comment">/*public static void play(ArrayList&lt;? super Car&gt; list)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型不支持继承的引用</span></span><br><span class="line">    <span class="comment">/*public static void play(ArrayList&lt;Car&gt; list)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型不支持重载</span></span><br><span class="line">    <span class="comment">/*public static void play(ArrayList&lt;Jeep&gt; list)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br></pre></td></tr></table></figure>

<h3 id="8、Collections-工具类"><a href="#8、Collections-工具类" class="headerlink" title="8、Collections 工具类"></a>8、Collections 工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量添加</span></span><br><span class="line">    Collections.addAll(list,<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机打乱顺序</span></span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、斗地主案例"><a href="#9、斗地主案例" class="headerlink" title="9、斗地主案例"></a>9、斗地主案例</h3><h5 id="9-1-Card类"><a href="#9-1-Card类" class="headerlink" title="9.1 Card类"></a>9.1 Card类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//纸牌类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String number; <span class="comment">//牌号</span></span><br><span class="line">    <span class="keyword">private</span> String color; <span class="comment">//花色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Card</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Card</span><span class="params">(String number, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(String number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> color</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//2♠</span></span><br><span class="line">        <span class="keyword">return</span> number+color;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="9-2-CardPlay"><a href="#9-2-CardPlay" class="headerlink" title="9.2 CardPlay"></a>9.2 CardPlay</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    花色：&#123;&quot;♠&quot;,&quot;♥&quot;,&quot;♣&quot;,&quot;♦&quot;&#125;</span></span><br><span class="line"><span class="comment">    牌号：&#123;&quot;2&quot;,&quot;A&quot;,&quot;K&quot;,&quot;Q&quot;,&quot;J&quot;,&quot;10&quot;,&quot;9&quot;,&quot;8&quot;,&quot;7&quot;,&quot;6&quot;,&quot;5&quot;,&quot;4&quot;,&quot;3&quot;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GardPlay</span> &#123;</span><br><span class="line">    <span class="comment">//放置纸牌的集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Card&gt; cardList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化纸牌（保证只初始化一次）</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cardList.add(<span class="keyword">new</span> <span class="title class_">Card</span>(<span class="string">&quot;大☠&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">        cardList.add(<span class="keyword">new</span> <span class="title class_">Card</span>(<span class="string">&quot;小☠&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 花色</span></span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♠&quot;</span>,<span class="string">&quot;♥&quot;</span>,<span class="string">&quot;♣&quot;</span>,<span class="string">&quot;♦&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//牌号</span></span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;J&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环添加</span></span><br><span class="line">        <span class="comment">//数字是外循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="comment">//花色是内循环</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; colors.length; j++) &#123;</span><br><span class="line">                cardList.add(<span class="keyword">new</span> <span class="title class_">Card</span>(numbers[i], colors[j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始游戏</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;洗牌前：&quot;</span>+ cardList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌</span></span><br><span class="line">        Collections.shuffle(cardList);</span><br><span class="line">        System.out.println(<span class="string">&quot;洗牌后：&quot;</span>+ cardList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发牌</span></span><br><span class="line">        <span class="comment">//把51张牌均匀发给3个玩家，一张一张发牌</span></span><br><span class="line">        ArrayList&lt;Card&gt; player1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Card&gt; player2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Card&gt; player3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            player1  0  3  6  i%3==0</span></span><br><span class="line"><span class="comment">            player2  1  4  7  i%3==1</span></span><br><span class="line"><span class="comment">            player3  2  5  8  i%3==2</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">            <span class="type">Card</span> <span class="variable">card</span> <span class="operator">=</span> cardList.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                player1.add(card);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                player2.add(card);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                player3.add(card);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//底牌</span></span><br><span class="line">        ArrayList&lt;Card&gt; diPai = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(diPai, cardList.get(<span class="number">51</span>),cardList.get(<span class="number">52</span>),cardList.get(<span class="number">53</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看牌</span></span><br><span class="line">        System.out.println(<span class="string">&quot;玩家1：&quot;</span>+player1);</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家2：&quot;</span>+player2);</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家3：&quot;</span>+player3);</span><br><span class="line">        System.out.println(<span class="string">&quot;底牌：&quot;</span>+diPai);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>012-java加强语法之常用API、正则表达式</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/012-java%E5%8A%A0%E5%BC%BA%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%B8%B8%E7%94%A8API%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、Math类"><a href="#1、Math类" class="headerlink" title="1、Math类"></a>1、Math类</h3><blockquote>
<p>Math类介绍：<br>—Math是数学工具类，包含执行基本数字运算的各种方法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math类常用方法：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>  <span class="title function_">abs</span><span class="params">(<span class="type">int</span> a)</span> : 返回绝对值</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">ceil</span><span class="params">(<span class="type">double</span> a)</span> : 向上取整（天花板）</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">floor</span><span class="params">(<span class="type">double</span> a)</span> : 向下取整（地板）</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">round</span><span class="params">(<span class="type">float</span> a)</span> ：四舍五入</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span> : 计算a的b次方</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public static int  abs(int a) : 返回绝对值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Math.abs(-<span class="number">5</span>);<span class="comment">//ctrl + alt + v 生成返回值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ceil(double a) : 向上取整（天花板）</span></span><br><span class="line">        System.out.println( Math.ceil(<span class="number">3.1</span>) ); <span class="comment">//4.0</span></span><br><span class="line">        System.out.println( Math.ceil(<span class="number">3.01</span>) ); <span class="comment">//4.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//floor(double a) : 向下取整（地板）</span></span><br><span class="line">        System.out.println( Math.floor(<span class="number">3.9</span>) ); <span class="comment">//3.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int round(float a) ：四舍五入</span></span><br><span class="line">        System.out.println( Math.round(<span class="number">3.499</span>) ); <span class="comment">//3</span></span><br><span class="line">        System.out.println( Math.round(<span class="number">3.501</span>) ); <span class="comment">//4</span></span><br><span class="line">        System.out.println( Math.round(<span class="number">3.999</span>) ); <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// double pow(double a,double b) : 计算a的b次方（幂）</span></span><br><span class="line">        <span class="comment">//计算2的3次方</span></span><br><span class="line">        System.out.println( <span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span> );</span><br><span class="line">        System.out.println( Math.pow(<span class="number">2</span>,<span class="number">3</span>) ); <span class="comment">//2的3次方 8.0</span></span><br><span class="line">        System.out.println( Math.pow(<span class="number">2</span>,<span class="number">10</span>) ); <span class="comment">//2的10次方  1024.0</span></span><br><span class="line"></span><br><span class="line">        System.out.println( Math.max(<span class="number">11</span>,<span class="number">22</span>) );<span class="comment">//最大值</span></span><br><span class="line">        System.out.println( Math.min(<span class="number">11</span>,<span class="number">22</span>) ); <span class="comment">//最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2、System-类"><a href="#2、System-类" class="headerlink" title="2、System 类"></a>2、System 类</h3><blockquote>
<p>System类介绍：<br>—System系统类，代表当前Java程序的运行平台</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span> 强制退出虚拟机 【停止虚拟机，尽量不要使用】</span><br><span class="line"><span class="keyword">static</span> <span class="type">long</span>  <span class="title function_">currentTimeMillis</span><span class="params">()</span> :获取系统时间（毫秒值）</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src, <span class="type">int</span> srcPos, Object dest, <span class="type">int</span> destPos, <span class="type">int</span> length)</span> 拷贝数组</span><br><span class="line">			arraycopy(原数组, 开始拷贝的索引, 新数组, 放入新数组的开始索引, 拷贝的个数)</span><br></pre></td></tr></table></figure>

<h3 id="3、BigDecimal-类"><a href="#3、BigDecimal-类" class="headerlink" title="3、BigDecimal 类"></a>3、BigDecimal 类</h3><blockquote>
<p>BigDecimal类的加减乘除方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建对象的方式：</span><br><span class="line">    BigDecimal(String val)</span><br><span class="line">    BigDecimal(<span class="type">double</span> val) 不推荐</span><br><span class="line">    BigDecimal.valueOf(<span class="type">double</span> d);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(0.1+0.2); //0.30000000000000004</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.1&quot;</span>);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不要直接使用数字创建对象，容易有精度问题</span></span><br><span class="line">        <span class="comment">//BigDecimal b2 = new BigDecimal(0.1);//0.1000000000000000055511151231257827021181583404541015625</span></span><br><span class="line">        <span class="comment">//System.out.println(b2);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个小数：&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(d+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BigDecimal静态方法valueOf方法,把小数转为BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b3</span> <span class="operator">=</span> BigDecimal.valueOf(d);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>常用方法：</span><br><span class="line">    相加：BigDecimal <span class="title function_">add</span><span class="params">(BigDecimal b)</span></span><br><span class="line">    相减：BigDecimal <span class="title function_">subtract</span><span class="params">(BigDecimal b)</span></span><br><span class="line">    相乘：BigDecimal <span class="title function_">multiply</span><span class="params">(BigDecimal b)</span></span><br><span class="line">    相除：BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal b)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.1&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相加add</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">c</span> <span class="operator">=</span> a.add(b);<span class="comment">//a+b</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把对象重新换为基本类型</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> c.doubleValue();</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相减subtract</span></span><br><span class="line">        System.out.println( a.subtract(b) ); <span class="comment">//a-b</span></span><br><span class="line">        System.out.println( b.subtract(a) ); <span class="comment">//b-a</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//相乘multiply</span></span><br><span class="line">        System.out.println( a.multiply(b) );<span class="comment">//a*b  0.02</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//相除divide（除得尽的）</span></span><br><span class="line">        System.out.println( a.divide(b) ); <span class="comment">//a/b</span></span><br><span class="line">        System.out.println( b.divide(a) ); <span class="comment">//b/a</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相除（除不尽,会报异常）</span></span><br><span class="line">        <span class="comment">//System.out.println( a1.divide(b1) );</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//相除（除不尽,使用重载的方法）</span></span><br><span class="line">        <span class="comment">//divide(BigDecimal divisor, int scale, RoundingMode roundingMode)</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            BigDecimal divisor 除数</span></span><br><span class="line"><span class="comment">            int scale 保留几位小数</span></span><br><span class="line"><span class="comment">            RoundingMode roundingMode 舍入的模式（枚举）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//a1/b1，保留3位小数。四舍五入</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">c2</span> <span class="operator">=</span> a1.divide(b1, <span class="number">3</span>, RoundingMode.HALF_UP);</span><br><span class="line">        System.out.println(c2); <span class="comment">//1.667</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4、包装类"><a href="#4、包装类" class="headerlink" title="4、包装类"></a>4、包装类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">基本数据类型		包装类</span><br><span class="line"><span class="type">byte</span>			Byte</span><br><span class="line"><span class="type">short</span>			Short</span><br><span class="line"><span class="type">int</span>				Integer</span><br><span class="line"><span class="type">long</span>			Long</span><br><span class="line"><span class="type">float</span>			Float</span><br><span class="line"><span class="type">double</span>			Double</span><br><span class="line"><span class="type">char</span>			Character</span><br><span class="line"><span class="type">boolean</span>			Boolean</span><br><span class="line">    </span><br><span class="line">包装类的应用：</span><br><span class="line">    <span class="number">1.</span>包装类作为泛型。</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">	<span class="number">2.</span>基本类型转字符串。</span><br><span class="line">    Integer.toString(基本类型)</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span>字符串转基本类型。（重点）</span><br><span class="line">    Integer.parseInt(字符串)</span><br><span class="line"></span><br><span class="line">    注意：<span class="type">int</span>的默认值是<span class="number">0</span>，Integer的默认值是<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">基本数据类型</th>
<th align="center">包装类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">Byte</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">Short</td>
</tr>
<tr>
<td align="center"><em><strong>int</strong></em></td>
<td align="center"><em><strong>Integer</strong></em></td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">Long</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">Float</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">Double</td>
</tr>
<tr>
<td align="center"><em><strong>char</strong></em></td>
<td align="center"><em><strong>Character</strong></em></td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">Boolean</td>
</tr>
</tbody></table>
<h3 id="5、自动装箱和拆箱"><a href="#5、自动装箱和拆箱" class="headerlink" title="5、自动装箱和拆箱"></a>5、自动装箱和拆箱</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>装箱和拆箱</span><br><span class="line">    装箱：基本数据类型转换为包装类的过程。</span><br><span class="line">    拆箱：包装类转换为基本数据类型的过程。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>自动装箱和拆箱</span><br><span class="line">    自动完成基本类型和包装类的转换</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//自动装箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">obj</span> <span class="operator">=</span> i; <span class="comment">//底层 Integer obj = Integer.valueOf(i);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> obj;  <span class="comment">//底层 int i2 = obj.intValue();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    反编译代码：</span></span><br><span class="line"><span class="comment">    public static void main(String args[])&#123;</span></span><br><span class="line"><span class="comment">		int i = 10;</span></span><br><span class="line"><span class="comment">		Integer obj = Integer.valueOf(i); //手动装箱</span></span><br><span class="line"><span class="comment">		int i2 = obj.intValue(); //手动拆箱</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>



<h3 id="6、Date类"><a href="#6、Date类" class="headerlink" title="6、Date类"></a>6、Date类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：掌握Date类的基本使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.Date类的作用：</span></span><br><span class="line"><span class="comment">        java.util.Date 代表一个精确的时间，精确到毫秒。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.构造方法</span></span><br><span class="line"><span class="comment">        Date()</span></span><br><span class="line"><span class="comment">        Date(long date) : 使用毫秒数创建Date对象（在1970年1月1日 00:00:00 基础上加上指定毫秒数）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.常用方法</span></span><br><span class="line"><span class="comment">        long getTime() ：获取当前时间的毫秒值</span></span><br><span class="line"><span class="comment">        void setTime(long  time) ：设置时间（在1970年1月1日 00:00:00基础上增加设置的毫秒值）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前的系统时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        <span class="comment">//Wed Jun 15 11:47:25 CST 2022</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Wed 星期3</span></span><br><span class="line"><span class="comment">            Jun 6月</span></span><br><span class="line"><span class="comment">            15 15号</span></span><br><span class="line"><span class="comment">            11:47:25 时间</span></span><br><span class="line"><span class="comment">            2022 年</span></span><br><span class="line"><span class="comment">            CST China Standard Time 中国标准时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取毫秒值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> date.getTime(); <span class="comment">//long l = System.currentTimeMillis();</span></span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//了解</span></span><br><span class="line">        <span class="comment">//在1970年1月1日 00:00:00 基础上加上指定毫秒数</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1000</span>); <span class="comment">//在1970年1月1日 00:00:00 基础上加1秒</span></span><br><span class="line">        System.out.println(date1); <span class="comment">//Thu Jan 01 08:00:01 CST 1970</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在1970年1月1日 00:00:00 基础上加上指定毫秒数</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        d.setTime(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-1-日期格式化处理"><a href="#6-1-日期格式化处理" class="headerlink" title="6.1 日期格式化处理"></a>6.1 日期格式化处理</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：能够使用SimpleDateFormat类处理日期格式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.构造方法</span></span><br><span class="line"><span class="comment">        SimpleDateFormat()   使用默认日期模板创建对象。</span></span><br><span class="line"><span class="comment">        SimpleDateFormat(String pattern)  使用指定日期模板创建对象。</span></span><br><span class="line"><span class="comment">        年yyyy</span></span><br><span class="line"><span class="comment">        月MM</span></span><br><span class="line"><span class="comment">        日dd</span></span><br><span class="line"><span class="comment">        时HH 24小时</span></span><br><span class="line"><span class="comment">        分mm</span></span><br><span class="line"><span class="comment">        秒ss</span></span><br><span class="line"><span class="comment">        上午下午a   ,  星期E</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.日期格式化</span></span><br><span class="line"><span class="comment">        public final String format(Date date)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.文本解析</span></span><br><span class="line"><span class="comment">        public Date parse(String source)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//了解</span></span><br><span class="line">        <span class="comment">//使用默认格式，格式化日期</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line">        <span class="comment">//格式化日期</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> sf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(date); <span class="comment">//2022/6/15 下午12:05</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用指定格式，格式化日期</span></span><br><span class="line">        <span class="comment">//SimpleDateFormat sf2 = new SimpleDateFormat(&quot;yyyy-MM-dd  HH:mm:ss&quot;);</span></span><br><span class="line">        <span class="comment">//SimpleDateFormat sf2 = new SimpleDateFormat(&quot;yyyy/MM/dd  HH:mm:ss&quot;);</span></span><br><span class="line">        <span class="comment">//SimpleDateFormat sf2 = new SimpleDateFormat(&quot;MM-dd-yyyy  HH:mm:ss&quot;);</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 a HH时mm分ss秒 E&quot;</span>); <span class="comment">//2022年06月15日 下午 12时15分12秒 周三</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">date2</span> <span class="operator">=</span> sf3.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(date2); <span class="comment">//2022-06-15 12:07:26</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//\n 换行</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;  HH:mm\nyyyy/MM/dd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sf4.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.文本解析</span></span><br><span class="line"><span class="comment">        public Date parse(String source)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2022-10-09&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sf.parse(str);</span><br><span class="line">    System.out.println(date);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-2-日期转换之秒杀活动"><a href="#6-2-日期转换之秒杀活动" class="headerlink" title="6.2 日期转换之秒杀活动"></a>6.2 日期转换之秒杀活动</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：使用日期转换完成需求。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求：</span></span><br><span class="line"><span class="comment">    秒杀开始时间: 2020年11月11日 00:00:00</span></span><br><span class="line"><span class="comment">    秒杀结束时间: 2020年11月11日 00:10:00</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    小贾下单并付款的时间为：</span></span><br><span class="line"><span class="comment">        2020年11月11日 00:03:47</span></span><br><span class="line"><span class="comment">    小皮单并付款的时间为：</span></span><br><span class="line"><span class="comment">        2020年11月11日 00:10:11</span></span><br><span class="line"><span class="comment">    用代码说明这两位同学有没有参加上秒杀活动?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 步骤：</span></span><br><span class="line"><span class="comment">    1. 将字符串格式的日期转为Date类型  parse方法</span></span><br><span class="line"><span class="comment">    2. 将Date对象转为毫秒  getTime方法</span></span><br><span class="line"><span class="comment">    3. 比较毫秒大小</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//创建日期模板</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 将字符串格式的日期转为Date类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="string">&quot;2020年11月11日 00:00:00&quot;</span>;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">beginDate</span> <span class="operator">=</span> sf.parse(begin);</span><br><span class="line">        <span class="comment">//2. 将Date对象转为毫秒</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> beginDate.getTime();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> sf.parse(<span class="string">&quot;2020年11月11日 00:10:00&quot;</span>).getTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">xiaoJia</span> <span class="operator">=</span> sf.parse(<span class="string">&quot;2020年11月11日 00:03:47&quot;</span>).getTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">xiaoPi</span> <span class="operator">=</span> sf.parse(<span class="string">&quot;2020年11月11日 00:10:11&quot;</span>).getTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较时间</span></span><br><span class="line">        <span class="keyword">if</span>(xiaoJia&gt;=beginTime &amp;&amp; xiaoJia&lt;=endTime)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小贾秒杀成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小贾秒杀失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(xiaoPi&gt;=beginTime &amp;&amp; xiaoPi&lt;=endTime)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小皮秒杀成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小皮秒杀失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、Calender-日历类"><a href="#7、Calender-日历类" class="headerlink" title="7、Calender 日历类"></a>7、Calender 日历类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标：学习Calendar类的常用功能</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.创建对象:</span></span><br><span class="line"><span class="comment">        Calendar.getInstance();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.常用方法：</span></span><br><span class="line"><span class="comment">        get(int field) 获取指定日历字段的值</span></span><br><span class="line"><span class="comment">        getTimeInMillies() 返回该日历时间的毫秒值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        set(int field,  int value) 设置某个日历字段的值</span></span><br><span class="line"><span class="comment">        set​(int year, int month, int date) 设置年,月,日</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        add(int field,  int amount) 添加或减去某个日历字段的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.常用日历字段含义</span></span><br><span class="line"><span class="comment">        年：YEAR</span></span><br><span class="line"><span class="comment">        月：MONTH （0~11表示1~12月）</span></span><br><span class="line"><span class="comment">        日：DATE</span></span><br><span class="line"><span class="comment">        时：HOUR_OF_DAY（24小时）</span></span><br><span class="line"><span class="comment">        时：HOUR（12小时）</span></span><br><span class="line"><span class="comment">        分：MINUTE</span></span><br><span class="line"><span class="comment">        秒：SECOND</span></span><br><span class="line"><span class="comment">        周几：DAY_OF_WEEK（1~7表示周日~周六）</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">//1.返回该日历时间的毫秒值。</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> c.getTimeInMillis();</span><br><span class="line">        System.out.println(time);</span><br><span class="line">        <span class="comment">//2.Date 的 getTime()</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime());</span><br><span class="line">        <span class="comment">//3.System</span></span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set(字段名, 字段值) 设置某个日历字段的值</span></span><br><span class="line">        <span class="comment">//出生当天是星期几(1999-11-11)</span></span><br><span class="line">        <span class="comment">//c.set(Calendar.YEAR,1999);</span></span><br><span class="line">        <span class="comment">//c.set(Calendar.MONTH,10);</span></span><br><span class="line">        <span class="comment">//c.set(Calendar.DATE,11);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接设置年月日</span></span><br><span class="line">        <span class="comment">//c.set(1999,10,11);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(int field,  int amount) 添加或减去某个日历字段的值。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//c.add(Calendar.DATE,10);//10天后</span></span><br><span class="line">        c.add(Calendar.DATE,-<span class="number">500</span>);<span class="comment">//500天前</span></span><br><span class="line"></span><br><span class="line">        show(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Ctrl + Alt + M 快速生成方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Calendar c)</span> &#123;</span><br><span class="line">        <span class="comment">//获取年</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> c.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(<span class="string">&quot;年：&quot;</span>+year);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> c.get(Calendar.MONTH) + <span class="number">1</span>; <span class="comment">//0-11表示1-12月份</span></span><br><span class="line">        System.out.println(<span class="string">&quot;月：&quot;</span>+month);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">date</span> <span class="operator">=</span> c.get(Calendar.DATE);</span><br><span class="line">        System.out.println( <span class="string">&quot;日：&quot;</span> + date );</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;时(12小时制)：&quot;</span>+c.get(Calendar.HOUR));</span><br><span class="line">        System.out.println(<span class="string">&quot;时(24小时制)：&quot;</span>+c.get(Calendar.HOUR_OF_DAY));</span><br><span class="line">        System.out.println(<span class="string">&quot;分：&quot;</span>+c.get(Calendar.MINUTE));</span><br><span class="line">        System.out.println(<span class="string">&quot;秒：&quot;</span>+c.get(Calendar.SECOND));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> c.get(Calendar.DAY_OF_WEEK); <span class="comment">//用数字1-7表示周日-周六</span></span><br><span class="line">        String[] weeks =&#123;<span class="string">&quot;周日&quot;</span>,<span class="string">&quot;周一&quot;</span>,<span class="string">&quot;周二&quot;</span>,<span class="string">&quot;周三&quot;</span>,<span class="string">&quot;周四&quot;</span>,<span class="string">&quot;周五&quot;</span>,<span class="string">&quot;周六&quot;</span>&#125;;</span><br><span class="line">        System.out.println(weeks[i-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-1-案例：计算年龄天数"><a href="#7-1-案例：计算年龄天数" class="headerlink" title="7.1 案例：计算年龄天数"></a>7.1 案例：计算年龄天数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算从出生到现在，总共过了多少天？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    步骤：</span></span><br><span class="line"><span class="comment">        1.获取出生当天的Calendar对象，转成毫秒</span></span><br><span class="line"><span class="comment">        2.获取今天的毫秒值</span></span><br><span class="line"><span class="comment">        3.获取差值，转为天数</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取出生当天的Calendar对象，转成毫秒</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">birthday</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        birthday.set(<span class="number">1999</span>, <span class="number">10</span>,<span class="number">11</span>); <span class="comment">//1999年11月11日</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> birthday.getTimeInMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取今天的毫秒值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取差值，转为天数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">days</span> <span class="operator">=</span> (now - time) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>;</span><br><span class="line">        System.out.println(days);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、正则语法（了解）"><a href="#8、正则语法（了解）" class="headerlink" title="8、正则语法（了解）"></a>8、正则语法（了解）</h3><h5 id="8-1-单一正则"><a href="#8-1-单一正则" class="headerlink" title="8.1 单一正则"></a>8.1 单一正则</h5><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.范围匹配 []</span></span><br><span class="line"><span class="comment">        [abc]：匹配abc中任意一个字符。</span></span><br><span class="line"><span class="comment">        [a-z]：匹配小写字母a-z中的一个。</span></span><br><span class="line"><span class="comment">        [A-Z]：匹配大写字母A-Z中的一个。</span></span><br><span class="line"><span class="comment">        [0-9]：匹配数字0-9中的一个。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        组合：</span></span><br><span class="line"><span class="comment">        [a-zA-Z0-9]：匹配a-z或者A-Z或者0-9之间的任意一个字符。</span></span><br><span class="line"><span class="comment">        [a-dm-p]： 匹配a-d或m-p之间的任意一个字符。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        排除：</span></span><br><span class="line"><span class="comment">        [^abc]：匹配除a、b、c之外的任意一个字符。</span></span><br><span class="line"><span class="comment">        [^a-z]：匹配除小写字母外的任意一个字符。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String s = &quot;a&quot;;</span></span><br><span class="line">        <span class="comment">//s字符串内容是否匹配正则表达式，如果匹配，返回true，否则返回false</span></span><br><span class="line">        <span class="comment">// s.matches(&quot;正则表达式&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//内容是否是a或者b或者c</span></span><br><span class="line">        System.out.println( <span class="string">&quot;b&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)  );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配a-z或者A-Z或者0-9之间的任意一个字符。</span></span><br><span class="line">        System.out.println( <span class="string">&quot;8&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&quot;</span>)  ); <span class="comment">//一个[]表示匹配一个字符</span></span><br><span class="line">        System.out.println( <span class="string">&quot; &quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&quot;</span>)  ); <span class="comment">//匹配数字，字母，空格</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//[^abc]：匹配除a、b、c之外的任意一个字符。</span></span><br><span class="line">        System.out.println( <span class="string">&quot;我&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)  );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配三个任意小写字母</span></span><br><span class="line">        System.out.println( <span class="string">&quot;aaa&quot;</span>.matches(<span class="string">&quot;[a-z][a-z][a-z]&quot;</span>)  );</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*String s = &quot;&quot;;</span></span><br><span class="line"><span class="comment">        if(s.equals(&quot;a&quot;) ||s.equals(&quot;b&quot;) || s.equals(&quot;c&quot;))&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-2-预定义字符"><a href="#8-2-预定义字符" class="headerlink" title="8.2 预定义字符"></a>8.2 预定义字符</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    2.预定义字符</span></span><br><span class="line"><span class="comment">        &quot;.&quot; ： 匹配一个任意字符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &quot;\d&quot;： 匹配一个数字字符，相当于[0-9]</span></span><br><span class="line"><span class="comment">        &quot;\D&quot;： 匹配一个非数字，相当于[^0-9]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &quot;\s&quot;： 匹配一个空白字符</span></span><br><span class="line"><span class="comment">        &quot;\S&quot;： 匹配一个非空白字符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &quot;\w&quot;： 匹配一个单词字符，包括大小写字母，数字，下划线，相当于[a-zA-Z0-9_]</span></span><br><span class="line"><span class="comment">        &quot;\W&quot;： 匹配一个非单词字符</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配大小写字母，数字，下划线</span></span><br><span class="line">        System.out.println( <span class="string">&quot;A&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9_]&quot;</span>) );</span><br><span class="line">        System.out.println( <span class="string">&quot;A&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//&quot;.&quot;  匹配一个任意字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>.matches(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;我&quot;</span>.matches(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单独匹配 .  其他的不要匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>.matches(<span class="string">&quot;\\.&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-3-数量词（限定符）"><a href="#8-3-数量词（限定符）" class="headerlink" title="8.3 数量词（限定符）"></a>8.3 数量词（限定符）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    3.数量词（限定符）</span></span><br><span class="line"><span class="comment">        ?   0次或1次</span></span><br><span class="line"><span class="comment">        *   0次或多次 (任意次)</span></span><br><span class="line"><span class="comment">        +   1次或多次</span></span><br><span class="line"><span class="comment">        &#123;n&#125;    重复n次</span></span><br><span class="line"><span class="comment">        &#123;n,&#125;   重复n次以上 (至少n次)</span></span><br><span class="line"><span class="comment">        &#123;n,m&#125;  重复n到m次（包括n和m）</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配一个手机号码（长度为11的数字）</span></span><br><span class="line">       <span class="comment">// System.out.println(&quot;&quot;.matches(&quot;\\d&#123;11&#125;&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配长度为4的数字</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0000&quot;</span>.matches(<span class="string">&quot;\\d&#123;4&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配密码 5-8位的密码 (密码只能是单词字符 \\w 字母，数字，_)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;itheima&quot;</span>.matches(<span class="string">&quot;\\w&#123;5,8&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要求：邮箱地址是6~18个字符，可以使用字母，数字，下划线，需要以字母开头。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;itheima_123&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]\\w&#123;5,17&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//衣服尺码 L XL  XXL  XXXL</span></span><br><span class="line">        System.out.println(<span class="string">&quot;L&quot;</span>.matches(<span class="string">&quot;X*L&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;XXXL&quot;</span>.matches(<span class="string">&quot;X*L&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配任意一个小写英文单词 a  at  for  hello</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z]+&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>.matches(<span class="string">&quot;[a-z]+&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>.matches(<span class="string">&quot;[a-z]&#123;1,&#125;&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>.matches(<span class="string">&quot;[123]&quot;</span>));<span class="comment">//false 匹配1或者2或者3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>.matches(<span class="string">&quot;[123]+&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>.matches(<span class="string">&quot;[123]*&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>.matches(<span class="string">&quot;123&quot;</span>));<span class="comment">//true  固定匹配123</span></span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>.matches(<span class="string">&quot;\\d&#123;3&#125;&quot;</span>));<span class="comment">//true 匹配长度为3的数字</span></span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>.matches(<span class="string">&quot;\\d.&quot;</span>));<span class="comment">//false  匹配长度为2，第一个内容是数字，第二个内容任意</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>011-java加强语法之多态、Object类、内部类、枚举</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/011-java%E5%8A%A0%E5%BC%BA%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%A4%9A%E6%80%81%E3%80%81Object%E7%B1%BB%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E3%80%81%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、多态"><a href="#1、多态" class="headerlink" title="1、多态"></a>1、多态</h3><h5 id="1-1-多态的特点"><a href="#1-1-多态的特点" class="headerlink" title="1.1 多态的特点"></a>1.1 多态的特点</h5><blockquote>
<p>多态是同一个行为具有多种不同表现形式。</p>
</blockquote>
<h5 id="1-2-多态的前提"><a href="#1-2-多态的前提" class="headerlink" title="1.2 多态的前提"></a>1.2 多态的前提</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.有继承/实现的关系</span><br><span class="line">2.有方法重写</span><br><span class="line">3.父类引用指向子类对象</span><br></pre></td></tr></table></figure>

<h5 id="1-3-多态的访问"><a href="#1-3-多态的访问" class="headerlink" title="1.3 多态的访问"></a>1.3 多态的访问</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">多态下方法的访问：编译看左边，运行看右边</span><br><span class="line">多态下变量的访问：编译看左边，运行看左边（变量没有多态）</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span>   <span class="variable">a</span> <span class="operator">=</span>  <span class="keyword">new</span>  <span class="title class_">Cat</span>();   </span><br><span class="line">对象 a 能调用什么方法，由对象a 左边 的父类 Animal 决定。</span><br><span class="line">方法运行起来的效果，由对象a 右边 <span class="keyword">new</span>出来的子类 Cat决定。</span><br></pre></td></tr></table></figure>

<h5 id="1-4-多态的优缺点"><a href="#1-4-多态的优缺点" class="headerlink" title="1.4 多态的优缺点"></a>1.4 多态的优缺点</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">一、多态优点：</span><br><span class="line"><span class="number">1.</span>提高代码的扩展性。</span><br><span class="line"><span class="number">2.</span>定义方法时，如果将父类 或 接口 作为参数，在调用方法时，可以传递任意子类对象极大提高方法的通用性。</span><br><span class="line">二、多态缺点：</span><br><span class="line"><span class="number">1.</span>多态下，无法使用子类独有的方法</span><br><span class="line"><span class="number">2.</span>如果要调用子类特有的方法，进行类型转换。用<span class="keyword">instanceof</span>类做判断，如果对象属于类，返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span><br></pre></td></tr></table></figure>

<h3 id="2、Object-类"><a href="#2、Object-类" class="headerlink" title="2、Object 类"></a>2、Object 类</h3><blockquote>
<p>特点：是 Java 中所有类的根类，任何类都继承自Object</p>
</blockquote>
<h5 id="2-1-toString"><a href="#2-1-toString" class="headerlink" title="2.1 toString"></a>2.1 toString</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.默认返回对象的地址值</span><br><span class="line">2.自定义类可以重写该方法，可以返回对象的属性值</span><br></pre></td></tr></table></figure>

<h5 id="2-2-equals"><a href="#2-2-equals" class="headerlink" title="2.2 equals"></a>2.2 equals</h5><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">默认使用== , 判断两个对象地址是否相等</span><br><span class="line">自定义类可以重写该方法，比较属性是否一样(<span class="type">String</span>是重写了该方法)</span><br></pre></td></tr></table></figure>

<h3 id="3、内部类"><a href="#3、内部类" class="headerlink" title="3、内部类"></a>3、内部类</h3><h5 id="3-1-静态内部类"><a href="#3-1-静态内部类" class="headerlink" title="3.1 静态内部类"></a>3.1 静态内部类</h5><blockquote>
<p>使用static修饰,类的所有成分都可以定义。【静态的只能访问静态的】</p>
</blockquote>
<p>创建对象格式：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">外部类名.内部类名 变量 = <span class="keyword">new</span> <span class="type"></span>外部类名.内部类名()</span><br></pre></td></tr></table></figure>

<h5 id="3-2-成员内部类"><a href="#3-2-成员内部类" class="headerlink" title="3.2 成员内部类"></a>3.2 成员内部类</h5><blockquote>
<p>没有static修饰，需要外部类的对象去创建</p>
</blockquote>
<p>创建对象格式：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">外部类名.内部类名 变量 = <span class="keyword">new</span> <span class="type"></span>外部类().<span class="keyword">new</span> <span class="type"></span>内部类名()</span><br></pre></td></tr></table></figure>

<h5 id="3-3-局部内部类"><a href="#3-3-局部内部类" class="headerlink" title="3.3 局部内部类"></a>3.3 局部内部类</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">定义在方法，构造方法，代码块中，只能在定义的范围内使用。</span><br></pre></td></tr></table></figure>

<h5 id="3-4-匿名内部类（重点"><a href="#3-4-匿名内部类（重点" class="headerlink" title="3.4 匿名内部类（重点)"></a>3.4 匿名内部类（重点)</h5><p>格式：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type"></span>接口名/抽象类名()&#123;</span><br><span class="line">重写抽象方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">应用场景：当做方法的实参传入</span><br><span class="line">作用：简化代码</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//普通方式：创建A接口的实现类的对象</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="type">A</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        a1.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类方式：创建接口A的对象</span></span><br><span class="line">        <span class="comment">//new 接口名()&#123;&#125;</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类的方式&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        a2.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再次创建一个对象</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类的方式&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类好处：简化代码</span></span><br><span class="line">        <span class="comment">//匿名内部类缺点：类不能复用</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现类的方式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4、枚举"><a href="#4、枚举" class="headerlink" title="4、枚举"></a>4、枚举</h3><h5 id="4-1-枚举定义格式"><a href="#4-1-枚举定义格式" class="headerlink" title="4.1 枚举定义格式"></a>4.1 枚举定义格式</h5><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> 枚举名&#123;</span><br><span class="line">枚举值<span class="number">1</span>,枚举值<span class="number">2</span>,...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">枚举值获取：枚举名.枚举值</span><br><span class="line">枚举作用：规范数据的取值，比如性别，季节都可以枚举表示。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>枚举类编译后本质是<span class="keyword">final</span>修饰的java类，并且继承了java.lang.Enum类</span><br><span class="line"><span class="number">2.</span>枚举类的构造方法都是<span class="keyword">private</span>修饰的，所以枚举类无法在外部创建对象</span><br><span class="line"><span class="number">3.</span>每个枚举值都是该类的对象，并且都是<span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span>修饰的</span><br><span class="line"><span class="number">4.</span>枚举本质是一个java类，所以枚举中可以有成员变量、成员方法、构造方法等成分</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">反编译代码</span></span><br><span class="line"><span class="comment">public final class Season extends Enum&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	public static final Season SPRING = new Season(&quot;SPRING&quot;, 0);</span></span><br><span class="line"><span class="comment">	public static final Season SUMMER = new Season(&quot;SUMMER&quot;, 1);</span></span><br><span class="line"><span class="comment">	public static final Season AUTUMN = new Season(&quot;AUTUMN&quot;, 2);</span></span><br><span class="line"><span class="comment">	public static final Season WINTER = new Season(&quot;WINTER&quot;, 3);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	private Season(String s, int i)&#123;</span></span><br><span class="line"><span class="comment">		super(s, i);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>010-Java加强语法之final、抽象类、接口</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/010-Java%E5%8A%A0%E5%BC%BA%E8%AF%AD%E6%B3%95%E4%B9%8Bfinal%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、权限修饰符"><a href="#1、权限修饰符" class="headerlink" title="1、权限修饰符"></a>1、权限修饰符</h3><h5 id="1-1-什么是权限修饰符？"><a href="#1-1-什么是权限修饰符？" class="headerlink" title="1.1 什么是权限修饰符？"></a>1.1 什么是权限修饰符？</h5><p>权限修饰符用于控制成员的访问范围。可以修饰成员变量，方法，构造器，类，不同权限修饰符有不同的访问权限！</p>
<h5 id="1-2-四种权限修饰符访问范围"><a href="#1-2-四种权限修饰符访问范围" class="headerlink" title="1.2 四种权限修饰符访问范围"></a>1.2 四种权限修饰符访问范围</h5><blockquote>
<p>从大到小：public	&gt;	protected	&gt;	缺省（不写）	&gt; 	private</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符     同一个类中   同一个包中其他类   不同包中子类   不同包中无关类</span><br><span class="line"><span class="keyword">public</span>      √               √              √               √</span><br><span class="line"><span class="keyword">protected</span>   √               √              √</span><br><span class="line">缺省（不写） 	√               √</span><br><span class="line"><span class="keyword">private</span>     √</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>修饰的成员可以被任意访问</span><br><span class="line"><span class="keyword">protected</span>修饰的成员可以在本包或子类中访问</span><br><span class="line">缺省的权限修饰的成员可以在本包中使用</span><br><span class="line"><span class="keyword">private</span>修饰的成员只能在本类使用</span><br><span class="line"></span><br><span class="line">通常情况下，只用<span class="keyword">public</span> 和 <span class="keyword">private</span>即可</span><br></pre></td></tr></table></figure>

<h3 id="2、final-关键字"><a href="#2、final-关键字" class="headerlink" title="2、final 关键字"></a>2、final 关键字</h3><blockquote>
<p>final 关键字<br>a. 修饰类：不能被继承<br>b. 修饰方法：能被继承，不能被重写<br>c . 修饰变量：常量，基本数据类型数值不能修改，引用类型地址值不能修改（只有一次赋值的机会）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span>修饰的成员变量必须进行赋值，赋值的方式有两种:</span><br><span class="line">​ 方式一:直接赋值</span><br><span class="line">​ 方式二:在所有的构造方法中对其进行赋值。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//final int age = 10;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员变量定义时候需要显式赋值, 要么在构造方法中赋值</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test2</span><span class="params">()</span>&#123;</span><br><span class="line">        age = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        a = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终变量，常量（基本类型是值不能修改）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//b = 12;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用类型（地址不能修改，地址指向堆中的数据可以修改）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//arr = new int[10];</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部变量</span></span><br><span class="line">        <span class="comment">//final int c = 10;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span>  <span class="type">int</span> c;</span><br><span class="line">        c = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3、代码块"><a href="#3、代码块" class="headerlink" title="3、代码块"></a>3、代码块</h3><h5 id="3-1-构造代码块"><a href="#3-1-构造代码块" class="headerlink" title="3.1 构造代码块"></a>3.1 构造代码块</h5><p>格式：{}<br>执行时机：构造方法被调用前执行<br>作用：抽取多个构造方法相同的代码，提高复用性</p>
<h5 id="3-2-静态代码块"><a href="#3-2-静态代码块" class="headerlink" title="3.2 静态代码块"></a>3.2 静态代码块</h5><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行时机：</p>
<blockquote>
<p>(1) 类加载时被执行，而且只会执行一次</p>
</blockquote>
<p>类被加载时机：</p>
<blockquote>
<p>(1) main 方法执行<br>(2) 创建对象<br>(3) 调用静态方法</p>
</blockquote>
<p>作用：在类加载时，完成一些初始化的功能</p>
<h3 id="4、抽象类（重点）"><a href="#4、抽象类（重点）" class="headerlink" title="4、抽象类（重点）"></a>4、抽象类（重点）</h3><h5 id="4-1-定义格式："><a href="#4-1-定义格式：" class="headerlink" title="4.1 定义格式："></a>4.1 定义格式：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> class 类名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-抽象方法"><a href="#4-2-抽象方法" class="headerlink" title="4.2 抽象方法"></a>4.2 抽象方法</h5><blockquote>
<p>public	abstract	返回值	方法名(参数列表);</p>
</blockquote>
<p>抽象类和抽象方法的关系：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1、有抽象方法的类一定是抽象类，抽象类可以没有抽象方法</span><br><span class="line">2、抽象类要被子类继承，重写抽象方法</span><br></pre></td></tr></table></figure>

<h5 id="4-3-普通类和抽象类的区别"><a href="#4-3-普通类和抽象类的区别" class="headerlink" title="4.3 普通类和抽象类的区别"></a>4.3 普通类和抽象类的区别</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">1、得到：抽象类，可以定义抽象方法</span><br><span class="line">2、失去：抽象类，不能创建对象</span><br><span class="line">3、除此以外，普通类可以定义的，抽象类的都可以</span><br></pre></td></tr></table></figure>

<h5 id="4-4-抽象类不能被private-、static、final-修饰"><a href="#4-4-抽象类不能被private-、static、final-修饰" class="headerlink" title="4.4 抽象类不能被private 、static、final 修饰"></a>4.4 抽象类不能被private 、static、final 修饰</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> ，<span class="keyword">private</span>， <span class="keyword">final</span>修饰的方法都不允许被重写，而抽象方法需要被重写才有意义，</span><br><span class="line">所以不能和抽象一起修饰方法</span><br></pre></td></tr></table></figure>



<h3 id="5、接口（重点）"><a href="#5、接口（重点）" class="headerlink" title="5、接口（重点）"></a>5、接口（重点）</h3><h5 id="5-1-接口的格式"><a href="#5-1-接口的格式" class="headerlink" title="5.1 接口的格式"></a>5.1 接口的格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> interface 接口名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-接口的组成"><a href="#5-2-接口的组成" class="headerlink" title="5.2 接口的组成"></a>5.2 接口的组成</h5><p>JDK 7 (掌握)</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、只能有常量和抽象方法</span><br><span class="line"><span class="number">2</span>、常量默认用<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 修饰</span><br><span class="line"><span class="number">3</span>、抽象方法默认用<span class="keyword">public</span> <span class="keyword">abstract</span> 修饰</span><br><span class="line"></span><br><span class="line">抽象方法：默认都是 <span class="keyword">public</span> <span class="keyword">abstract</span> 修饰的，可以省略不写。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">USB</span> &#123;</span><br><span class="line">    <span class="comment">//常量：public static final 是默认的修饰符，可以省略</span></span><br><span class="line">    <span class="comment">//接口的常量名都是大写字母，多个单词使用_分开</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">TYPE</span> <span class="operator">=</span> <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="comment">//抽象方法默认使用public abstract修饰，可以省略</span></span><br><span class="line">    <span class="comment">//public abstract void connect();</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>JDK8(了解)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">可以有默认方法、静态方法、私有方法</span><br></pre></td></tr></table></figure>

<h5 id="5-3-类和接口之间的关系"><a href="#5-3-类和接口之间的关系" class="headerlink" title="5.3 类和接口之间的关系"></a>5.3 类和接口之间的关系</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、多实现，一个类可以实现多个接口</span><br><span class="line"><span class="number">2</span>、类实现接口，要重写所有的抽象方法</span><br><span class="line"><span class="number">3</span>、格式：</span><br><span class="line"><span class="keyword">public</span> class 实现类 implements 接口名，接口名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-4-接口和接口之间的关系"><a href="#5-4-接口和接口之间的关系" class="headerlink" title="5.4 接口和接口之间的关系"></a>5.4 接口和接口之间的关系</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、多继承，一个接口可以继承多个接口</span><br><span class="line"><span class="number">2</span>、格式：</span><br><span class="line"><span class="keyword">public</span> interface 接口 extends 接口<span class="number">1</span>，接口<span class="number">2</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、单例模式"><a href="#6、单例模式" class="headerlink" title="6、单例模式"></a>6、单例模式</h3><h5 id="6-1-饥汉式"><a href="#6-1-饥汉式" class="headerlink" title="6.1 饥汉式"></a>6.1 饥汉式</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.私有该类的构造方法</span><br><span class="line">2.定义一个唯一的对象，给外界使用（对象提前创建）</span><br><span class="line">3.定义静态方法，返回唯一对象给调用者</span><br></pre></td></tr></table></figure>

<h5 id="6-2-懒汉式"><a href="#6-2-懒汉式" class="headerlink" title="6.2 懒汉式"></a>6.2 懒汉式</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.私有构造方法</span><br><span class="line">2.定义该类的对象，但是不马上创建对象</span><br><span class="line">3.提供静态方法，返回唯一对象（在方法中创建对象）</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>009-java加强语法之继承、静态</title>
    <url>/2022/09/06/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/009-java%E5%8A%A0%E5%BC%BA%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%BB%A7%E6%89%BF%E3%80%81%E9%9D%99%E6%80%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、回顾"><a href="#1、回顾" class="headerlink" title="1、回顾"></a>1、回顾</h3><h5 id="1-1-内存"><a href="#1-1-内存" class="headerlink" title="1.1 内存"></a>1.1 内存</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">内存：</span><br><span class="line">    栈        方法运行的内存， 也包含局部变量</span><br><span class="line">    堆        <span class="keyword">new</span>出来的数据，而且有一个地址值</span><br><span class="line">    方法区     <span class="keyword">class</span>文件加载进去的内存空间</span><br><span class="line">    本地方法栈</span><br><span class="line">    寄存器java</span><br></pre></td></tr></table></figure>

<h5 id="1-2-类中的成分"><a href="#1-2-类中的成分" class="headerlink" title="1.2 类中的成分"></a>1.2 类中的成分</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 修饰符 class 类名&#123;</span><br><span class="line">                  <span class="number">1</span>、成员变量：描述类或者对象的属性信息，如：姓名、年龄。</span><br><span class="line">                  <span class="number">2</span>、成员方法:   描述类或者对象的行为的，如：唱歌、吃饭、买票。</span><br><span class="line">                  <span class="number">3</span>、构造方法:   初始化一个类的对象返回。</span><br><span class="line">                  <span class="number">4</span>、代码块：</span><br><span class="line">                  <span class="number">5</span>、内部类：</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、static关键字"><a href="#2、static关键字" class="headerlink" title="2、static关键字"></a>2、static关键字</h3><h5 id="2-1静态变量"><a href="#2-1静态变量" class="headerlink" title="2.1	静态变量"></a>2.1	静态变量</h5><blockquote>
<p>定义格式：static	数据类型	变量名；</p>
</blockquote>
<blockquote>
<p>访问格式：<br>        (1)类名.静态变量 【推荐使用】<br>        (2)对象.静态变量</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">    String name; <span class="comment">//窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//int count; //总票数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//总票数是所有窗口共享的，内存只有一份，使用static修饰</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法，模拟卖票</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleTicket</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;卖票成功&quot;</span>);</span><br><span class="line">        count--;</span><br><span class="line">        System.out.println(<span class="string">&quot;剩余票数：&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用类名访问静态变量，设置总票数为100</span></span><br><span class="line">        Window.count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Window</span> <span class="variable">w1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line">        w1.name = <span class="string">&quot;窗口1&quot;</span>;</span><br><span class="line">        w1.saleTicket();</span><br><span class="line">        w1.saleTicket();</span><br><span class="line"></span><br><span class="line">        <span class="type">Window</span> <span class="variable">w2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line">        w2.name = <span class="string">&quot;窗口2&quot;</span>;</span><br><span class="line">        w2.saleTicket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>内存特点：</strong>在类加载的时候产生，在内存中只有一份，被所有对象共享。</p>
<h5 id="2-2静态方法"><a href="#2-2静态方法" class="headerlink" title="2.2	静态方法"></a>2.2	静态方法</h5><blockquote>
<p>访问格式：<br>        (1) 类名.静态方法()  【推荐使用】<br>        (2) 对象.静态方法()</p>
</blockquote>
<p><strong>使用注意：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>静态方法中只能访问静态变量</span><br><span class="line"><span class="number">2.</span>静态方法中不能使用<span class="built_in">this</span>和<span class="built_in">super</span></span><br></pre></td></tr></table></figure>

<p>应用场景：工具类的方法通常都是静态方法，方便调用</p>
<h3 id="3、继承"><a href="#3、继承" class="headerlink" title="3、继承"></a>3、继承</h3><h5 id="3-1-继承的格式"><a href="#3-1-继承的格式" class="headerlink" title="3.1 继承的格式"></a>3.1 继承的格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 子类 extends 父类&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>继承的特点：</strong> java 类只能单继承，但是允许间接多层继承。</p>
<h5 id="3-2-子类访问父类成员的特点"><a href="#3-2-子类访问父类成员的特点" class="headerlink" title="3.2 子类访问父类成员的特点"></a>3.2 子类访问父类成员的特点</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、就近原则，访问变量，先在方法中找，再去子类找，最后去父类找</span><br><span class="line"><span class="number">2</span>、<span class="keyword">this</span>.成员  访问本类的</span><br><span class="line"><span class="number">3</span>、<span class="keyword">super</span>.成员  访问父类的</span><br></pre></td></tr></table></figure>

<p>子类创建对象的特点：默认先调用父类的无参构造方法，在执行自己的构造方法</p>
<h5 id="3-3-调用父类构造方法"><a href="#3-3-调用父类构造方法" class="headerlink" title="3.3 调用父类构造方法"></a>3.3 调用父类构造方法</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">super<span class="function"><span class="params">()</span>	-&gt;</span>	调用父类的无参构造方法，默认的</span><br><span class="line">super<span class="function"><span class="params">(参数)</span> -&gt;</span> 调用父类带参构造方法</span><br><span class="line"></span><br><span class="line">子类不能继承父类的构造方法，只能调用</span><br></pre></td></tr></table></figure>

<p><strong>注意：都要放在子类构造方法的第一行！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    特点：</span></span><br><span class="line"><span class="comment">        子类创建对象时，默认都会先执行父类的无参构造方法，再执行子类的构造方法（目的是为了初始化父类的空间）</span></span><br><span class="line"><span class="comment">    原理：</span></span><br><span class="line"><span class="comment">        在所有的子类构造方法的第一行，都有默认生成一句代码 super() ，默认调用父类的无参构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Zi</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Zi</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-4-方法重写"><a href="#3-4-方法重写" class="headerlink" title="3.4 方法重写"></a>3.4 方法重写</h5><blockquote>
<p>作用：在继承父类的方法后，需要进行扩展和增强功能时，需要重写</p>
</blockquote>
<p>格式要求：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、方法名，参数，和返回值保持一致</span><br><span class="line"><span class="number">2</span>、重写后的权限要 大于或等于 父类的权限</span><br><span class="line"><span class="number">3</span>、权限从小到大 <span class="keyword">private</span> 缺省 <span class="keyword">protected</span> <span class="keyword">public</span></span><br><span class="line"><span class="number">4</span>、私有，静态的方法不能被重写</span><br></pre></td></tr></table></figure>

<h3 id="4、综合练习"><a href="#4、综合练习" class="headerlink" title="4、综合练习"></a>4、综合练习</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">要求：</span><br><span class="line">某购物商城上，电子产品按照性质分为手机，电脑等类别。为了方便展示商品信息，请使用所学的继承的知识，设计手机，电脑之间的继承关系。</span><br><span class="line">手机</span><br><span class="line">     属性：品牌，价格，通信模式(4g/5g)</span><br><span class="line">     功能：打电话，拍照（可以开启美颜功能）</span><br><span class="line">电脑</span><br><span class="line">     属性：品牌，价格，cup数量</span><br><span class="line">     功能：编程，拍照（没有美颜功能）</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line"><span class="number">1.</span>将手机和电脑共同的属性和功能抽取为父类Digtal。</span><br><span class="line"><span class="number">2.</span>手机类继承Digtal父类，提供特有的属性和功能。</span><br><span class="line"><span class="number">3.</span>电脑类继承Digtal父类，提供特有的属性和功能。</span><br><span class="line"><span class="number">4.</span>手机类继承了拍照功能，但手机的拍照功能更强大，所以需要在手机类中重写拍照功能。</span><br><span class="line"><span class="number">5.</span>提供测试类。</span><br></pre></td></tr></table></figure>

<h5 id="4-1-父类Digtal"><a href="#4-1-父类Digtal" class="headerlink" title="4.1 父类Digtal"></a>4.1 父类Digtal</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/父类：数码产品</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Digital</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Digital</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Digital</span><span class="params">(String brand, <span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拍照</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takePhoto</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拍照&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> brand</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="4-2-手机类继承Digtal父类"><a href="#4-2-手机类继承Digtal父类" class="headerlink" title="4.2 手机类继承Digtal父类"></a>4.2 手机类继承Digtal父类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子类：手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">extends</span> <span class="title class_">Digital</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String mode; <span class="comment">//通信模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//new Phone(&quot;小米&quot;,3999,&quot;4G&quot;);</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(String brand, <span class="type">int</span> price, String mode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(brand, price);</span><br><span class="line">        <span class="built_in">this</span>.mode = mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特有打电话功能</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;使用&quot; + super.getPrice() + &quot;元的&quot; + super.getBrand() + &quot;的&quot; + mode + &quot;手机打电话&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用&quot;</span> + getPrice() + <span class="string">&quot;元的&quot;</span> + getBrand() + <span class="string">&quot;的&quot;</span> + mode + <span class="string">&quot;手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机拍照功能升级，方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takePhoto</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启美颜拍照&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMode</span><span class="params">(String mode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mode = mode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="4-3-电脑类继承Digtal父类"><a href="#4-3-电脑类继承Digtal父类" class="headerlink" title="4.3 电脑类继承Digtal父类"></a>4.3 电脑类继承Digtal父类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> <span class="keyword">extends</span> <span class="title class_">Digital</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cpu; <span class="comment">//cpu数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参和满参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String brand, <span class="type">int</span> price, <span class="type">int</span> cpu)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(brand,price);</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拍照功能直接从父类继承即可</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编程方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用&quot;</span>+getPrice()+<span class="string">&quot;的&quot;</span>+getBrand()+<span class="string">&quot;的&quot;</span>+cpu+<span class="string">&quot;核电脑进行编程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(<span class="type">int</span> cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="4-4-测试类"><a href="#4-4-测试类" class="headerlink" title="4.4 测试类"></a>4.4 测试类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建手机</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">p</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">3999</span>,<span class="string">&quot;4G&quot;</span>);</span><br><span class="line">        p.call();</span><br><span class="line">        p.takePhoto(); <span class="comment">//子类重写的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建电脑</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>(<span class="string">&quot;苹果&quot;</span>,<span class="number">9999</span>,<span class="number">8</span>);</span><br><span class="line">        c.coding();</span><br><span class="line">        c.takePhoto();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>鲁迅--《药》</title>
    <url>/2022/09/06/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/003-%E3%80%8A%E8%8D%AF%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在每周转载这个栏目里面，我打算收集一些自己曾经看过的文章，在博客这个平台分享给大家。每周转载这个栏目开设只是偶然性的，我觉得三千世界栏目更新过慢（要追求质量，还得有时间！），所以就萌发了每周转载这个栏目。</p>
<span id="more"></span>

<h3 id="一"><a href="#一" class="headerlink" title="一"></a><strong>一</strong></h3><p>秋天的后半夜，月亮下去了，太阳还没有出，只剩下一片乌蓝的天；除了夜游的东西，什么都睡着。华老栓忽然坐起身，擦着火柴，点上遍身油腻的灯盏，茶馆的两间屋子里，便弥满了青白的光。</p>
<p>“小栓的爹，你就去么？”是一个老女人的声音。里边的小屋子里，也发出一阵咳嗽。</p>
<p>“唔。”老栓一面听，一面应，一面扣上衣服；伸手过去说，“你给我罢”。</p>
<p>华大妈在枕头底下掏了半天，掏出一包洋钱，交给老栓，老栓接了，抖抖的装入衣袋，又在外面按了两下；便点上灯笼，吹熄灯盏，走向里屋子去了。那屋子里面，正在悉悉窣窣的响，接着便是一通咳嗽。老栓候他平静下去，才低低的叫道，“小栓……你不要起来。……店么？你娘会安排的”。</p>
<p>老栓听得儿子不再说话，料他安心睡了；便出了门，走到街上。街上黑沉沉的一无所有，只有一条灰白的路，看得分明。灯光照着他的两脚，一前一后的走。有时也遇到几只狗，可是一只也没有叫。天气比屋子里冷多了；老栓倒觉爽快，仿佛一旦变了少年，得了神通，有给人生命的本领似的，跨步格外高远。而且路也愈走愈分明，天也愈走愈亮了。</p>
<p>老栓正在专心走路，忽然吃了一惊，远远里看见一条丁字街，明明白白横着。他便退了几步，寻到一家关着门的铺子，蹩进檐下，靠门立住了。好一会，身上觉得有些发冷。</p>
<p>“哼，老头子”。</p>
<p>“倒高兴……”</p>
<p>老栓又吃一惊，睁眼看时，几个人从他面前过去了。一个还回头看他，样子不甚分明，但很像久饿的人见了食物一般，眼里闪出一种攫取的光。老栓看看灯笼，已经熄了。按一按衣袋，硬硬的还在。仰起头两面一望，只见许多古怪的人，三三两两，鬼似的在那里徘徊；定睛再看，却也看不出什么别的奇怪。</p>
<p>没有多久，又见几个兵，在那边走动；衣服前后的一个大白圆圈，远地里也看得清楚，走过面前的，并且看出号衣上暗红的镶边。——一阵脚步声响，一眨眼，已经拥过了一大簇人。那三三两两的人，也忽然合作一堆，潮一般向前进；将到丁字街口，便突然立住，簇成一个半圆。</p>
<p>老栓也向那边看，却只见一堆人的后背；颈项都伸得很长，仿佛许多鸭，被无形的手捏住了的，向上提着。静了一会，似乎有点声音，便又动摇起来，轰的一声，都向后退；一直散到老栓立着的地方，几乎将他挤倒了。</p>
<p>“喂！一手交钱，一手交货！”一个浑身黑色的人，站在老栓面前，眼光正像两把刀，刺得老栓缩小了一半。那人一只大手，向他摊着；一只手却撮着一个鲜红的馒头，那红的还是一点一点的往下滴。</p>
<p>老栓慌忙摸出洋钱，抖抖的想交给他，却又不敢去接他的东西。那人便焦急起来，嚷道，“怕什么？怎的不拿！”老栓还踌躇着；黑的人便抢过灯笼，一把扯下纸罩，裹了馒头，塞与老栓；一手抓过洋钱，捏一捏，转身去了。嘴里哼着说，“这老东西……”</p>
<p>“这给谁治病的呀？”老栓也似乎听得有人问他，但他并不答应；他的精神，现在只在一个包上，仿佛抱着一个十世单传的婴儿，别的事情，都已置之度外了。他现在要将这包里的新的生命，移植到他家里，收获许多幸福。太阳也出来了；在他面前，显出一条大道，直到他家中，后面也照见丁字街头破匾上“古□亭口”这四个黯淡的金字。</p>
<h3 id="二"><a href="#二" class="headerlink" title="二"></a><strong>二</strong></h3><p>老栓走到家，店面早经收拾干净，一排一排的茶桌，滑溜溜的发光。但是没有客人；只有小栓坐在里排的桌前吃饭，大粒的汗，从额上滚下，夹袄也帖住了脊心，两块肩胛骨高高凸出，印成一个阳文的“八”字。老栓见这样子，不免皱一皱展开的眉心。他的女人，从灶下急急走出，睁着眼睛，嘴唇有些发抖。</p>
<p>“得了么？”</p>
<p>“得了。”</p>
<p>两个人一齐走进灶下，商量了一会；华大妈便出去了，不多时，拿着一片老荷叶回来，摊在桌上。老栓也打开灯笼罩，用荷叶重新包了那红的馒头。小栓也吃完饭，他的母亲慌忙说：“小栓——你坐着，不要到这里来。”一面整顿了灶火，老栓便把一个碧绿的包，一个红红白白的破灯笼，一同塞在灶里；一阵红黑的火焰过去时，店屋里散满了一种奇怪的香味。</p>
<p>“好香！你们吃什么点心呀？”这是驼背五少爷到了。这人每天总在茶馆里过日，来得最早，去得最迟，此时恰恰蹩到临街的壁角的桌边，便坐下问话，然而没有人答应他。“炒米粥么？”仍然没有人应。老栓匆匆走出，给他泡上茶。</p>
<p>“小栓进来罢！”华大妈叫小栓进了里面的屋子，中间放好一条凳，小栓坐了。他的母亲端过一碟乌黑的圆东西，轻轻说：</p>
<p>“吃下去罢，——病便好了”。</p>
<p>小栓撮起这黑东西，看了一会，似乎拿着自己的性命一般，心里说不出的奇怪。十分小心的拗开了，焦皮里面窜出一道白气，白气散了，是两半个白面的馒头。——不多工夫，已经全在肚里了，却全忘了什么味；面前只剩下一张空盘。他的旁边，一面立着他的父亲，一面立着他的母亲，两人的眼光，都仿佛要在他身上注进什么又要取出什么似的；便禁不住心跳起来，按着胸膛，又是一阵咳嗽。</p>
<p>“睡一会罢，——便好了”。</p>
<p>小栓依他母亲的话，咳着睡了。华大妈候他喘气平静，才轻轻的给他盖上了满幅补钉的夹被。</p>
<h3 id="三"><a href="#三" class="headerlink" title="三"></a><strong>三</strong></h3><p>店里坐着许多人，老栓也忙了，提着大铜壶，一趟一趟的给客人冲茶；两个眼眶，都围着一圈黑线。</p>
<p>“老栓，你有些不舒服么？——你生病么？”一个花白胡子的人说。</p>
<p>“没有。”</p>
<p>“没有？——我想笑嘻嘻的，原也不像……”花白胡子便取消了自己的话。</p>
<p>“老栓只是忙。要是他的儿子……”驼背五少爷话还未完，突然闯进了一个满脸横肉的人，披一件玄色布衫，散着纽扣，用很宽的玄色腰带，胡乱捆在腰间。刚进门，便对老栓嚷道：</p>
<p>“吃了么？好了么？老栓，就是运气了你！你运气，要不是我信息灵……”</p>
<p>老栓一手提了茶壶，一手恭恭敬敬的垂着；笑嘻嘻的听。满座的人，也都恭恭敬敬的听。华大妈也黑着眼眶，笑嘻嘻的送出茶碗茶叶来，加上一个橄榄，老栓便去冲了水。</p>
<p>“这是包好！这是与众不同的。你想，趁热的拿来，趁热的吃下。”横肉的人只是嚷。</p>
<p>“真的呢，要没有康大叔照顾，怎么会这样……”华大妈也很感激的谢他。</p>
<p>“包好，包好！这样的趁热吃下。这样的人血馒头，什么痨病都包好！”</p>
<p>华大妈听到“痨病”这两个字，变了一点脸色，似乎有些不高兴；但又立刻堆上笑，搭讪着走开了。这康大叔却没有觉察，仍然提高了喉咙只是嚷，嚷得里面睡着的小栓也合伙咳嗽起来。</p>
<p>“原来你家小栓碰到了这样的好运气了。这病自然一定全好；怪不得老栓整天的笑着呢。”花白胡子一面说，一面走到康大叔面前，低声下气的问道，“康大叔——听说今天结果的一个犯人，便是夏家的孩子，那是谁的孩子？究竟是什么事？”</p>
<p>“谁的？不就是夏四奶奶的儿子么？那个小家伙！”康大叔见众人都耸起耳朵听他，便格外高兴，横肉块块饱绽，越发大声说，“这小东西不要命，不要就是了。我可是这一回一点没有得到好处；连剥下来的衣服，都给管牢的红眼睛阿义拿去了。——第一要算我们栓叔运气；第二是夏三爷赏了二十五两雪白的银子，独自落腰包，一文不花。”</p>
<p>小栓慢慢的从小屋子里走出，两手按了胸口，不住的咳嗽；走到灶下，盛出一碗冷饭，泡上热水，坐下便吃。华大妈跟着他走，轻轻的问道，“小栓，你好些么？——你仍旧只是肚饿？……”</p>
<p>“包好，包好！”康大叔瞥了小栓一眼，仍然回过脸，对众人说，“夏三爷真是乖角儿，要是他不先告官，连他满门抄斩。现在怎样？银子！——这小东西也真不成东西！关在牢里，还要劝牢头造反。”</p>
<p>“阿呀，那还了得。”坐在后排的一个二十多岁的人，很现出气愤模样。</p>
<p>“你要晓得红眼睛阿义是去盘盘底细的，他却和他攀谈了。他说：这大清的天下是我们大家的。你想：这是人话么？红眼睛原知道他家里只有一个老娘，可是没有料到他竟会这么穷，榨不出一点油水，已经气破肚皮了。他还要老虎头上搔痒，便给他两个嘴巴！”</p>
<p>“义哥是一手好拳棒，这两下，一定够他受用了。”壁角的驼背忽然高兴起来。</p>
<p>“他这贱骨头打不怕，还要说可怜可怜哩。”</p>
<p>花白胡子的人说，“打了这种东西，有什么可怜呢？”</p>
<p>康大叔显出看他不上的样子，冷笑着说，“你没有听清我的话；看他神气，是说阿义可怜哩！”</p>
<p>听着的人的眼光，忽然有些板滞；话也停顿了。小栓已经吃完饭，吃得满头流汗，头上都冒出蒸气来。</p>
<p>“阿义可怜——疯话，简直是发了疯了。”花白胡子恍然大悟似的说。</p>
<p>“发了疯了。”二十多岁的人也恍然大悟的说。</p>
<p>店里的坐客，便又现出活气，谈笑起来。小栓也趁着热闹，拚命咳嗽；康大叔走上前，拍他肩膀说：</p>
<p>“包好！小栓——你不要这么咳。包好！”</p>
<p>“疯了！”驼背五少爷点着头说。</p>
<h3 id="四"><a href="#四" class="headerlink" title="四"></a><strong>四</strong></h3><p>西关外靠着城根的地面，本是一块官地；中间歪歪斜斜一条细路，是贪走便道的人，用鞋底造成的，但却成了自然的界限。路的左边，都埋着死刑和瘐毙的人，右边是穷人的丛冢。两面都已埋到层层叠叠，宛然阔人家里祝寿时的馒头。</p>
<p>这一年的清明，分外寒冷；杨柳才吐出半粒米大的新芽。天明未久，华大妈已在右边的一坐新坟前面，排出四碟菜，一碗饭，哭了一场。化过纸，呆呆的坐在地上；仿佛等候什么似的，但自己也说不出等候什么。微风起来，吹动他短发，确乎比去年白得多了。</p>
<p>小路上又来了一个女人，也是半白头发，褴褛的衣裙；提一个破旧的朱漆圆篮，外挂一串纸锭，三步一歇的走。忽然见华大妈坐在地上看她，便有些踌躇，惨白的脸上，现出些羞愧的颜色；但终于硬着头皮，走到左边的一坐坟前，放下了篮子。</p>
<p>那坟与小栓的坟，一字儿排着，中间只隔一条小路。华大妈看他排好四碟菜，一碗饭，立着哭了一通，化过纸锭；心里暗暗地想，“这坟里的也是儿子了。”那老女人徘徊观望了一回，忽然手脚有些发抖，跄跄踉踉退下几步，瞪着眼只是发怔。</p>
<p>华大妈见这样子，生怕她伤心到快要发狂了；便忍不住立起身，跨过小路，低声对他说，“你这位老奶奶不要伤心了，——我们还是回去罢。”</p>
<p>那人点一点头，眼睛仍然向上瞪着；也低声痴痴的说道，“你看，——看这是什么呢？”</p>
<p>华大妈跟了他指头看去，眼光便到了前面的坟，这坟上草根还没有全合，露出一块一块的黄土，煞是难看。再往上仔细看时，却不觉也吃一惊；——分明有一圈红白的花，围着那尖圆的坟顶。</p>
<p>他们的眼睛都已老花多年了，但望这红白的花，却还能明白看见。花也不很多，圆圆的排成一个圈，不很精神，倒也整齐。华大妈忙看他儿子和别人的坟，却只有不怕冷的几点青白小花，零星开着；便觉得心里忽然感到一种不足和空虚，不愿意根究。那老女人又走近几步，细看了一遍，自言自语的说，“这没有根，不像自己开的。——这地方有谁来呢？孩子不会来玩；——亲戚本家早不来了。——这是怎么一回事呢？”他想了又想，忽又流下泪来，大声说道：</p>
<p>“瑜儿，他们都冤枉了你，你还是忘不了，伤心不过，今天特意显点灵，要我知道么？”他四面一看，只见一只乌鸦，站在一株没有叶的树上，便接着说，“我知道了。——瑜儿，可怜他们坑了你，他们将来总有报应，天都知道；你闭了眼睛就是了。——你如果真在这里，听到我的话，——便教这乌鸦飞上你的坟顶，给我看罢。”</p>
<p>微风早经停息了；枯草支支直立，有如铜丝。一丝发抖的声音，在空气中愈颤愈细，细到没有，周围便都是死一般静。两人站在枯草丛里，仰面看那乌鸦；那乌鸦也在笔直的树枝间，缩着头，铁铸一般站着。</p>
<p>许多的工夫过去了；上坟的人渐渐增多，几个老的小的，在土坟间出没。</p>
<p>华大妈不知怎的，似乎卸下了一挑重担，便想到要走；一面劝着说，“我们还是回去罢。”</p>
<p>那老女人叹一口气，无精打采的收起饭菜；又迟疑了一刻，终于慢慢地走了。嘴里自言自语的说，“这是怎么一回事呢？……”</p>
<p>他们走不上二三十步远，忽听得背后“哑——”的一声大叫；两个人都悚然的回过头，只见那乌鸦张开两翅，一挫身，直向着远处的天空，箭也似的飞去了。</p>
]]></content>
      <categories>
        <category>每周转载</category>
      </categories>
      <tags>
        <tag>每周转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos安装指南SOP</title>
    <url>/2022/09/04/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/010-Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97SOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<h1 id="1-Windows安装"><a href="#1-Windows安装" class="headerlink" title="1.Windows安装"></a>1.Windows安装</h1><p>开发阶段采用单机安装即可。</p>
<h2 id="1-1-下载安装包"><a href="#1-1-下载安装包" class="headerlink" title="1.1.下载安装包"></a>1.1.下载安装包</h2><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p>
<p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p>
<p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<p>如图：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-8l9oZtVQ-1662295078173)(assets&#x2F;image-20210402161102887.png)]<img src="https://img-blog.csdnimg.cn/7ea91788b52d410482828bbd279320b4.png#pic_center" alt="在这里插入图片描述"></p>
<p>本课程采用1.4.1.版本的Nacos，课前资料已经准备了安装包：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-LsTNfswl-1662295078174)(assets&#x2F;image-20210402161130261.png)] <img src="https://img-blog.csdnimg.cn/293a9f6caceb4ccca657554891cb4c87.png#pic_center" alt="在这里插入图片描述"></p>
<p>windows版本使用<code>nacos-server-1.4.1.zip</code>包即可。</p>
<h2 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2.解压"></a>1.2.解压</h2><p>将这个包解压到任意非中文目录下，如图：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-tAMNivRv-1662295078175)(assets&#x2F;image-20210402161843337.png)] <img src="https://img-blog.csdnimg.cn/9d1d96dc6998400cb235eb60e0bd7c35.png#pic_center" alt="在这里插入图片描述"></p>
<p>目录说明：</p>
<ul>
<li>bin：启动脚本</li>
<li>conf：配置文件</li>
</ul>
<h2 id="1-3-端口配置"><a href="#1-3-端口配置" class="headerlink" title="1.3.端口配置"></a>1.3.端口配置</h2><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p>
<p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hMieG7mC-1662295078175)(assets&#x2F;image-20210402162008280.png)] </p>
<p>修改其中的内容：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-PynUoaLr-1662295078175)(assets&#x2F;image-20210402162251093.png)]<img src="https://img-blog.csdnimg.cn/e3028393db514d1b9d1ac289edd56eea.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="1-4-启动"><a href="#1-4-启动" class="headerlink" title="1.4.启动"></a>1.4.启动</h2><p>启动非常简单，进入bin目录，结构如下：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-AmcbiZo5-1662295078176)(assets&#x2F;image-20210402162350977.png)] <img src="https://img-blog.csdnimg.cn/9857e6e48c85412c8db868261c57f0f2.png#pic_center" alt="在这里插入图片描述"></p>
<p>然后执行命令即可：</p>
<ul>
<li><p>windows命令：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">startup.<span class="built_in">cmd</span> -m standalone</span><br></pre></td></tr></table></figure></li>
</ul>
<p>执行后的效果如图：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-l7yCvRBC-1662295078176)(assets&#x2F;image-20210402162526774.png)]<img src="https://img-blog.csdnimg.cn/7b805706c2794870b92145613c9215cb.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="1-5-访问"><a href="#1-5-访问" class="headerlink" title="1.5.访问"></a>1.5.访问</h2><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF%EF%BC%9A">http://127.0.0.1:8848/nacos即可：</a></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-iwy1FkvW-1662295078176)(assets&#x2F;image-20210402162630427.png)]<img src="https://img-blog.csdnimg.cn/c61ef6beb0db44bba597d51891d1686f.png#pic_center" alt="在这里插入图片描述"></p>
<p>默认的账号和密码都是nacos，进入后：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-grQgnc0p-1662295078176)(assets&#x2F;image-20210402162709515.png)]<img src="https://img-blog.csdnimg.cn/ffddf2dba1bc40389c0c81bbe0df84b4.png#pic_center" alt="在这里插入图片描述"></p>
<h1 id="2-Linux安装"><a href="#2-Linux安装" class="headerlink" title="2.Linux安装"></a>2.Linux安装</h1><p>Linux或者Mac安装方式与Windows类似。</p>
<h2 id="2-1-安装JDK"><a href="#2-1-安装JDK" class="headerlink" title="2.1.安装JDK"></a>2.1.安装JDK</h2><p>Nacos依赖于JDK运行，索引Linux上也需要安装JDK才行。</p>
<p>上传jdk安装包：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2T7JpuSe-1662295078177)(assets&#x2F;image-20210402172334810.png)] <img src="https://img-blog.csdnimg.cn/d73306a485be483fbe8c27947364abbc.png#pic_center" alt="在这里插入图片描述"></p>
<p>上传到某个目录，例如：<code>/usr/local/</code></p>
<p>然后解压缩：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xvf jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<p>然后重命名为java</p>
<p>配置环境变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<p>设置环境变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>





<h2 id="2-2-上传安装包"><a href="#2-2-上传安装包" class="headerlink" title="2.2.上传安装包"></a>2.2.上传安装包</h2><p>如图：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-R6FirOTD-1662295078177)(assets&#x2F;image-20210402161102887.png)]<img src="https://img-blog.csdnimg.cn/4514928bf4b94abd9d4d3a13db991031.png#pic_center" alt="在这里插入图片描述"></p>
<p>也可以直接使用课前资料中的tar.gz：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-SunAJAN8-1662295078177)(assets&#x2F;image-20210402161130261.png)] <img src="https://img-blog.csdnimg.cn/9f3b7288236f46579a205c5e00e3f3f0.png#pic_center" alt="在这里插入图片描述"></p>
<p>上传到Linux服务器的某个目录，例如<code>/usr/local/src</code>目录下：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Aj7cG8GO-1662295078178)(assets&#x2F;image-20210402163715580.png)]<img src="https://img-blog.csdnimg.cn/eae08759c05543d282e256b325acbe38.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="2-3-解压"><a href="#2-3-解压" class="headerlink" title="2.3.解压"></a>2.3.解压</h2><p>命令解压缩安装包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xvf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>然后删除安装包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>目录中最终样式：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-NbGF621e-1662295078178)(assets&#x2F;image-20210402163858429.png)] <img src="https://img-blog.csdnimg.cn/378bd7d4716643b48252b62066743ec5.png#pic_center" alt="在这里插入图片描述"></p>
<p>目录内部：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-95zjYzoG-1662295078178)(assets&#x2F;image-20210402164414827.png)]<img src="https://img-blog.csdnimg.cn/ed2a253d6653444ea0f950ffc4d01cbd.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="2-4-端口配置"><a href="#2-4-端口配置" class="headerlink" title="2.4.端口配置"></a>2.4.端口配置</h2><p>与windows中类似</p>
<h2 id="2-5-启动"><a href="#2-5-启动" class="headerlink" title="2.5.启动"></a>2.5.启动</h2><p>在nacos&#x2F;bin目录中，输入命令启动Nacos：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure>







<h1 id="3-Nacos的依赖"><a href="#3-Nacos的依赖" class="headerlink" title="3.Nacos的依赖"></a>3.Nacos的依赖</h1><p>父工程：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>客户端：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>008-java基础语法之集合</title>
    <url>/2022/09/03/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/008-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、泛型"><a href="#1、泛型" class="headerlink" title="1、泛型"></a>1、泛型</h3><blockquote>
<p>集合，就是可以长度可以发生改变的数组实现<br>泛型： 用来指定集合存储的数据类型</p>
</blockquote>
<p><strong>Student类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>StudentTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            目标：掌握集合的概念。理解泛型的作用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    集合，就是可以长度可以发生改变的数组实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    泛型： 用来指定集合存储的数据类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//泛型就是用来指定我们集合存储的数据的类型</span></span><br><span class="line">        <span class="comment">//我想创建一个集合 ，可以用来保存字符串</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        System.out.println(list);  <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//我想创建一个集合 ，可以用来保存学生对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、成员方法"><a href="#2、成员方法" class="headerlink" title="2、成员方法"></a>2、成员方法</h3><h5 id="2-1-增-add"><a href="#2-1-增-add" class="headerlink" title="2.1 增~add"></a>2.1 增~add</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01_</span>添加 &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标：掌握如何使用集合保存元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        boolean add(E e) 将指定的元素追加到此列表的末尾。    【重点】</span></span><br><span class="line"><span class="comment">        void add(int index, E element) 在此列表中的指定位置插入指定的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> list.add(<span class="string">&quot;a&quot;</span>);      <span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a:&quot;</span> + a);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>); <span class="comment">//返回值都是为true,所以 意义不大，不接收了    1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  void add(int index, E element) 在此列表中的指定位置插入指定的元素。</span></span><br><span class="line">        <span class="comment">// 我想把 c 添加到第一个位置。</span></span><br><span class="line">        list.add(<span class="number">2</span>, <span class="string">&quot;c&quot;</span>);  <span class="comment">// 0 1  2  因为使用的时候需要考虑索引的越界问题</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合的元素:&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-删-remove"><a href="#2-2-删-remove" class="headerlink" title="2.2 删~remove"></a>2.2 删~remove</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04_</span>删除 &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标： 掌握集合的删除元素的方法</span></span><br><span class="line"><span class="comment">            E remove(int index) 删除该列表中指定位置的元素。</span></span><br><span class="line"><span class="comment">            boolean remove(Object o)</span></span><br><span class="line"><span class="comment">            从列表中删除指定元素的第一个出现（如果存在）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);<span class="comment">// 0</span></span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);<span class="comment">// 1</span></span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);<span class="comment">// 2</span></span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);<span class="comment">// 3</span></span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);<span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// E remove(int index) 删除该列表中指定位置的元素。</span></span><br><span class="line">      <span class="comment">//  String s = list.remove(4);  //返回值没有太大意义， 所以 一般都不接。</span></span><br><span class="line">      <span class="comment">//  System.out.println(&quot;被删除的元素:&quot; + s);</span></span><br><span class="line">         <span class="comment">// boolean remove(Object o) 从列表中删除指定元素的第一个出现（如果存在）。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> list.remove(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;flag:&quot;</span> + flag);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合的元素:&quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-3-改-set"><a href="#2-3-改-set" class="headerlink" title="2.3 改~set"></a>2.3 改~set</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03_</span>修改 &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标：掌握修改集合的元素方法</span></span><br><span class="line"><span class="comment">            E set(int index, E element)</span></span><br><span class="line"><span class="comment">            用指定的元素替换此列表中指定位置的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);<span class="comment">// 0</span></span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);<span class="comment">// 1</span></span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);<span class="comment">// 2</span></span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//我想把 d 修改成 dd</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.set(<span class="number">3</span>, <span class="string">&quot;dd&quot;</span>);   <span class="comment">//返回的是修改前的元素，一般我们也不接收。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;修改前的元素：&quot;</span> + s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果我想把b 改成 bb?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-查-get"><a href="#2-4-查-get" class="headerlink" title="2.4 查~get"></a>2.4 查~get</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02_</span>获取 &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标：掌握如何从集合中获取元素</span></span><br><span class="line"><span class="comment">            E get(int index) 返回此列表中指定位置的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);<span class="comment">// 0</span></span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);<span class="comment">// 1</span></span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);<span class="comment">// 2</span></span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取索引为0的 元素 , 第一个元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;集合的第一个元素是:&quot;</span> + s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取索引为1的 元素 ， 第二个元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;集合的第二个元素是:&quot;</span> + s2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前集合的元素是:&quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3、方法"><a href="#3、方法" class="headerlink" title="3、方法"></a>3、方法</h3><p><strong>Teacher类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Teacher&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;田七&quot;</span>, <span class="number">29</span>);</span><br><span class="line">        list.add(t1);</span><br><span class="line">        list.add(t2);</span><br><span class="line">        list.add(t3);</span><br><span class="line">        list.add(t4);</span><br><span class="line">        list.add(t5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用完方法之后，可以得到筛选之后的数据</span></span><br><span class="line">        ArrayList&lt;Teacher&gt; newList = getList(list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newList.size(); i++) &#123;</span><br><span class="line">            <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> newList.get(i);</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot;...&quot;</span> + t.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*需求：定义一个方法，方法接收一个集合对象（泛型为Teacher），方法内部将年龄低于30的老师对象找出</span></span><br><span class="line"><span class="comment">            并存入新集合对象，方法返回新集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            目标：将年龄低于30的老师对象找出并存入新集合对象，方法返回新集合</span></span><br><span class="line"><span class="comment">            数据：需要有一个集合对象【包含很多的数据】</span></span><br><span class="line"><span class="comment">            思路：</span></span><br><span class="line"><span class="comment">                    1.定义方法，接收一个带有数据的集合</span></span><br><span class="line"><span class="comment">                    2.我们需要创建一个新的集合对象，用来保存符合条件的数据</span></span><br><span class="line"><span class="comment">                    3.遍历集合，获取每一个老师对象</span></span><br><span class="line"><span class="comment">                        3.1 获取老师的年龄，判断是否低于30岁</span></span><br><span class="line"><span class="comment">                        3.2 如果低于30岁，则把当前的老师对象保存到新集合中</span></span><br><span class="line"><span class="comment">                    4. 循环结束之后，返回新集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//1.定义方法，接收一个带有数据的集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Teacher&gt; <span class="title function_">getList</span><span class="params">(ArrayList&lt;Teacher&gt; aaa)</span> &#123;</span><br><span class="line">        <span class="comment">//2.我们需要创建一个新的集合对象，用来保存符合条件的数据</span></span><br><span class="line">        ArrayList&lt;Teacher&gt; newList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//3.遍历集合，获取每一个老师对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; aaa.size(); i++) &#123;</span><br><span class="line">            <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> aaa.get(i);</span><br><span class="line">            <span class="comment">//3.1 获取老师的年龄，判断是否低于30岁</span></span><br><span class="line">            <span class="keyword">if</span> (t.getAge() &lt; <span class="number">30</span>) &#123;</span><br><span class="line">                <span class="comment">//3.2 如果低于30岁，则把当前的老师对象保存到新集合中</span></span><br><span class="line">                newList.add(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 循环结束之后，返回新集合</span></span><br><span class="line">        <span class="keyword">return</span> newList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>007-java基础语法之String类以及方法</title>
    <url>/2022/09/03/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/007-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8BString%E7%B1%BB%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、String-类的成员方法"><a href="#1、String-类的成员方法" class="headerlink" title="1、String 类的成员方法"></a>1、String 类的成员方法</h3><h5 id="1-1-String之-split-字符串内容拆分"><a href="#1-1-String之-split-字符串内容拆分" class="headerlink" title="1.1 String之 split (字符串内容拆分)"></a>1.1 String之 split (字符串内容拆分)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标： 掌握字符串内容拆分的方法</span></span><br><span class="line"><span class="comment">            String[] split(String regex) 将此字符串按照给定regex拆分为多个字符串</span></span><br><span class="line"><span class="comment">        需求：已知邮箱账号是: 18366667873@163.com，使用字符串的方法，获取账号中的手机号码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;18366667873@163.com&quot;</span>;</span><br><span class="line">    String[] strs = username.split(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">        System.out.println(strs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;手机号码为:&quot;</span> + strs[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;张三-23-广州&quot;</span>;</span><br><span class="line">    String[] ss = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ss.length; i++) &#123;</span><br><span class="line">        System.out.println(ss[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-String-之-length-获取字符串长度"><a href="#1-2-String-之-length-获取字符串长度" class="headerlink" title="1.2 String 之 length (获取字符串长度)"></a>1.2 String 之 length (获取字符串长度)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            目标： 掌握获取字符串长度的方法</span></span><br><span class="line"><span class="comment">                int length() 返回此字符串的长度。</span></span><br><span class="line"><span class="comment">                需求：已知手机号码是: 18366667873，使用字符串的方法，判断输入的手机号码是否为11位</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> <span class="string">&quot;18366667873&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> phoneNumber.length();</span><br><span class="line">    System.out.println(<span class="string">&quot;length:&quot;</span> + length);</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">11</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机号码为11位&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机号码长度不对&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-string-之-charAt-（获取指定索引的字符）"><a href="#1-3-string-之-charAt-（获取指定索引的字符）" class="headerlink" title="1.3 string 之 charAt （获取指定索引的字符）"></a>1.3 string 之 charAt （获取指定索引的字符）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标：掌握如何获取指定索引处的字符</span></span><br><span class="line"><span class="comment">            public char charAt(int index):   获取指定索引处的字符。(字符串的索引也是从0开始算)</span></span><br><span class="line"><span class="comment">       需求： 已知手机号码是: 18366667873，使用字符串的方法，获取字符串中前三个字符</span></span><br><span class="line"><span class="comment">         获取字符串中指定索引的字符的方法:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> <span class="string">&quot;18366667873&quot;</span>;</span><br><span class="line">    <span class="comment">//获取字符串索引为0的字符</span></span><br><span class="line">    <span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span>  phoneNumber.charAt(<span class="number">0</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;字符串的第一个字符是:&quot;</span> + ch1);</span><br><span class="line">    <span class="comment">//获取字符串索引为1的字符</span></span><br><span class="line">    <span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> phoneNumber.charAt(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;字符串的第二个字符是:&quot;</span> + ch2);</span><br><span class="line">    <span class="comment">//我想获取手机号码最后的3</span></span><br><span class="line">    <span class="type">char</span> <span class="variable">ch3</span> <span class="operator">=</span> phoneNumber.charAt(<span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;手机号码的最后一个元素:&quot;</span> + ch3);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------判断这个手机号码是不是都是数字--------&quot;</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1. 遍历这个字符串</span></span><br><span class="line"><span class="comment">            2. 获取每一个字符</span></span><br><span class="line"><span class="comment">            3. 判断当前的字符是否是 数字  ===&gt;    每一个字符都可以看成是一个数字</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. 遍历这个字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; phoneNumber.length(); i++) &#123;</span><br><span class="line">        <span class="comment">//2. 获取每一个字符</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> phoneNumber.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">11</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个手机号码全都是数字&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个手机号码有的位置不是数字&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-4-String-之-substring-字符串内容的截取"><a href="#1-4-String-之-substring-字符串内容的截取" class="headerlink" title="1.4 String 之 substring {字符串内容的截取}"></a>1.4 String 之 substring {字符串内容的截取}</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标：掌握字符串内容截取的方法</span></span><br><span class="line"><span class="comment">      截取字符串中一段内容的方法:</span></span><br><span class="line"><span class="comment">                 public String substring(int beginIndex):从指定索引开始截取字符串的所有内容</span></span><br><span class="line"><span class="comment">                 public String substring(int beginIndex,int endIndex):从beginIndex开始(包含)，截取到endIndex(不包含)</span></span><br><span class="line"><span class="comment">        需求：已知手机号码是: 18366667873，使用字符串的方法，屏蔽手机号码中间的四个数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phoneNUmber</span> <span class="operator">=</span> <span class="string">&quot;18366667873&quot;</span>;</span><br><span class="line">    <span class="comment">//从手机号码里面，截取前三位， 从索引为0截取到索引为3的位置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> phoneNUmber.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;前三位:&quot;</span> + start);</span><br><span class="line">    <span class="comment">//从手机号码里面，截取后四位 ,从索引为7的位置开始截取后面的所有</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> phoneNUmber.substring(<span class="number">7</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;后四位:&quot;</span> + end);</span><br><span class="line">    <span class="comment">//实现手机号码的屏蔽</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> start + <span class="string">&quot;****&quot;</span> + end;</span><br><span class="line">    System.out.println(<span class="string">&quot;屏蔽之后的手机号码：&quot;</span> + str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-5-String-之-contains-字符串包含方法"><a href="#1-5-String-之-contains-字符串包含方法" class="headerlink" title="1.5 String 之 contains (字符串包含方法)"></a>1.5 String 之 contains (字符串包含方法)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标：掌握contains方法的作用</span></span><br><span class="line"><span class="comment">        已知邮箱账号是: 18366667873@163.com，使用字符串的方法，判断账号中是否包含@163</span></span><br><span class="line"><span class="comment">        判断字符串中是否包含指定内容的方法:</span></span><br><span class="line"><span class="comment">           public boolean contains(String str):判断字符串中是否包含指定的字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;18366667873@163.com&quot;</span>;</span><br><span class="line">    <span class="comment">//判断账号中是否包含@163</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> username.contains(<span class="string">&quot;@163&quot;</span>);</span><br><span class="line">    System.out.println(result);<span class="comment">//有就返回true ，没有就返回false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-6-String-之-replace-字符串替换"><a href="#1-6-String-之-replace-字符串替换" class="headerlink" title="1.6 String 之 replace (字符串替换)"></a>1.6 String 之 replace (字符串替换)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    String replace(String oldStr, String replacement)</span></span><br><span class="line"><span class="comment">        草泥马的上单，一直带线，不来参团。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;草泥马的上单，一直带线，不来参团。&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.replace(<span class="string">&quot;草泥马&quot;</span> , <span class="string">&quot;****&quot;</span>);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-7-String-之-equals-字符串内容比较"><a href="#1-7-String-之-equals-字符串内容比较" class="headerlink" title="1.7 String 之 equals  (字符串内容比较)"></a>1.7 String 之 equals  (字符串内容比较)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        目标： 掌握实现字符串内容比较的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            boolean equals(Object anObject) 将此字符串与指定对象进行比较。</span></span><br><span class="line"><span class="comment">            严格区分大小写</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入注册的账号&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">registerUsername</span> <span class="operator">=</span> sc.next();  <span class="comment">// 实际上就是给你创建一个新的字符串 -&gt; new</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入登录的账号&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">loginUsername</span> <span class="operator">=</span> sc.next(); <span class="comment">// 实际上就是给你创建一个新的字符串 -&gt; new</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> loginUsername.equals(registerUsername);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>equals 方法的细节</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//严格区分大小写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Abc&quot;</span>;</span><br><span class="line">    System.out.println(s1.equals(s2));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    <span class="comment">//跟其他类型比较，一律返回false</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// hello</span></span><br><span class="line">    <span class="type">char</span>[] chs = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(s3.equals(chs));</span><br><span class="line">    <span class="comment">//双引号扩起来的内容 都是字符串对象。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;123&quot;</span>.equals(<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-8-字符常量池"><a href="#1-8-字符常量池" class="headerlink" title="1.8 字符常量池"></a>1.8 字符常量池</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        字符串的创建方式：</span></span><br><span class="line"><span class="comment">            1.直接赋值的方式， String s = &quot;xxxx&quot;;</span></span><br><span class="line"><span class="comment">                    创建在堆内存的常量池中。 如果常量池中不存在这个字符串，就会创建，如果有了，就会使用前面的。【共享使用】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            2.通过构造方法创建字符串</span></span><br><span class="line"><span class="comment">                    创建在堆内存中。每一次都会开辟一块新的内存空间。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">              == 在这里比较的是地址值</span></span><br><span class="line"><span class="comment">                    如果是直接赋值的方式得到两个字符串，内容相等，则地址值相等。</span></span><br><span class="line"><span class="comment">                    如果是直接new的方式得到两个字符串，内容不管相等还是不相等，地址值都是不相等。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;广州&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;广州&quot;</span>;</span><br><span class="line">    <span class="comment">//通过构造方法创建对象</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;s1:&quot;</span> + s1);</span><br><span class="line">    System.out.println(<span class="string">&quot;s2:&quot;</span> + s2);</span><br><span class="line">    System.out.println(<span class="string">&quot;s3:&quot;</span> + s3);</span><br><span class="line">    System.out.println(<span class="string">&quot;s4:&quot;</span> + s4);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    <span class="comment">//比较的都是地址值 这里所有的字符串对象，都是代表一个内存地址值</span></span><br><span class="line">    System.out.println(s1 == s2);  <span class="comment">//true</span></span><br><span class="line">    System.out.println(s1 == s3); <span class="comment">// false</span></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用 == 做比较</span><br><span class="line">    基本类型：比较的是数据值是否相同</span><br><span class="line">    引用类型：比较的是地址值是否相同</span><br><span class="line"></span><br><span class="line">字符串是引用类型，它使用==做比较时比较的是地址值</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、jvm为了提升性能和减少内存开销，避免字符的重复创建，其维护了一块特殊的内存空间，即字符串常量池，用来存储字符串常量。</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、 使用String直接赋值: String str=“abc”:可能创建一个或者不创建对象，如果”abc”在字符串池中不存在，会在java字符串池中创建一个String对象(”abc”)，然后str指向这个内存地址，无论以后用这种方式创建多少个值为”abc”的字符串对象，始终只有一个内存地址被分配。</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>、使用<span class="keyword">new</span> <span class="title class_">String</span>()赋值: String str=newString(“abc”);至少会创建一个对象，也有可能创建两个。因为用到<span class="keyword">new</span>关键字，肯定会在堆中创建一个String对象，如果字符池中已经存在”abc”，则不会在字符串池中创建一个String对象，如果不存在，则会在字符串常量池中也创建一个对象。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、如果一个字符串采用拼接的方式，并且拼接的内容都是字面量的话，那么会自动将字符串先拼接完再赋值，如果常量池中已经有了拼接完成之后的字面量，那么此变量的值的地址就是常量池中的完整字符串的地址。</span><br><span class="line">    </span><br><span class="line">如果是变量和字面量拼接就会产生<span class="keyword">new</span> 一个新的对象【它底层使用的是StringBuilder进行字符串拼接的，拼接完成后会使用<span class="keyword">new</span>关键字生成并返回一个新的String对象。】</span><br></pre></td></tr></table></figure>



<h3 id="2、StringBuilder"><a href="#2、StringBuilder" class="headerlink" title="2、StringBuilder"></a>2、StringBuilder</h3><h5 id="2-1-字符串拼接"><a href="#2-1-字符串拼接" class="headerlink" title="2.1 字符串拼接"></a>2.1 字符串拼接</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>; </span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;c&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1 + s2+s;</span><br><span class="line">        System.out.println(Arrays.toString(s.getBytes(StandardCharsets.UTF_8)));<span class="comment">//[B@4eec7777</span></span><br><span class="line">        System.out.println(Arrays.toString(s1.getBytes(StandardCharsets.UTF_8)));<span class="comment">//[B@3b07d329</span></span><br><span class="line">        System.out.println(Arrays.toString(s2.getBytes(StandardCharsets.UTF_8)));<span class="comment">//[B@41629346</span></span><br><span class="line">        System.out.println(Arrays.toString(s3.getBytes(StandardCharsets.UTF_8)));<span class="comment">//[B@404b9385</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、当把三个变量拼接的结果赋值给s3，此时的s3是开辟了新的内存空间的，存放了三个字符串拼接结果的临时变量，最终这个临时变量把内存空间给了s3，也就是s3又有了一个内存空间。整个流程下来，一共需要开辟<span class="number">4</span>个内存空间，对于内存的消耗很大，因此不适合用在实际开发中。（是New 一个新对象出来）</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象</span><br></pre></td></tr></table></figure>

<h5 id="2-2-StringBuilder-输出的是内容"><a href="#2-2-StringBuilder-输出的是内容" class="headerlink" title="2.2 StringBuilder 输出的是内容"></a>2.2 StringBuilder 输出的是内容</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标： 了解StringBuilder的构造方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            StringBuilder()</span></span><br><span class="line"><span class="comment">            StringBuilder(String str)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;sb1:&quot;</span> + sb1);<span class="comment">//这里输出的也是内容</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;广州&quot;</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb2:&quot;</span> + sb2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-拼接"><a href="#2-3-拼接" class="headerlink" title="2.3 拼接"></a>2.3 拼接</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            目标： 掌握StringBuilder的拼接方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                append(任意类型的数据);  添加任意类型的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                在拼接的过程中，不会创建新的对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;拼接前:&quot;</span> + sb);</span><br><span class="line">    sb.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    sb.append(<span class="number">123</span>);</span><br><span class="line">    sb.append(<span class="literal">true</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;拼接后:&quot;</span> + sb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-转换成字符串"><a href="#2-4-转换成字符串" class="headerlink" title="2.4 转换成字符串"></a>2.4 转换成字符串</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      String  toString() : 实现把StringBuilder 转化为String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;拼接前:&quot;</span> + sb);</span><br><span class="line">    sb.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    sb.append(<span class="number">123</span>);</span><br><span class="line">    sb.append(<span class="literal">true</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;拼接后:&quot;</span> + sb);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能直接把StringBuilder赋值给String</span></span><br><span class="line">    <span class="comment">//String s = sb;</span></span><br><span class="line">    <span class="comment">//我们需要把StringBuilder转化为String</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">    System.out.println(<span class="string">&quot;转化之后的字符串:&quot;</span> + s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-5-反转"><a href="#2-5-反转" class="headerlink" title="2.5 反转"></a>2.5 反转</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            reverse(); 可以实现把StringBuilder的内容实现反转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//把 abc 反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="comment">//要把String先转化为StringBuilder</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line">        <span class="comment">//因为StringBuilder里面有个方法，可以实现直接把内容反转</span></span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="comment">//再把StringBuilder转化为String</span></span><br><span class="line">        s = sb.toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>知道API帮助文档的作用，我们可以通过它去学习JDK给我们提供的各种类</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>String:</span><br><span class="line">        字符串内容的拆分： String[] split(String regex);</span><br><span class="line">        字符串的长度:  <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">        获取指定索引的字符:   <span class="type">char</span>  <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">        字符串的截取：</span><br><span class="line">                  从指定索引截取后面所有的内容： String  <span class="title function_">substring</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">                  从指定索引处截取到另外一个索引【不包含这个索引】:</span><br><span class="line">                        String  <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex , <span class="type">int</span> endIndex)</span></span><br><span class="line">        字符串的包含：  <span class="type">boolean</span>  <span class="title function_">contains</span><span class="params">(String str)</span></span><br><span class="line">        字符串的比较：  <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span></span><br><span class="line">        字符串的替换:  String  <span class="title function_">replace</span><span class="params">(String oldStr , String newStr)</span>;</span><br><span class="line"></span><br><span class="line">        创建字符串的区别：</span><br><span class="line">                <span class="number">1.</span> 直接赋值的方式。字符串内容如果相同，地址值就是一样</span><br><span class="line">                <span class="number">2.</span> 通过构造方法创建，字符串的内容不管相同还是不相同，地址都是不一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>StringBuilder:</span><br><span class="line">        作用：提供字符串拼接的效率</span><br><span class="line"></span><br><span class="line">        构造方法：</span><br><span class="line">                StringBuilder()</span><br><span class="line">                StringBuilder(String str);</span><br><span class="line">        成员方法：</span><br><span class="line">                append(任意类型的数据);</span><br><span class="line">                toString(); 实现把StringBuilder转化为String</span><br><span class="line">                <span class="title function_">reverse</span><span class="params">()</span>; 实现把StringBuilder的内容反转</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>006-java基础语法之面向对象</title>
    <url>/2022/09/03/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/006-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、类和对象"><a href="#1、类和对象" class="headerlink" title="1、类和对象"></a>1、类和对象</h3><blockquote>
<p>类：【类具有共同属性 以及行为的实物的抽象】<br>属性 通过成员变量，定义在类中方法外的变量  数据类型 变量名;<br>行为 通过成员方法，跟我们之前定义方法比较，少了static</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">    成员变量</span><br><span class="line">        成员方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对象： 真实存在的实体</p>
<p>创建对象<br>    <strong>类名 对象名 &#x3D; new 类名();</strong><br>    <strong>成员变量：</strong><br>            对象名.属性名<br>    <strong>成员方法：</strong><br>            对象名.方法名(参数);</p>
</blockquote>
<h5 id="1-1-案例："><a href="#1-1-案例：" class="headerlink" title="1.1 案例："></a>1.1 案例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类就相当于是一张设计图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 先创建一个类</span></span><br><span class="line"><span class="comment">        2. 提供属性    数据类型 变量名;[成员变量，类中方法外]</span></span><br><span class="line"><span class="comment">        3. 提供行为    跟我们之前定义方法比较，少了static[成员方法]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;  <span class="comment">//Student  学生</span></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//学习</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;  <span class="comment">//study 学习</span></span><br><span class="line">        System.out.println(<span class="string">&quot;键盘敲烂 ， 年薪百万&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123; <span class="comment">// 学生的测试类</span></span><br><span class="line">    <span class="comment">//作用 ： 创建对象 使用对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//s 就是一个对象。它就是Java世界中的一个学生</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        s.age = <span class="number">23</span>;</span><br><span class="line">        System.out.println(s.name + <span class="string">&quot;...&quot;</span> + s.age);</span><br><span class="line">        s.study();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        s2.age = <span class="number">24</span>;</span><br><span class="line">        System.out.println(s2.name + <span class="string">&quot;...&quot;</span> + s2.age);</span><br><span class="line">        s2.study();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、成员变量和局部变量"><a href="#2、成员变量和局部变量" class="headerlink" title="2、成员变量和局部变量"></a>2、成员变量和局部变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">                成员变量                    局部变量</span><br><span class="line">定义位置：        类中方法外                  方法内部或者方法参数列表位置</span><br><span class="line">内存的位置：      堆内存                      栈内存</span><br><span class="line">生命周期：        随着对象的创建而创建          随着方法的调用而创建，随着方法的消失而消失</span><br><span class="line">                随着对象的消失而消失</span><br><span class="line">初始化值：         有                         没有</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    成员变量：定义在类中方法外</span></span><br><span class="line"><span class="comment">    局部变量：定义方法里面，或者方法参数列表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String phoneNumber)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">//   System.out.println(a);</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、数据的安全性"><a href="#3、数据的安全性" class="headerlink" title="3、数据的安全性"></a>3、数据的安全性</h3><blockquote>
<p>private : 修饰成员的特点，只能在本类中访问<br>            提供 set 方法，修改&#x2F;赋值<br>            提供 get 方法，给别的类获取值</p>
</blockquote>
<h3 id="4、this-的使用"><a href="#4、this-的使用" class="headerlink" title="4、this 的使用"></a>4、this 的使用</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span> 使用原因：成员变量和 局部变量同名的时候，跟进就近原则，方法里面的变量 代表的是 局部变量</span><br><span class="line">             为了区分开 同名的成员变量和 局部变量，我们使用<span class="keyword">this</span>.</span><br><span class="line">             <span class="keyword">this</span> 修饰的变量 代表 类中的成员变量</span><br></pre></td></tr></table></figure>

<h3 id="5、构造方法"><a href="#5、构造方法" class="headerlink" title="5、构造方法"></a>5、构造方法</h3><blockquote>
<p>构造方法:<br>    1.系统会默认给我们提供一个无参构造，如果你写了，系统不给你提供了<br>    2.我们建议，你写构造方法的时候，需要提供无参和 满参构造<br>    3.只能new的时候去调用构造方法，不能手动去调用<strong>【不能通过对象去调用】</strong></p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">构造方法：</span><br><span class="line">    权限修饰符  类名()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a. 方法名和类名一致</span><br><span class="line">    b. 没有<span class="keyword">void</span> 也没有其他的返回值类型</span><br><span class="line">    c. 也没有<span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>构造方法的作用 : 创建对象  <strong>初始化类的对象，并返回对象的地址</strong>  ， 有参构造的作用就是在创建对象的同时去给<strong>成员变量进行赋值</strong>。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        name=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.show(); <span class="comment">//李四</span></span><br><span class="line">        Person p2=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        p2.show();<span class="comment">//王五</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6、案例小节练习"><a href="#6、案例小节练习" class="headerlink" title="6、案例小节练习"></a>6、案例小节练习</h3><blockquote>
<p>1.私有所有的成员变量<br>2.给所有的成员变量提供对应 get&#x2F; set方法<br>3.给类提供无参 以及 满参构造</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//无参 + set方法的</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">23</span>);</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;...&quot;</span> + s.getAge());</span><br><span class="line">        <span class="comment">//使用满参创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span> , <span class="number">24</span>);</span><br><span class="line">        System.out.println(s2.getName() + <span class="string">&quot;....&quot;</span> + s2.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>005-java基础语法之方法</title>
    <url>/2022/09/03/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/005-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、方法的定义"><a href="#1、方法的定义" class="headerlink" title="1、方法的定义"></a>1、方法的定义</h3><blockquote>
<p>方法是一种语法结构，它可以把一段代码封装成一个功能，以方便重复调用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 第一个整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 第二个整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回两个数字中较大的一个数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a &gt; b ? a : b;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、方法的格式"><a href="#2、方法的格式" class="headerlink" title="2、方法的格式"></a>2、方法的格式</h3><h5 id="2-1-方法的格式一"><a href="#2-1-方法的格式一" class="headerlink" title="2.1 方法的格式一"></a>2.1 方法的格式一</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标： 需要大家掌握方法的定义的格式，以及调用格式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                格式：</span></span><br><span class="line"><span class="comment">                        public static void 方法名()&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                 调用：</span></span><br><span class="line"><span class="comment">                        方法名();</span></span><br><span class="line"><span class="comment">                注意，方法写好之后，需要调用才能执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            1. 方法定义之后，需要去调用才能执行。</span></span><br><span class="line"><span class="comment">            2. 方法定义 需要放在方法外面</span></span><br><span class="line"><span class="comment">            3. 方法到底有什么用？</span></span><br><span class="line"><span class="comment">                    方法主要是为了抽取相同逻辑的代码。可以简化我们的代码，因为我们只需要写一次就可以多次使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    isEvenNumber();</span><br><span class="line">    isEvenNumber();</span><br><span class="line">    isEvenNumber();</span><br><span class="line">    isEvenNumber();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求： 定义一个方法，实现判断一个数字是奇数还是偶数，如果是奇数，则输出&quot;奇数&quot;反之，输出 &quot;偶数&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isEvenNumber</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这里调用了方法&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-方法的格式二"><a href="#2-2-方法的格式二" class="headerlink" title="2.2 方法的格式二"></a>2.2 方法的格式二</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">目标：  掌握带参数的方法的定义格式，以及调用格式  ,弄清楚有参数的好处</span></span><br><span class="line"><span class="comment">public static void 方法名(数据类型 变量名, 数据类型 变量名... )&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">调用格式：  方法名(值 , 值...);</span></span><br><span class="line"><span class="comment">好处：</span></span><br><span class="line"><span class="comment">让我们方法更加灵活，增强方法的通用性。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    isEvenNumber2(<span class="number">10</span>);</span><br><span class="line">    isEvenNumber2(<span class="number">15</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    isEvenNumber2(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isEvenNumber2</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-方法的格式三"><a href="#2-3-方法的格式三" class="headerlink" title="2.3 方法的格式三"></a>2.3 方法的格式三</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标：</span></span><br><span class="line"><span class="comment">            掌握带返回值方法的定义的格式以及调用方式，理解返回值的作用</span></span><br><span class="line"><span class="comment">            格式：</span></span><br><span class="line"><span class="comment">                    public static 数据类型 方法名(数据类型 变量名 ,数据类型 变量名....)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        return 数据;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           调用格式：</span></span><br><span class="line"><span class="comment">                    方法名(值);     不推荐，因为这样做拿不到方法给你返回的数据</span></span><br><span class="line"><span class="comment">                    数据类型 变量名 = 方法名(值);      推荐使用。因为我们调用完方法之后，可以拿到方法返回的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         意义： 我们需要根据一个方法生成结果，用来组织另外一段代码逻辑</span></span><br><span class="line"><span class="comment">                【如果调用方法的地方需要拿到自定义方法的结果，就返回】</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> add(<span class="number">90</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> add(<span class="number">90</span>, <span class="number">90</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> sum1 + sum2;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务一：计算两个小组的总成绩</span></span><br><span class="line"><span class="comment">//1. 在方法里面 添加上 return 数据;  数据 -&gt; 你需要返回的数据</span></span><br><span class="line"><span class="comment">//2. 把void 改成这个数据对应的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、方法的注意事项"><a href="#3、方法的注意事项" class="headerlink" title="3、方法的注意事项"></a>3、方法的注意事项</h3><blockquote>
<p>return 的作用：程序到 return 就结束整个方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//   return; //因为方法到这里就已经结束了</span></span><br><span class="line">    <span class="comment">//  int a = 10;   //Unreachable statement 不能到达声明</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;方法结束了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>语法完整性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    test();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//语法完整性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不管走的是if 还是 else 都会返回一个数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">test2</span><span class="params">( <span class="type">int</span> a )</span>&#123;</span><br><span class="line">    <span class="comment">/*    if(a &gt;= 10)&#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;else &#123;</span></span><br><span class="line"><span class="comment">            return false;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    <span class="comment">//Missing return statement  缺少一个返回值的声明</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">1.</span>方法的形参可以是基本类型和引用类型</span><br><span class="line">&gt;<span class="number">2.</span>方法的返回值可以是基本类型，也可以是引用类型</span><br><span class="line">&gt;<span class="number">3.</span>方法形参如果是一个数组，接收的实参是这个数组的地址</span><br><span class="line">&gt;<span class="number">4.</span>方法内部对参数数组的元素进行更改后，不用返回这个数组</span><br><span class="line"></span><br><span class="line">&gt;数据类型：</span><br><span class="line">   基本数据类型：</span><br><span class="line">   <span class="type">byte</span> <span class="type">short</span> <span class="type">char</span> <span class="type">int</span> <span class="type">long</span> <span class="type">float</span> <span class="type">double</span> <span class="type">boolean</span></span><br><span class="line"></span><br><span class="line">   引用数据类型：</span><br><span class="line">   数组，类，接口...</span><br><span class="line"></span><br><span class="line">   基本数据类型，变量名代表的就是具体的值</span><br><span class="line">   引用数据类型，变量名代表的是一个 内存地址 ，它没有具体的值，它用的是别人的。</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4、方法重载"><a href="#4、方法重载" class="headerlink" title="4、方法重载"></a>4、方法重载</h3><blockquote>
<p>方法重载定义：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一个类中，可以存在多个同名的方法。但是 要求，参数列表不同【参数的个数不同，类型不同】</span><br><span class="line">我们把这些方法的关系，称之为 ：  方法重载。</span><br><span class="line">JVM 在调用方法的时候，会根据参数的类型和个数对应去调用方法， 跟返回值类型没有关系</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//   method(10 ,20);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// sum(10 ,20 , 30);</span></span><br><span class="line">    sum(<span class="number">13.14</span> , <span class="number">5.2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了两个整数的求和方法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> a , <span class="type">double</span> b)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了两个小数的求和方法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b , <span class="type">int</span> c)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了三个整数的求和方法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、参数传递"><a href="#5、参数传递" class="headerlink" title="5、参数传递"></a>5、参数传递</h3><blockquote>
<p>1、对于基本数据类型的参数，形式参数的改变，不影响实际参数的值<br>2、引用数据类型的参数，形式参数的改变，会影响实际参数值的变化</p>
</blockquote>
<h5 id="5-1-重点"><a href="#5-1-重点" class="headerlink" title="5.1 重点"></a>5.1 重点</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    showArray(arr, num);</span><br><span class="line">    System.out.println(<span class="string">&quot;arr[2]的结果是:&quot;</span>+arr[<span class="number">2</span>]);   <span class="comment">//6</span></span><br><span class="line">    System.out.println(<span class="string">&quot;num的结果是：&quot;</span>+num);        <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showArray</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line">    num = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、综合练习"><a href="#6、综合练习" class="headerlink" title="6、综合练习"></a>6、综合练习</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义返回值类型为 int 类型，名为 getScore(int[] arr)的静态方法，方法内完成：获取指定数</span></span><br><span class="line"><span class="comment">        组 arr 中大于平均值的元素的个数，并返回。</span></span><br><span class="line"><span class="comment">            目标： 返回大于数组平均值的元素的个数</span></span><br><span class="line"><span class="comment">            数据： 数组</span></span><br><span class="line"><span class="comment">            思路：</span></span><br><span class="line"><span class="comment">                    1. 需要求出平均值  ==&gt;   平均值 =  总和 / 总个数</span></span><br><span class="line"><span class="comment">                        1.1 需要求和 -&gt;</span></span><br><span class="line"><span class="comment">                            a. 在循环外定义一个 int sum  = 0 用来接受和</span></span><br><span class="line"><span class="comment">                            b. 循环里面  sum += 要求的元素</span></span><br><span class="line"><span class="comment">                            c. 循环结束 sum 即为和</span></span><br><span class="line"><span class="comment">                        1.2</span></span><br><span class="line"><span class="comment">                            int avg = sum / arr.length;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    2. 遍历数组，统计大于平均值的元素的个数</span></span><br><span class="line"><span class="comment">                        2.1 统计</span></span><br><span class="line"><span class="comment">                            a. 需要在循环外定义一个int count = 0; 用来计数</span></span><br><span class="line"><span class="comment">                            b. 遍历数组，用每一个元素和 平均值比较，如果大于平均值 count++;</span></span><br><span class="line"><span class="comment">                            c. 循环结束 count即为符合条件的个数</span></span><br><span class="line"><span class="comment">                    3. 返回count</span></span><br><span class="line"><span class="comment">                    */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义 main 方法，方法内完成：</span></span><br><span class="line"><span class="comment">            1）.定义一个长度为 5 的 int 数组 arr</span></span><br><span class="line"><span class="comment">            2）.使用随机数生成 5 个范围为 1-99 的数字存入 arr 中（包含 1 和 99），之后打印数组</span></span><br><span class="line"><span class="comment">            3）. 调用 getScore(int[] arr)方法 ,传递 arr，获取方法返回值并在控制台打印输出该返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个长度为 5 的 int 数组 arr</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i] = r.nextInt(<span class="number">99</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> getScore(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;大于平均值的元素个数是:&quot;</span> + count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="comment">// a. 在循环外定义一个 int sum  = 0 用来接受和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// b. 循环里面  sum += 要求的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需要求出平均值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">avg</span> <span class="operator">=</span> sum / arr.length;</span><br><span class="line">    System.out.println(<span class="string">&quot;平均值是:&quot;</span> + avg);</span><br><span class="line">    <span class="comment">//  2. 遍历数组，统计大于平均值的元素的个数</span></span><br><span class="line">    <span class="comment">// a. 需要在循环外定义一个int count = 0; 用来计数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// b. 遍历数组，用每一个元素和 平均值比较，如果大于平均值 count++;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//如果大于平均值 count++;</span></span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; avg)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//c. 循环结束 count即为符合条件的个数</span></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>004-java基础语法之数组</title>
    <url>/2022/09/03/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/004-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、数组的定义"><a href="#1、数组的定义" class="headerlink" title="1、数组的定义"></a>1、数组的定义</h3><blockquote>
<p>数组的定义，实际上就是一次性定义多个变量<br>作用：用来存储【多个】相同数据类型的数据。<br>数组的格式：数据类型[]  数组名</p>
</blockquote>
<h3 id="2、数组的动态初始化"><a href="#2、数组的动态初始化" class="headerlink" title="2、数组的动态初始化"></a>2、数组的动态初始化</h3><blockquote>
<p>数组的动态初始化: 数据类型[] 数组名  &#x3D;  new 数据类型[长度];</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">动态初始化：  在创建数组时候，指定数组的长度，不指定元素。元素由系统默认赋值</span><br><span class="line">【</span><br><span class="line">整数-&gt; <span class="number">0</span></span><br><span class="line">小数 -&gt; <span class="number">0.0</span></span><br><span class="line">字符 -&gt; 码值为<span class="number">0</span></span><br><span class="line">布尔 -&gt; <span class="literal">false</span></span><br><span class="line">引用数据类型 -&gt; <span class="literal">null</span></span><br><span class="line">】</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//需求： 定义一个可以保存3个整数的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//数据类型[] 数组名  =  new 数据类型[长度];</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">    System.out.println(arr); <span class="comment">//[I@776ec8df</span></span><br><span class="line">    System.out.println(<span class="string">&quot;--------------练习---------------&quot;</span>);</span><br><span class="line">    <span class="comment">//定义一个可以保存5个小数的数组</span></span><br><span class="line">    <span class="comment">//定义一个可以保存3个字符串的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、数组元素的访问"><a href="#3、数组元素的访问" class="headerlink" title="3、数组元素的访问"></a>3、数组元素的访问</h3><blockquote>
<p>数组的元素：<br>(1)数组名[索引]  索引从0开始<br>(2)数组名[索引] 你可以理解为是一个特殊的变量名</p>
</blockquote>
<p><code>元素： 数组中定义的变量</code><br><code>索引【下标】： 给数组的元素进行空间的编号</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个可以保存3个整数的数组</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">    System.out.println(arr); <span class="comment">//内存地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问数组的第一个元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问数组的第二个元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问数组的第三个元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改元素的值</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">10</span>; <span class="comment">// 就是把10保存到索引为0的元素中</span></span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">20</span>; <span class="comment">// 就是把20保存到索引为1的元素中</span></span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">30</span>; <span class="comment">// 就是把30保存到索引为2的元素中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出修改之后的元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、数组静态初始化"><a href="#4、数组静态初始化" class="headerlink" title="4、数组静态初始化"></a>4、数组静态初始化</h3><blockquote>
<p>静态初始化 ： 在创建的数组的时候，指定数组的元素，长度由系统去计算</p>
</blockquote>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">完整格式：  数据类型<span class="comment">[]</span> 数组名 = new 数据类型<span class="comment">[]</span>&#123;元素, 元素,.....&#125;;</span><br><span class="line">简化格式：  数据类型<span class="comment">[]</span> 数组名 = &#123;元素, 元素,.....&#125;;  -&gt; 推荐使用</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//数据类型[] 数组名 = new 数据类型[]&#123;元素, 元素,.....&#125;;</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] arr2 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line">    System.out.println(arr2); <span class="comment">//[I@776ec8df</span></span><br><span class="line">    <span class="comment">//访问数组的第一个元素</span></span><br><span class="line">    System.out.println(arr2[<span class="number">0</span>]);<span class="comment">//11</span></span><br><span class="line">    <span class="comment">//访问数组的第二个元素</span></span><br><span class="line">    System.out.println(arr2[<span class="number">1</span>]);<span class="comment">//22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、数组内存"><a href="#5、数组内存" class="headerlink" title="5、数组内存"></a>5、数组内存</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">内存：</span><br><span class="line">    栈        方法运行的内存， 也包含局部变量</span><br><span class="line">    堆        <span class="keyword">new</span>出来的数据，而且有一个地址值</span><br><span class="line">    方法区     class文件加载进去的内存空间</span><br><span class="line">    本地方法栈</span><br><span class="line">    寄存器java</span><br></pre></td></tr></table></figure>

<p><strong>同一个内存，修改内存则一并修改</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        多个人 用的是同一个东西，那么只要有一个人改变，另外一个人看到也是被改变。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        多个数组指向同一个地址，任意一个数组对象去改变数组的里面的数据，另外</span></span><br><span class="line"><span class="comment">        一个数组看到的也是被改变的数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] arr2 = arr;</span><br><span class="line"></span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    System.out.println(arr2);</span><br><span class="line"></span><br><span class="line">    arr2[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); <span class="comment">//  100  11</span></span><br><span class="line">    System.out.println(arr2[<span class="number">0</span>]); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1000</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr2[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>数据类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型：</span><br><span class="line">    基本数据类型：</span><br><span class="line">    <span class="type">byte</span> <span class="type">short</span> <span class="type">char</span> <span class="type">int</span> <span class="type">long</span> <span class="type">float</span> <span class="type">double</span> <span class="type">boolean</span></span><br><span class="line"></span><br><span class="line">    引用数据类型：</span><br><span class="line">    数组，类，接口...</span><br><span class="line"></span><br><span class="line">    基本数据类型，变量名代表的就是具体的值</span><br><span class="line">    引用数据类型，变量名代表的是一个 内存地址 ，它没有具体的值，它用的是别人的。</span><br></pre></td></tr></table></figure>

<h3 id="6、数组常见问题"><a href="#6、数组常见问题" class="headerlink" title="6、数组常见问题"></a>6、数组常见问题</h3><blockquote>
<p>1.数组的越界异常(ArrayIndexOutOfBoundsException)<br>2.空指针异常(NullPointerException)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.数组的越界异常(ArrayIndexOutOfBoundsException)</span></span><br><span class="line"><span class="comment">            因为你访问的索引，超过当前数组的索引范围[0, 数组长度 -1]</span></span><br><span class="line"><span class="comment">        2.空指针异常(NullPointerException)</span></span><br><span class="line"><span class="comment">            如果当前的数组指向null，就不能继续访问了，强行访问就会报错</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">11</span> ,<span class="number">22</span> ,<span class="number">33</span>&#125;; <span class="comment">//3个  索引从0开始，最大的索引为2</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//System.out.println(arr[3]);</span></span><br><span class="line"></span><br><span class="line">    arr = <span class="literal">null</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、数组操作"><a href="#7、数组操作" class="headerlink" title="7、数组操作"></a>7、数组操作</h3><h5 id="7-1-数组遍历"><a href="#7-1-数组遍历" class="headerlink" title="7.1 数组遍历"></a>7.1 数组遍历</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        数组名.length 可以直接获取到当前数组的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="comment">//循环之前的遍历 ,可以获取每一个值，但是，数据量大的时候，这个方式就不可取了</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------使用循环的方式改进代码----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//用i来替代上面的索引</span></span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;arr的长度：&quot;</span> + arr.length);</span><br><span class="line">    <span class="comment">//数组遍历的快捷键</span></span><br><span class="line">    <span class="comment">//数组名.fori</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;------------反转------------&quot;</span>);</span><br><span class="line">    <span class="comment">//数组名.forr</span></span><br><span class="line">    <span class="comment">//因为索引是从0开始的，所以，数组的最大索引 为 数组.length - 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-2-数组求最大值"><a href="#7-2-数组求最大值" class="headerlink" title="7.2 数组求最大值"></a>7.2 数组求最大值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">66</span>, <span class="number">88</span>, <span class="number">77</span>, <span class="number">55</span>, <span class="number">99</span>, <span class="number">33</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个变量记录最大值</span></span><br><span class="line">    <span class="comment">//我们先用数组的第一个值，保存到max里面去</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//通过循环，遍历数组的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//如果当前的值，比我纸上(max)的值大，我们就把当前的值记录在纸上(max)</span></span><br><span class="line">        <span class="keyword">if</span>( arr[i] &gt; max)&#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-3-数组求和"><a href="#7-3-数组求和" class="headerlink" title="7.3 数组求和"></a>7.3 数组求和</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        数组求和，和平均值</span></span><br><span class="line"><span class="comment">            求和： 把数组的每一个元素相加</span></span><br><span class="line"><span class="comment">                    1. 循环外定义一个变量名 int sum = 0 ; 接收和</span></span><br><span class="line"><span class="comment">                    2. 把每个符合要求的数据相加 ;  sum += 数值；</span></span><br><span class="line"><span class="comment">            求平均值： 平均值 ：总和 / 总的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="comment">//定义一个变量用来保存和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//我们需要把5个数据相加，所以 我们需要获取到数组的每一个元素</span></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sum += arr[i];  <span class="comment">// sum = sum + arr[0] + arr[1] + arr[2] + arr[3] + arr[4];</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    <span class="type">int</span> <span class="variable">avg</span> <span class="operator">=</span> sum / arr.length;</span><br><span class="line">    System.out.println(avg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-4-键盘录入赋值给数组"><a href="#7-4-键盘录入赋值给数组" class="headerlink" title="7.4 键盘录入赋值给数组"></a>7.4 键盘录入赋值给数组</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        需求：键盘录入5个整数，然后把这些数据保存到数组中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            1. 我们需要创建一个动态数组用来保存元素【因为不知道当前元素的具体值】</span></span><br><span class="line"><span class="comment">            2. 创建键盘录入对象</span></span><br><span class="line"><span class="comment">            3. 需要遍历数组，然后键盘录入数据，保存到数组元素中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 我们需要创建一个动态数组用来保存元素【因为不知道当前元素的具体值】</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">// 2. 创建键盘录入对象</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">// 3. 需要遍历数组，然后键盘录入数据，保存到数组元素中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个元素&quot;</span>);</span><br><span class="line">        <span class="comment">// int number = sc.nextInt();</span></span><br><span class="line">        <span class="comment">// 把number 赋值 给数组的每一个元素</span></span><br><span class="line">        arr[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------当前数组的元素为:-----------&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-Arrays-工具类"><a href="#7-5-Arrays-工具类" class="headerlink" title="7.5 Arrays 工具类"></a>7.5 Arrays 工具类</h5><blockquote>
<p>Arrays类，这个是JDK给我们提供的一个可以操作数组的工具类<br>Arrays.sort(数组)  -&gt; 可以把数组的数据进行排序，从小到大排序<br>Arrays.toString(数组) -&gt; 可以把数组的内容拼接成一个字符串</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">33</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">55</span>, <span class="number">44</span>&#125;;</span><br><span class="line">    <span class="comment">//对数组元素进行排序</span></span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目前，我们都是通过循环的方式，打印数组的内容。 其实不方便</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//我们可以使用  Arrays.toString(数组) -&gt; 可以把数组的内容拼接成一个字符串</span></span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-6-综合练习"><a href="#7-6-综合练习" class="headerlink" title="7.6 综合练习"></a>7.6 综合练习</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        需求，定义可以保存5个元素的整数数组，使用随机数去给数组的元素进行赋值。</span></span><br><span class="line"><span class="comment">        赋值的范围为[10,20],最后，求出数组的最大值 和 最小值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            1. 创建一个长度为5的整数数组，而且使用 动态初始化</span></span><br><span class="line"><span class="comment">            2. 创建随机数对象</span></span><br><span class="line"><span class="comment">            3. 遍历数组，使用随机数去给数组的元素进行赋值。</span></span><br><span class="line"><span class="comment">                随机数范围是[10,20]，所以 求随机数的公式为  r.nextInt(20 - 10 + 1) + 10;</span></span><br><span class="line"><span class="comment">            4. 定义一个变量 max 记录最大值 , int max = arr[0];</span></span><br><span class="line"><span class="comment">            5. 遍历数组，获取数组的每一个元素跟 max 做比较， 如果当前元素大于max ，把当前元素保存到max中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            6. 定义一个变量 min 记录最小值， int min = arr[0];</span></span><br><span class="line"><span class="comment">            7. 遍历数组，获取数组的每一个元素 跟 min 做比较， 如果当前元素小于 min ,把当前元素保存到min中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 创建一个长度为5的整数数组，而且使用 动态初始化</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">//2. 创建随机数对象</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="comment">//3. 遍历数组，使用随机数去给数组的元素进行赋值。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i] = r.nextInt(<span class="number">11</span>) + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">    <span class="comment">// 4. 定义一个变量 max 记录最大值 , int max = arr[0];</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//获取数组的每一个元素跟 max 做比较， 如果当前元素大于max ，把当前元素保存到max中</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*    //  6. 定义一个变量 min 记录最小值， int min = arr[0];</span></span><br><span class="line"><span class="comment">        int min = arr[0];</span></span><br><span class="line"><span class="comment">        //遍历数组，获取数组的每一个元素 跟 min 做比较， 如果当前元素小于 min ,把当前元素保存到min中</span></span><br><span class="line"><span class="comment">        for (int i = 1; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            // 如果当前元素小于 min ,把当前元素保存到min中</span></span><br><span class="line"><span class="comment">            if (arr[i] &lt; min) &#123;</span></span><br><span class="line"><span class="comment">                min = arr[i];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;最大值为:&quot;</span> + max);</span><br><span class="line">    System.out.println(<span class="string">&quot;最小值为:&quot;</span> + min);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>003-Java基础语法之判断循环语句</title>
    <url>/2022/09/03/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/003-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>

<h3 id="1、if-语句"><a href="#1、if-语句" class="headerlink" title="1、if 语句"></a>1、if 语句</h3><blockquote>
<p>作用：用于判断</p>
</blockquote>
<h5 id="1-1-if-格式一"><a href="#1-1-if-格式一" class="headerlink" title="1.1 if 格式一"></a>1.1 if 格式一</h5><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line">格式<span class="number">1</span>：</span><br><span class="line"><span class="function"><span class="title">if</span>(布尔表达式)&#123;</span></span><br><span class="line"><span class="function">语句体;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">执行流程：   先执行布尔表达式，如果判断结果为<span class="variable"><span class="literal">true</span></span>，则执行语句体</span></span><br><span class="line"><span class="function">如果判断结果为<span class="variable"><span class="literal">false</span></span>，则不执行语句体，程序继续往后面走</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：  键盘输入一个年龄，判断有没有大于等于18，如果满足条件，则提示 网吧开黑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个年龄&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断有没有大于等于18</span></span><br><span class="line">    <span class="keyword">if</span>(age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;网吧开黑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;程序结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-if-else-格式二"><a href="#1-2-if-else-格式二" class="headerlink" title="1.2 if else 格式二"></a>1.2 if else 格式二</h5><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line">格式<span class="number">2</span>:</span><br><span class="line"><span class="function"><span class="title">if</span>(布尔表达式)&#123;</span></span><br><span class="line"><span class="function">语句体<span class="number">1</span>;</span></span><br><span class="line"><span class="function">&#125;<span class="variable"><span class="keyword">else</span></span>&#123;</span></span><br><span class="line"><span class="function">语句体<span class="number">2</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">执行流程：先执行布尔表达式，如果判断结果为<span class="variable"><span class="literal">true</span></span>，则执行语句体<span class="number">1</span></span></span><br><span class="line"><span class="function">如果判断不成立 就执行语句体<span class="number">2</span>;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：键盘录入两个整数，实现比较大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第一个整数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第二个整数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a的值比较大&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b的值比较大&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;程序结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-if-else-if-格式三"><a href="#1-3-if-else-if-格式三" class="headerlink" title="1.3 if else if() 格式三"></a>1.3 if else if() 格式三</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">格式<span class="number">3</span>：</span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="built_in">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="built_in">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;  ...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">执行流程 从上往下执行判断，如果判断为true，则执行对应的语句体，后面的不执行了。</span><br><span class="line">如果所有的判断都不满足，则执行 <span class="keyword">else</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*需求:</span></span><br><span class="line"><span class="comment">            程序从控制台接收一个百分制的分数, 判断这个分数，</span></span><br><span class="line"><span class="comment">            90分—100分：打印：优秀</span></span><br><span class="line"><span class="comment">            70 – 89分，打印：良好</span></span><br><span class="line"><span class="comment">            60 – 69分，打印：及格</span></span><br><span class="line"><span class="comment">            0 – 59分，打印：不及格</span></span><br><span class="line"><span class="comment">             其它情况，打印：输入的分数不正确！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个分数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="comment">//ctrl + alt + L</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">89</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">69</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">59</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的数据有误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、switch语句"><a href="#2、switch语句" class="headerlink" title="2、switch语句"></a>2、switch语句</h3><blockquote>
<p>作用：用于多种情况的选择</p>
</blockquote>
<h5 id="2-1-格式一"><a href="#2-1-格式一" class="headerlink" title="2.1 格式一"></a>2.1 格式一</h5><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>( 值 )&#123; <span class="type">byte</span> <span class="type">short</span> <span class="type">char</span> <span class="type">int</span> 枚举 字符串</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">语句体;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">语句体;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">所有的<span class="keyword">case</span>不匹配的时候，才执行的内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求： 键盘输入一个整数，输出对应的星期数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="keyword">switch</span> (week) &#123; <span class="comment">//byte short char int 枚举 String</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;星期天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据有误&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2格式二：case的穿透"><a href="#2-2格式二：case的穿透" class="headerlink" title="2.2格式二：case的穿透"></a>2.2格式二：case的穿透</h5><blockquote>
<p>作用：如果是多个case效果是相同的，我们就可以使用case的穿透来优化代码</p>
</blockquote>
<blockquote>
<p>现象：case后面没有break， 那么 就会继续执行下面case的内容。直到遇到break 或者 switch 整体结束，才会结束.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个月份&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123; <span class="comment">//break就是用来结束switch</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的月份有误&quot;</span>);</span><br><span class="line">            <span class="comment">//  break;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、for-循环"><a href="#3、for-循环" class="headerlink" title="3、for 循环"></a>3、for 循环</h3><blockquote>
<p>作用：重复执行某一段代码，也可以获取一个范围的数据</p>
</blockquote>
<h5 id="3-1-格式一"><a href="#3-1-格式一" class="headerlink" title="3.1 格式一"></a>3.1 格式一</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">for</span>(初始化语句 ①; 条件判断语句 ②; 条件控制语句 ③)&#123;</span><br><span class="line">循环体语句【需要重复执行的代码】 ④</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">① -&gt; ② -&gt; ④ -&gt; ③ -&gt; ②  -&gt; ④ -&gt; ③ .... -&gt; ②的判断为<span class="literal">false</span></span><br><span class="line">循环结束</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------循环改进------------------&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt;= <span class="number">100</span> ; i++)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动手敲，治百病&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-IDEA循环快捷键"><a href="#3-2-IDEA循环快捷键" class="headerlink" title="3.2 IDEA循环快捷键"></a>3.2 IDEA循环快捷键</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//数字.fori ---&gt;快捷键</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//数字.forr  -&gt; reverse反转快捷键</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-for-循环求和-以及统计"><a href="#3-3-for-循环求和-以及统计" class="headerlink" title="3.3 for 循环求和 以及统计"></a>3.3 for 循环求和 以及统计</h5><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">求和：</span><br><span class="line"><span class="number">1.</span>循环外定义 <span class="built_in">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line"><span class="number">2.</span>循环内部  <span class="keyword">sum</span> += 要求的数据</span><br><span class="line"><span class="number">3.</span>循环外就可以获取到和</span><br><span class="line">统计：</span><br><span class="line"><span class="number">1.</span>循环外定义 <span class="built_in">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="number">2.</span>循环内部  判断符合条件 则 <span class="keyword">count</span>++;</span><br><span class="line"><span class="number">3.</span>循环外 就可以得到统计的数量</span><br></pre></td></tr></table></figure>



<h3 id="4、while-循环语句"><a href="#4、while-循环语句" class="headerlink" title="4、while 循环语句"></a>4、while 循环语句</h3><h5 id="4-1-格式一"><a href="#4-1-格式一" class="headerlink" title="4.1 格式一"></a>4.1 格式一</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">初始化语句;  ①</span><br><span class="line"><span class="keyword">while</span>(条件判断语句 ②)&#123;</span><br><span class="line">循环体语句; ③</span><br><span class="line">条件控制语句; ④</span><br><span class="line">&#125;</span><br><span class="line">执行流程：</span><br><span class="line">① -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③  -&gt; ④ ....-&gt;直到②的判断结果</span><br><span class="line">为<span class="literal">false</span>，循环结束。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;for&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;while&quot;</span>);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-do-…while"><a href="#4-2-do-…while" class="headerlink" title="4.2 do …while"></a>4.2 do …while</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">初始化语句; ①</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">循环体语句;  ③</span><br><span class="line">条件控制语句; ④</span><br><span class="line">&#125; <span class="keyword">while</span>(条件判断语句); ②</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line">① -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③  -&gt; ④ .... 直到②的判断为<span class="literal">false</span> ，循环结束</span><br><span class="line">特点：第一次循环不执行判断语句，从第二次开始，才判断</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;for&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------do...while----------&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do...while&quot;</span>);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(j &lt;= <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、三种循环语句的区别"><a href="#5、三种循环语句的区别" class="headerlink" title="5、三种循环语句的区别"></a>5、三种循环语句的区别</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">目标，弄清楚三循环在执行上的区别</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">while</span> 都是先 判断 后执行</span><br><span class="line"><span class="function"><span class="title">do</span></span>...<span class="keyword">while</span> 先执行 后判断。</span><br><span class="line"></span><br><span class="line">应用场景上的区别：</span><br><span class="line">如果你是明确循环的次数，我们建议使用<span class="keyword">for</span></span><br><span class="line">如果你是不明确循环的次数，我们使用 <span class="keyword">while</span> [<span class="keyword">while</span>(true)&#123;&#125;]</span><br><span class="line"><span class="function"><span class="title">do</span></span>...<span class="keyword">while</span>();    一定要执行一次的时候，</span><br></pre></td></tr></table></figure>

<h5 id="5-1-死循环"><a href="#5-1-死循环" class="headerlink" title="5.1 死循环"></a>5.1 死循环</h5><blockquote>
<p><strong>while(true) {}  推荐使用</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/* for(;;)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;for-----&quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;while&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//要有一个已经注册的账号密码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">username</span> <span class="operator">=</span> <span class="number">123456</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">password</span> <span class="operator">=</span> <span class="number">9527</span>;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">//因为不知道什么时候才输入正确，所以，输入和比较的步骤需要循环，而且使用死循环</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//键盘输入账号和密码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入账号&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">user</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">pwd</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">//用已经注册的账号密码和输入的账号密码做比较</span></span><br><span class="line">        <span class="keyword">if</span> (username == user &amp;&amp; password == pwd) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">//成功之后退出死循环</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;账号或者密码有误，请重新输入&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-循环之break"><a href="#5-2-循环之break" class="headerlink" title="5.2 循环之break"></a>5.2 循环之break</h5><blockquote>
<p>break 用在循环中，【基于条件控制】，终止循环体内容的执行，也就是说结束当前的整个循环</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//需求，我想让i = 10的时候 停止</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-3-循环之continue"><a href="#5-3-循环之continue" class="headerlink" title="5.3 循环之continue"></a>5.3 循环之continue</h5><blockquote>
<p>continue 用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：我想跳过1-5所有的奇数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//continue; // 如果是奇数的时候我们就continue，跳过</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-4-循环嵌套"><a href="#5-4-循环嵌套" class="headerlink" title="5.4 循环嵌套"></a>5.4 循环嵌套</h5><blockquote>
<p>循环嵌套：循环语句里面放循环语句</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        输出 一天24个小时</span></span><br><span class="line"><span class="comment">            外部循环执行一次，内部循环执行一圈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> <span class="number">0</span>; hour &lt; <span class="number">24</span>; hour++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> <span class="number">0</span>; minute &lt; <span class="number">60</span>; minute++) &#123;</span><br><span class="line">            System.out.println(hour + <span class="string">&quot;时&quot;</span> + minute + <span class="string">&quot;分&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-、随机数Random"><a href="#6-、随机数Random" class="headerlink" title="6 、随机数Random"></a>6 、随机数Random</h3><blockquote>
<p>Random: 它是JDK给我们提供的一个可以实现生成随机数的类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        Random  它是JDK给我们提供的一个可以实现生成随机数的类</span></span><br><span class="line"><span class="comment">            使用步骤：</span></span><br><span class="line"><span class="comment">                    1.导包  在类上方写上  import java.util.Random;</span></span><br><span class="line"><span class="comment">                    2.创建对象  Random r = new Random();</span></span><br><span class="line"><span class="comment">                    3. 接收随机数   int a = r.nextInt(数字);</span></span><br><span class="line"><span class="comment">                        数字的含义： 1.指定生成随机数的范围[0, 数字-1];或[0,数字)</span></span><br><span class="line"><span class="comment">                                   2.这个范围的数字的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个循环主要是为了 多次生成随机数，让大家看到 生成范围就是[0,9]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>);<span class="comment">//[0,9]  -&gt; 10个</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：范围的选择</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        可以通过随机数，获取任意范围的数字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                [10,50] -&gt; 数字从10开始，到50 ，包含10和50</span></span><br><span class="line"><span class="comment">                50 - 10 + 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                [最小值, 最大值] -&gt;  int a =  r.nextInt(最大值 - 最小值 + 1 ) + 最小值;</span></span><br><span class="line"><span class="comment">                [66,99] -&gt;  r.nextInt( 34 ) + 66 ; [0,33] + 66  -&gt; [66,99]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="comment">//[10,50] -&gt; 数字从10开始，到50 ，包含10和50</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> r.nextInt(<span class="number">41</span>) + <span class="number">10</span> ; <span class="comment">//[0,40] + 10 -&gt; [10,50]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-1-综合练习"><a href="#6-1-综合练习" class="headerlink" title="6.1 综合练习"></a>6.1 综合练习</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标： 求和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            1. 我们要求和，就需要定义一个变量用来接受和 int sum = 0;</span></span><br><span class="line"><span class="comment">            2. 获取1-100之间的数字，循环可以获取一个范围的数据</span></span><br><span class="line"><span class="comment">            3. 获取的数字需要满足 即是3的倍数 又是5的倍数</span></span><br><span class="line"><span class="comment">            4. 满足要求再求和</span></span><br><span class="line"><span class="comment">            5. 输出结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 我们要求和，就需要定义一个变量用来接受和 int sum = 0;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 获取1-100之间的数字，循环可以获取一个范围的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 3. 获取的数字需要满足 即是3的倍数 又是5的倍数</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//4. 满足要求再求和</span></span><br><span class="line">            sum += i; <span class="comment">// 用sum本身的值 加上 所有符合条件的i的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5. 输出结果</span></span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>002-Java基础语法之逻辑运算</title>
    <url>/2022/09/03/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/002-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>



<h3 id="1、Scanner-键盘录入"><a href="#1、Scanner-键盘录入" class="headerlink" title="1、Scanner 键盘录入"></a>1、Scanner 键盘录入</h3><p>Scanner 键盘录入三部曲</p>
<blockquote>
<p>(1).导包 在类上面写	import java.util.Scanner;<br>(2).创建对象	Scanner sc &#x3D; new Scanner(System.in);<br>(3).接收数据<br>a.整数 int a &#x3D; sc.nextInt();<br>b.小数 double b &#x3D; sc.nextDouble();<br>c.字符串 String s &#x3D; sc.next();<br>d.没有nextChar()  没有nextString();</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2.创建键盘录入对象  我们在这一步得到一个扫描仪</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取键盘输入的数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();  <span class="comment">//扫描键盘输入整数</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、算数运算符"><a href="#2、算数运算符" class="headerlink" title="2、算数运算符"></a>2、算数运算符</h3><blockquote>
<p><strong>算数运算符:	+	 -	 * 	&#x2F; 	%[取余]</strong></p>
</blockquote>
<h5 id="2-1-普通算数运算符"><a href="#2-1-普通算数运算符" class="headerlink" title="2.1 普通算数运算符"></a>2.1 普通算数运算符</h5><p>规律：在Java里面，整数和整数相除，结果就是整数，要想得到小数，必须要有小数参与</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="number">10</span> + <span class="number">4</span>);<span class="comment">//14</span></span><br><span class="line">    System.out.println(<span class="number">10</span> - <span class="number">4</span>);<span class="comment">//6</span></span><br><span class="line">    System.out.println(<span class="number">10</span> * <span class="number">4</span>);<span class="comment">//40</span></span><br><span class="line">    System.out.println(<span class="number">10</span> / <span class="number">4</span>);<span class="comment">//2</span></span><br><span class="line">    System.out.println(<span class="number">10</span> % <span class="number">4</span>);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">    System.out.println( <span class="number">10</span> % <span class="number">3</span>); <span class="comment">//1</span></span><br><span class="line">    System.out.println(<span class="number">10</span> % <span class="number">18</span>);<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="number">10</span> / <span class="number">4.0</span>); <span class="comment">//2.5</span></span><br><span class="line">    System.out.println(<span class="number">10.0</span> / <span class="number">4</span>);<span class="comment">//2.5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-类型提升"><a href="#2-2-类型提升" class="headerlink" title="2.2 类型提升"></a>2.2 类型提升</h5><p>表达式类型提升问题：<br>(1) 如果一个表达式中，包含多个数据类型，表达式就会提升【自动类型提升】，提升的结果，就是表达式中最高的数据类型。<br>(2) 整数默认是int类型，所以，低于整数类型的类型[byte short char]，都会在运算的过程中，提升为int。【int[] arr1 &#x3D; {1,2,’a’};】这个也属于类型转换</p>
<blockquote>
<p>byte &lt; short &lt; int &lt; long &lt; float &lt; double<br>char &lt; int &lt; long &lt; float &lt; double</p>
</blockquote>
<p><strong>Java中，整数默认是int类型，浮点数默认是double类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">13.14</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> a + b + <span class="number">10</span> + <span class="number">13.14</span>;  <span class="comment">//计算机其实并不是那么智能，它在执行的时候，只能识别一种类型数据。而且一次性只能计算两个数值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">4</span> ;  <span class="comment">// int / int -&gt; int</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">4.0</span>; <span class="comment">// int / double -&gt; double</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">    <span class="type">byte</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cc</span> <span class="operator">=</span> aa + bb;</span><br><span class="line"></span><br><span class="line">    <span class="type">short</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">short</span> <span class="variable">ee</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ff</span> <span class="operator">=</span> dd + ee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、字符串-（加）操作"><a href="#3、字符串-（加）操作" class="headerlink" title="3、字符串 +（加）操作"></a>3、字符串 +（加）操作</h3><h5 id="3-1-字符的-运算"><a href="#3-1-字符的-运算" class="headerlink" title="3.1 字符的 + 运算"></a>3.1 字符的 + 运算</h5><p>原理： 拿这个字符在计算机底层对应的数值来运算【ASCII表】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cc</span> <span class="operator">=</span> ch + <span class="number">0</span>; <span class="comment">// int + int -&gt; int</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ch + 0 = 97  -&gt; &#x27;a&#x27; =&gt; 97</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(cc); <span class="comment">//97</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&#x27;0&#x27;</span> + <span class="number">0</span>);  <span class="comment">//48</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-字符串的拼接"><a href="#3-2-字符串的拼接" class="headerlink" title="3.2 字符串的拼接"></a>3.2 字符串的拼接</h5><p><strong>规律：串前运算，串后拼接。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;北京&quot;</span> + <span class="string">&quot;欢迎你&quot;</span>); <span class="comment">//&quot;北京欢迎你&quot;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;北京&quot;</span> + <span class="number">666</span>); <span class="comment">//&quot;北京666&quot;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;北京&quot;</span> + <span class="literal">true</span>); <span class="comment">//&quot;北京true&quot;</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;北京&quot;</span> + <span class="number">66</span> + <span class="number">6</span>); <span class="comment">//&quot;北京66&quot; + 6  -&gt; &quot;北京666&quot;</span></span><br><span class="line">    System.out.println(<span class="number">66</span> + <span class="number">6</span> + <span class="string">&quot;北京&quot;</span>);<span class="comment">//72 + &quot;北京&quot; -&gt; &quot;72北京&quot;</span></span><br><span class="line">    System.out.println(<span class="number">66</span> + <span class="number">6</span> + <span class="string">&quot;北京&quot;</span> + <span class="number">66</span> + <span class="number">6</span>);<span class="comment">//72北京666</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;a&quot;</span>); <span class="comment">//a</span></span><br><span class="line">    System.out.println(a);<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;a:&quot;</span> + a); <span class="comment">// a:10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、运算符"><a href="#4、运算符" class="headerlink" title="4、运算符"></a>4、运算符</h3><h5 id="4-1-赋值运算符："><a href="#4-1-赋值运算符：" class="headerlink" title="4.1 赋值运算符："></a>4.1 赋值运算符：</h5><blockquote>
<p>&#x3D;<br>+&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;</p>
</blockquote>
<p>(1) 拓展的赋值运算符执行流程：  用符号左边的变量 和 符号右边的数值进行运算符，再把结果赋值给左边的变量<br>(2) 特点： 拓展的赋值运算符，底层隐含了强制类型转换</p>
<h5 id="4-2-自增自减"><a href="#4-2-自增自减" class="headerlink" title="4.2 自增自减"></a>4.2 自增自减</h5><blockquote>
<p>特点：<br>自增：++  变量本身+1 ，单独运算的时候， 放在变量面前和后面 效果一样<br>自减：–  变量本身-1 ，单独运算的时候， 放在变量面前和后面 效果一样</p>
<p>参与操作：<br>a++ 先用后加<br>++a 先加后用<br>即使是打印字符里面出现a++,++a 都会参与算数运算。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   <span class="comment">//  a++; // 自增</span></span><br><span class="line">    ++a;</span><br><span class="line">    System.out.println(<span class="string">&quot;a = &quot;</span> + a); <span class="comment">//11</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//--b;</span></span><br><span class="line">    b--;</span><br><span class="line">    System.out.println(<span class="string">&quot;b = &quot;</span> + b); <span class="comment">//9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>面试题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        b = a;  10</span></span><br><span class="line"><span class="comment">        a++; 11</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;a = &quot;</span> + a);  <span class="comment">// 11</span></span><br><span class="line">    System.out.println(<span class="string">&quot;b = &quot;</span> + b);  <span class="comment">// 10</span></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> ++c;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ++c;   11</span></span><br><span class="line"><span class="comment">        d = c  11</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;c = &quot;</span> + c);<span class="comment">//11</span></span><br><span class="line">    System.out.println(<span class="string">&quot;d = &quot;</span> + d);<span class="comment">//11</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-3-关系运算符"><a href="#4-3-关系运算符" class="headerlink" title="4.3 关系运算符"></a>4.3 关系运算符</h5><blockquote>
<p>&#x3D;&#x3D;  !&#x3D;  &gt; &gt;&#x3D;  &lt; &lt;&#x3D;<br>关系运算符的运行结果是布尔类型</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="number">8</span> == <span class="number">8</span>); <span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="number">8</span> == <span class="number">7</span>); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//!=</span></span><br><span class="line">    System.out.println(<span class="number">8</span> != <span class="number">8</span>);<span class="comment">//false</span></span><br><span class="line">    System.out.println(<span class="number">8</span> != <span class="number">7</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="number">8</span> &gt; <span class="number">7</span>);<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="number">8</span> &lt; <span class="number">7</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="number">8</span> &gt;= <span class="number">7</span>);<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="number">8</span> &lt;= <span class="number">7</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-4-逻辑运算符"><a href="#4-4-逻辑运算符" class="headerlink" title="4.4 逻辑运算符"></a>4.4 逻辑运算符</h5><p>逻辑运算符：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">逻辑运算符：</span><br><span class="line">   作用：连接多个关系表达式</span><br><span class="line">   分类：</span><br><span class="line">      &amp;&amp;  多个条件需要同时满足。结论，有<span class="literal">false</span> 则 <span class="literal">false</span>， 短路效应： 如果左边为<span class="literal">false</span> 右边就不执行了</span><br><span class="line">      ||  多个条件只需要满足其中一个。 结论 有<span class="literal">true</span> 则<span class="literal">true</span> ，短路效应： 如果左边为<span class="literal">true</span>，右边就不执行了</span><br><span class="line">      !    取相反的结果</span><br></pre></td></tr></table></figure>

<p>逻辑运算的短路效应:</p>
<blockquote>
<p>&amp;&amp; :  有false 则 false， 如果 符号左边为false，右边就不执行了<br>|| :  有true 则 true，如果 符号的左边为true， 右边就不执行了<br>打印语句里的自增自减也是参与下列运算的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    System.out.println(a++ &gt; <span class="number">10</span> &amp;&amp; b++ &gt; <span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line">    <span class="comment">// a = 11</span></span><br><span class="line">    <span class="comment">// b = 20</span></span><br><span class="line">    System.out.println(a++ &gt; <span class="number">10</span> || b++ &gt; <span class="number">10</span>);<span class="comment">//true</span></span><br><span class="line">    System.out.println(!(a &gt; <span class="number">10</span>));<span class="comment">//false</span></span><br><span class="line">    System.out.println(a);<span class="comment">//12</span></span><br><span class="line">    System.out.println(b);<span class="comment">//20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-5-三元运算符"><a href="#4-5-三元运算符" class="headerlink" title="4.5 三元运算符"></a>4.5 三元运算符</h5><blockquote>
<p>格式：数据类型 变量名 &#x3D;  关系表达式 ?  表达式1 : 表达式2;<br>执行流程：<br>(1)先执行关系表达式，如果判断结果为true，则返回表达式1的结果。<br>                                          如果判断结果为false，则返回表达式2的结果。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第一个整数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第二个整数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a &gt; b ? a : b;</span><br><span class="line">    System.out.println(max);</span><br><span class="line">    <span class="comment">// System.out.println(a &gt; b ? a : b);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>001-Java基础概念</title>
    <url>/2022/09/03/java%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%8A%A0%E5%BC%BA/001-Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：JAVA基础与加强这个栏目是我之前很想做的，用于系统性总结归纳基础语法和概念。在这个系列里面要是有什么错误，还望大家在留言板指正出来！<strong>学习最好的方式就是教授别人 —费曼学习法</strong></p>
<span id="more"></span>

<h3 id="1、关键字"><a href="#1、关键字" class="headerlink" title="1、关键字"></a>1、关键字</h3><blockquote>
<p>关键字：被 java 语言赋予特殊含义的单词</p>
</blockquote>
<p><strong>关键字的特点：</strong><br>(1) 全部都是小写的字母<br>(2) 高亮显示</p>
<blockquote>
<p>public ：起到一个限制类名需要和文件名一致<br>class：它代表我们后面写的代码是属于类的，类是java 最小的单位<br>static：<br>void：<br>main：jave 识别程序入口</p>
</blockquote>
<p><strong>注意</strong>：main 这个是方法名不属于关键字，但是比关键字还要重要，因为java 程序只能识别这个入门。</p>
<h3 id="2、常量"><a href="#2、常量" class="headerlink" title="2、常量"></a>2、常量</h3><blockquote>
<p>常量概述：在程序中直接写出来的值，或者在程序中不可以发生改变的值</p>
</blockquote>
<h5 id="2-1-常量分类"><a href="#2-1-常量分类" class="headerlink" title="2.1 常量分类"></a>2.1 常量分类</h5><ol>
<li>字符串常量：即双引号括起来的内容。例如：”Hello World”</li>
<li>整数常量：包含整数和负数</li>
<li>小数常量：带有小数点的数字</li>
<li>字符常量：单引号括起来的单个内容 。例如：’我’ 、’0’ 、’A’；在数组里面[‘A’] 算自动类型转换</li>
<li>布尔常量：true【正确，成立】 false【错误，不成立】</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//字符串常量 双引号扩起来的内容  &quot;Hello World&quot;    &quot;欢迎来到广州&quot;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-------字符串常量-------&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;欢迎来到广州&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;aaa123&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;-------整数常量-------&quot;</span>);</span><br><span class="line">    System.out.println(<span class="number">5</span>);</span><br><span class="line">    System.out.println(-<span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;-------小数常量-------&quot;</span>);</span><br><span class="line">    System.out.println(<span class="number">5.0</span>);</span><br><span class="line">    System.out.println(<span class="number">5.21</span>);</span><br><span class="line">    System.out.println(-<span class="number">13.14</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;-------字符常量-------&quot;</span>);</span><br><span class="line">    <span class="comment">// 字符常量    单引号扩起来的单个内容  &#x27;我&#x27;  &#x27;0&#x27;  &#x27;A&#x27;</span></span><br><span class="line">    System.out.println(<span class="string">&#x27;我&#x27;</span>);</span><br><span class="line">    System.out.println(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    System.out.println(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">  <span class="comment">//  System.out.println(&#x27;10&#x27;); //java: 未结束的字符文字</span></span><br><span class="line">  <span class="comment">//  System.out.println(&#x27;&#x27;); //java: 空字符文字</span></span><br><span class="line">    System.out.println(<span class="string">&#x27; &#x27;</span>);<span class="comment">//可以放入一个空格</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-------布尔常量-------&quot;</span>);</span><br><span class="line">    System.out.println(<span class="literal">true</span>);</span><br><span class="line">    System.out.println(<span class="literal">false</span>);</span><br><span class="line">    System.out.println(<span class="number">8</span> &gt; <span class="number">7</span>); <span class="comment">// true</span></span><br><span class="line">    System.out.println(<span class="number">8</span> &lt; <span class="number">7</span>); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a>3、变量</h3><blockquote>
<p>变量概述：在程序中可以发生改变的值。作用：可以用来保持一个数据</p>
</blockquote>
<h5 id="3-1-定义变量名的格式"><a href="#3-1-定义变量名的格式" class="headerlink" title="3.1 定义变量名的格式"></a>3.1 定义变量名的格式</h5><p>数据类型	 变量名 &#x3D; 初始值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//例如我们的微信钱包，它的值就是会经常变化，所以，在程序中，我们需要定义一个变量，用来保存数据</span></span><br><span class="line">    <span class="comment">//一开始 我们的微信余额 假设是 0  钱是一个小数</span></span><br><span class="line">    <span class="comment">//小数 在程序中对应的数据类型 是 double  , 数据类型 变量名 = 初始值;</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    System.out.println(money);</span><br><span class="line">    <span class="comment">//假设我们抢红包，抢到 9.99 元</span></span><br><span class="line">    money = money + <span class="number">9.99</span>;</span><br><span class="line">    System.out.println(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-变量名（标识符）如何定义"><a href="#3-2-变量名（标识符）如何定义" class="headerlink" title="3.2 变量名（标识符）如何定义"></a>3.2 变量名（标识符）如何定义</h5><ol>
<li>由字母、数字、下划线_ 、美元符号$ 组成</li>
<li>第一个字符不能是数字</li>
<li>不能使用java 中的关键字作为标识符</li>
<li>标识符区分大小写</li>
<li>采用小驼峰命名法(即除第一个字母不大写外，其余字符首字母大写)</li>
<li>起名要见明知意（尽量使用英文)</li>
</ol>
<blockquote>
<p><strong>类名要采取大驼峰命名</strong></p>
</blockquote>
<h3 id="4、数据类型"><a href="#4、数据类型" class="headerlink" title="4、数据类型"></a>4、数据类型</h3><blockquote>
<p>数据类型的作用：用来规定保存的数据的类型</p>
</blockquote>
<h5 id="4-1-数据类型分类"><a href="#4-1-数据类型分类" class="headerlink" title="4.1 数据类型分类"></a>4.1 数据类型分类</h5><p><strong>(1)整型</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">byte</span>   	<span class="number">1</span>字节   	-<span class="number">128</span>~<span class="number">127</span></span><br><span class="line"><span class="attribute">short</span>  	<span class="number">2</span>字节  	-<span class="number">32768</span> ~  <span class="number">32767</span></span><br><span class="line"><span class="attribute">int</span>		<span class="number">4</span>字节		-<span class="number">2147483648</span>  ~  <span class="number">2147483647</span>  <span class="number">21</span>亿左右</span><br><span class="line"><span class="attribute">long</span>		<span class="number">8</span>字节		<span class="number">9223372036854775807</span> ~ -<span class="number">9223372036854775808</span>  <span class="number">19</span>位数</span><br></pre></td></tr></table></figure>

<p><strong>(2)浮点型</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">float</span>	<span class="number">4</span>字节		- <span class="number">1</span>.<span class="number">4</span>E-<span class="number">45</span>   ~ <span class="number">3</span>.<span class="number">4</span>E38    E38 代表 <span class="number">10</span>的<span class="number">38</span>次方   <span class="number">38</span>位数 </span><br><span class="line"><span class="attribute">double</span>	<span class="number">8</span>字节		- <span class="number">4</span>.<span class="number">9</span>E-<span class="number">324</span>  ~ <span class="number">1</span>.<span class="number">79</span>E308  <span class="number">308</span>位数</span><br></pre></td></tr></table></figure>

<p><strong>(3) 字符型</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">char</span>	<span class="number">2</span>字节			<span class="number">0</span> ~ <span class="number">65535</span></span><br></pre></td></tr></table></figure>

<p><strong>(4) 布尔型</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>ean	<span class="number">1</span>字节		ture、<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>数据类型的排序</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> &lt; <span class="type">short</span> &lt; <span class="type">int</span> &lt; <span class="type">long</span> &lt; <span class="type">float</span> &lt; <span class="type">double</span></span><br><span class="line"><span class="type">char</span> &lt; <span class="type">int</span> &lt; <span class="type">long</span> &lt; <span class="type">float</span> &lt; <span class="type">double</span></span><br><span class="line"></span><br><span class="line">Java中，整数默认是<span class="type">int</span>类型，浮点数默认是<span class="type">double</span>类型</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------整数----------&quot;</span>);</span><br><span class="line">    <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">short</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1234567890</span>;   <span class="comment">//如果是使用的是整数 默认使用int</span></span><br><span class="line">    <span class="comment">//定义long类型，如果超过了21亿，你需要加上一个L 【可以大写 也可以小写】</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">12345678900L</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------小数----------&quot;</span>);</span><br><span class="line">    <span class="comment">//定义float类型，你需要加上一个F 【可以大写 也可以小写】</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">13.14F</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">5.2</span>;  <span class="comment">//其实使用小数的时候 默认使用 double</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------字符----------&quot;</span>);</span><br><span class="line">    <span class="type">char</span> <span class="variable">g</span> <span class="operator">=</span> <span class="string">&#x27;我&#x27;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------布尔----------&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">h</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">i</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------字符串----------&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;欢迎来到广州&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5、数据类型转换"><a href="#5、数据类型转换" class="headerlink" title="5、数据类型转换"></a>5、数据类型转换</h3><blockquote>
<p>导语：计算机在运行的时候，实际上只能识别一种数据类型。所以计算机在做运算的时候，它会对数据做类型的转换。</p>
</blockquote>
<h5 id="5-1自动类型转换"><a href="#5-1自动类型转换" class="headerlink" title="5.1自动类型转换"></a>5.1自动类型转换</h5><p><strong>自动类型转换：即把小的数据类型自动转换为大的数据类型</strong></p>
<blockquote>
<p><strong>byte &lt; short &lt; char &lt; int &lt; long &lt; float &lt;double</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*	因为a是int类型</span></span><br><span class="line"><span class="comment">    b是double类型,</span></span><br><span class="line"><span class="comment">    计算机会把 int 先提升为double</span></span><br><span class="line"><span class="comment">    double + double -&gt; double*/</span></span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">13.14</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------举例子---------------&quot;</span>);</span><br><span class="line">        <span class="comment">//byte &lt;short &lt; char &lt;int &lt; long &lt; float  &lt; double</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">bb</span> <span class="operator">=</span> aa;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">dd</span> <span class="operator">=</span> cc;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-强制类型转换"><a href="#5-2-强制类型转换" class="headerlink" title="5.2 强制类型转换"></a>5.2 强制类型转换</h5><blockquote>
<p><strong>强制类型转换的格式: 目标数据类型 变量名 &#x3D; (目标数据类型) 值;</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        byte &lt;short &lt; char &lt;int &lt; long &lt; float  &lt; double</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            如果把大的数据，变成小的类型 -&gt; 强制类型转换</span></span><br><span class="line"><span class="comment">            强制类型转换的格式:</span></span><br><span class="line"><span class="comment">                    目标数据类型 变量名 = (目标数据类型) 值;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            因为强制类型转换，会导致精度的丢失。【很少用】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">13.14</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>)a;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java基础与加强</category>
      </categories>
  </entry>
  <entry>
    <title>转载李笑来《把时间当作朋友》后记</title>
    <url>/2022/08/31/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/002-%E8%BD%AC%E8%BD%BD%E6%9D%8E%E7%AC%91%E6%9D%A5%E3%80%8A%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E4%BD%9C%E6%9C%8B%E5%8F%8B%E3%80%8B%E5%90%8E%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在每周转载这个栏目里面，我打算收集一些自己曾经看过的文章，在博客这个平台分享给大家。每周转载这个栏目开设只是偶然性的，我觉得三千世界栏目更新过慢（要追求质量，还得有时间！），所以就萌发了每周转载这个栏目。</p>
<span id="more"></span>

<p>我一个退役运动员。</p>
<p>08 年开始看笑来老师的博客，两年时间里，我从几乎是零基础到 获得雅思 6.5 分，留学申请成功──今年 9 月去爱丁堡大学读研究生。身边的人都特别惊讶，问我这个没上过初中高中的人是怎么学习英语的。几天前，我请笑来老师吃饭，当面感谢他的时候，他也很惊讶，也很高兴。告诉我一定要把我学英语的过程，和我的一些感受写下来，供大家参考。所以就有了这篇文章。</p>
<p>我十岁进入省队，开始我的职业运动员生涯。别的孩子每天背着书包去上学，我和队友们每天 8 小时，一周 6 天，拿着拍子在球场上练球。6 年之后，因为我 自身的条件还有当时队里的环境，像许多运动员一样，我并没有取得太好的成绩。我选择退役，进入大学学习。我清楚地记得，当我做出这个选择的时候，当时我的 教练泼我冷水：“你以为学习就比训练容易吗，我保证你读一个星期就读不下去了。”</p>
<p>我当时心里也没底，毕竟这么多年没念书，基础差的不是一星半点，直接上大学能跟得上吗。但是比起继续训练，我更愿意换个环境重新开始，所以我报考了一所体育院校。</p>
<p>相比起运动队，大学简直是天堂，没有早操，没有教练的控制，当然田径场还是有的，不过再也没有人逼着跑长跑了。众所周知，体育类院校真正在学习的人 少之又少，像清华北大那些因为学习压力大而跳楼的人在我们学校是不存在的。人家学校每年都有 “自杀率”，我们学校每年是 “杀他率” 和 “被杀率”。我一边后 悔自己怎么没上个综合性大学，一边放任自己在这个环境里心安理得地享受着混吃等死的安逸日子。直到后来找工作写简历时，我才发现，本科的时光真的过得比我 的成绩单还要更空虚一些。当时真恨不得把三围也写进去，照片贴张 5 寸的，好让简历能凑够一页。</p>
<p>大四的时候，我跟很多人一样，把出国留学当成最后的救命稻草。报了新东方托福班，笑来老师当时是教写作。说实话，当时上课完全听不懂。现在想想，当 时想去考托福完全是异想天开。我上大学开始学英语，大学里的英语课只有四学期，大学的英语老师也假定你是有一定语法基础的，对我这种零基础的来说无异于天 书，所以当时考试基本靠小抄，成绩一直在及格线附近徘徊。这种程度，在半年之内想托福考到 90，不管上什么补习班，都是不可能的。结果可想而知，59 分的 托福成绩让最后一点希望也破灭了。我当时觉得自己这辈子肯定完了。没有什么文化知识，基础知识，数学、物理、化学、地理、历史统统没学过；唯一的技能只能 从事教练或者老师的工作，就业面非常窄。我怎么和那些从小上学的孩子在社会上竞争呢。哪个公司会要一个四肢发达、头脑简单的退役运动员呢。我开始埋怨父 母，当初为什么要送我去练球；我埋怨学校，为什么不给我提供一个好的学习环境；我埋怨自己，为什么当初不好好珍惜时间，恶补文化课知识。</p>
<p>那时候在笑来博客里看到一段话：</p>
<blockquote>
<p>缺乏耐心几乎是所有人的本性，也是绝大多数人最终未能矫正的习惯。很多人在生活的方方 面面都因为缺乏耐心而处处吃亏却又从不自知；处处吃亏的结果是越来越急于求成，越来越缺乏耐心——于是一生都只能在这个死循环中左冲右撞而后最终混个死因不详。</p>
</blockquote>
<p>这简直是我当时状态的最佳写照。我当时觉得我年龄还不大，还有时间再读个研究生，读完研究生以后就业时选择的面就宽多了，所以我想到了去英国读研。 但是留学考试是凭实力的，而我的外语这么差。所以我觉得我要想留学的话，一定要把外语提高上去，而且这次要吸取教训，不能再急功近利了。因此，我又跟父母 商量，要去留学。父母还是心存疑虑的，毕竟有前车之鉴，所以要求我必须先考过雅思再开始申请学校。我跟他们保证说，这次我一定会考过的，而且我要考 7 分， 上一所好的学校。我想以前这么训练这么累都坚持过来了，只要我有耐心坚持下去，一定能做到的。</p>
<p>我从剑桥中级英语语法开始，坚持做三遍，一来培养耐心，二来恶补语法。配合记录时间的习惯，每天记录下来我学习英语的时间。08 年七月开始，每天 2 个单元，用时大约 90 分钟。第二遍大约 60 分钟做完两个单元，第三遍的时候速度更快了，平均 30 分钟就能做完，另外用 30 分钟把例句读熟。我要求自己，不管再累在忙，每天一定要完成 2 个单元。 中间当然也有间断的时候，我就跟自己说，这是我最后的机会了，如果我放弃了，我又得重头开始了，我不能再重蹈覆辙了。为了给自己洗脑，我把很多笑来文章中 的句子，抄在本子上，每天早上读几遍。08 年 9 月我在新东方学习新概念二册。09 年 3 月初的时候总算把三遍剑桥中级语法，接着报了新概念三。09 年 5 月的 时候新三学完，我报了 6 月的雅思，想先裸考一次，看看自己现在到底什么水平。这中间的一个月时间，一边复习新三，一边用笑来的如何提高阅读速度那几篇文章里的方法读老托福的文章；用老托福 PART-C 的文章做跟读训练。刚开始的时候觉得这些方法实在是太慢了，太麻烦了，直到考前一共才看了 5 篇阅读，跟读练了 2 篇。6 月的雅思考试成绩并不理想，阅读 5.5，听力 6，口语 6.5,写作 5，总分 5.5。我当时的目标是考 7 分，5.5 离目标差得不 是一星半点。</p>
<p>我当时仔细回忆我当运动员的时候，我当时是怎么训练的，每项技术是怎么打磨的。我发现其实这些都和学英语有共通之处。每个技术动作的要领并不复杂， 教练教会基本动作之后剩下的就是大量的重复。在无数次的重复中，纠正错误动作，模仿优秀运动员的动作并结合自身的特点，最终形成自己的动作。同样，应用到 学习英语中。我已经掌握了基本的语法、基础的词汇和学习方法，那么剩下就是大量应用、练习了。最重要的是，清楚什么是自己能控制的，什么是不能控制的。比赛的时候，天气、场地、观众、对手还有结果这些都是属于不能控制 的事情，唯一能控制的就是自己。我是不是每一个动作都尽力做好了，我是不是按既定的战术执行了，我在累的时候有没有坚持住，这些是我能够控制的。同理，考 试的题目不是我能控制的，结果更不是我能控制的了，那么我还老想着我要考多少分，时刻关注机经模板除了浪费时间和让自己更焦虑之外没有任何用处。</p>
<p>想明白之后，就该干嘛干嘛了。</p>
<h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><ul>
<li>如何迅速提高阅读能力里的方法精读剑 4-7 的每一篇文章。</li>
<li>新托福 iBT 词汇分类突破 认真背了 3 遍。</li>
</ul>
<h3 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h3><ul>
<li>托福听说训练 练习了 20 多篇。</li>
<li>抄写基础词表：GSL 和 AWL，恶补拼 写。</li>
<li>剑 4-7 里的听力部分做了两遍。</li>
</ul>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><ul>
<li>TOEFL iBT 高分作文仿写、背诵经典的句子。</li>
<li>大作文写了不到二十篇，小作文 7 篇。</li>
<li>慎晓嶷 ‘七天’ 里的小作文每种图表背了个一篇。</li>
<li>‘如何准备留学考试系列’ 里的有力模式、立场选择等文章打印出来、认真读了 N 遍。</li>
</ul>
<h3 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h3><ul>
<li>第一部分，准备了九十多道真题，一个英语很好的朋友帮我写的。第二部分，准备了十个左右话题。第三部分，背了经典的句型若干。</li>
<li>对照<a href="http://www.uiowa.edu/~acadtech/phonetics/english/frameset.html">这个网站</a>对着镜子模仿口型和发音。每天半小时，1 个月时间。 其他</li>
<li>想明白系列，反复看了若干遍。</li>
</ul>
<p>考前没有报任何培训班。10 月的雅思成绩是，听力和阅读都考了 7，口语还是 6.5，写作 5.5，总分 6.5。虽然没考到理想的 7 分，但这个成绩也已 经够申请的标准了。我当时很激动，我证明了自己并不比那些从小一直学习的同学差。我的经历告诉我，首先一个人只要有坚定的信念，只要努力不怕苦，没有办不 成的事。有人总是强调别人的是个例，来宽恕自己的不努力。这个过程有多苦吗，有多难吗，我没觉得。可能这也得感谢我从小受的训练吧，忍耐枯燥的训练和服从 教练的指示。</p>
<p>其次，自信来自于能力，任何能力都是靠自己努力学习来的，是一个非常明显的从无到有的过程。我从英语零基础到考过雅思，自学能力一点点打磨出 来。这个凭能力产生的从无到有的过程，才是提高我自信的动机。在这个世界上除了你的本领和能力是真正属于你的，没有什么是能够与你共生的。这些才是产生自 信的真正动力。</p>
<p>最后，希望我的经历能够多多少少给那些真正想学好英语的同学一些帮助。</p>
<p>谢谢笑来老师，如果没有你这么无私的分享这些学习方法和人生感悟，我也不可能在这么短的时间内完成我的目标。</p>
<p>原文链接：<a href="https://github.com/xiaolai/everyone-can-use-english">https://github.com/xiaolai/everyone-can-use-english</a></p>
]]></content>
      <categories>
        <category>每周转载</category>
      </categories>
      <tags>
        <tag>每周转载</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化之ThreadLocal</title>
    <url>/2022/08/30/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/004-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BThreadLocal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p>
<span id="more"></span>

<p>ThreadLocal 并不是一个Thread，而是Thread的局部变量。ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。客户端发送的每次请求，后端的Tomcat服务器都会分配一个单独的线程来处理请求！</p>
<h6 id="ThreadLocal常用方法："><a href="#ThreadLocal常用方法：" class="headerlink" title="ThreadLocal常用方法："></a>ThreadLocal常用方法：</h6><table>
<thead>
<tr>
<th>方法</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>public void set(T value)</td>
<td>设置当前线程的线程局部变量的值</td>
</tr>
<tr>
<td>public T get()</td>
<td>返回当前线程所对应的线程局部变量的值</td>
</tr>
<tr>
<td>public void remove()</td>
<td>移除当前线程的线程局部变量</td>
</tr>
</tbody></table>
<h6 id="提供的BaseContext工具类来操作ThreadLocal"><a href="#提供的BaseContext工具类来操作ThreadLocal" class="headerlink" title="提供的BaseContext工具类来操作ThreadLocal"></a>提供的BaseContext工具类来操作ThreadLocal</h6><p><img src="https://img-blog.csdnimg.cn/e1aaa6121e63468d999a7988b645cf02.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：在员工管理页面，需要记录创建者的ID和修改者ID，这个时候就需要<strong>动态设置创建人和修改人</strong></p>
<p>图2：JWT拦截器设置当前登录员工的ThreadLocal  ID</p>
<p><img src="https://img-blog.csdnimg.cn/098469343cd2486385561c985892af81.png#pic_center" alt="在这里插入图片描述"></p>
<p>图3：在方法上获取当前登录员工的ThreadLocal  ID</p>
<p><img src="https://img-blog.csdnimg.cn/e08d7bcd3a7b44bca309047129d5864f.png#pic_center" alt="在这里插入图片描述"></p>
<p>线程本地变量是在JWt拦截器里面的，记得要注册拦截器让它生效。</p>
<h6 id="BaseContext工具类"><a href="#BaseContext工具类" class="headerlink" title="BaseContext工具类"></a>BaseContext工具类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册拦截器举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenAdminInterceptor jwtTokenAdminInterceptor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUserInterceptor jwtTokenUserInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器：&#123;&#125;&quot;</span>, jwtTokenAdminInterceptor);</span><br><span class="line">        registry.addInterceptor(jwtTokenAdminInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/admin/employee/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器：&#123;&#125;&quot;</span>, jwtTokenUserInterceptor);</span><br><span class="line">        registry.addInterceptor(jwtTokenUserInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/user/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>项目模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化之阿里云上传文件</title>
    <url>/2022/08/30/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/007-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p>
<span id="more"></span>

<h5 id="阿里云工具类"><a href="#阿里云工具类" class="headerlink" title="阿里云工具类"></a>阿里云工具类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] bytes, String objectName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建PutObject请求。</span></span><br><span class="line">            ossClient.putObject(bucketName, objectName, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                    + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件访问路径规则 https://BucketName.Endpoint/ObjectName</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;https://&quot;</span>);</span><br><span class="line">        stringBuilder</span><br><span class="line">                .append(bucketName)</span><br><span class="line">                .append(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">                .append(endpoint)</span><br><span class="line">                .append(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                .append(objectName);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;文件上传到:&#123;&#125;&quot;</span>, stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过Spring管理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aliOSSProperties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> AliOSSUtil <span class="title function_">aliOSSUtil</span><span class="params">(AliOSSProperties aliOSSProperties)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建阿里云OSS工具类...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AliOSSUtil</span>(</span><br><span class="line">                aliOSSProperties.getEndpoint(),</span><br><span class="line">                aliOSSProperties.getAccessKeyId(),</span><br><span class="line">                aliOSSProperties.getAccessKeySecret(),</span><br><span class="line">                aliOSSProperties.getBucketName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="通用方法控制器"><a href="#通用方法控制器" class="headerlink" title="通用方法控制器"></a>通用方法控制器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/common&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;通用接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOSSUtil aliOSSUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;文件上传&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        log.info(file.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将文件上传到阿里云</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + extension;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> aliOSSUtil.upload(file.getBytes(), fileName);</span><br><span class="line">            <span class="keyword">return</span> R.success(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;文件上传失败:&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error(MessageConstant.UPLOAD_FAILED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>BaseContext工具类</title>
    <url>/2022/08/30/%E5%B7%A5%E5%85%B7%E7%B1%BB/BaseContext%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《娱乐至死》里面两个著名的预言：奥威尔害怕的是真理被隐瞒，赫胥黎担心的是真理被淹没在无聊烦琐的世事中。在互联网的世界里，我们恰恰走向了赫胥黎式的预言，有时候百度两小时，有效资讯五分钟。在工具类这个栏目，我想收集一些常用的Utils，以免书到用时方恨少的尴尬！</p>
<span id="more"></span>

<p>提供的BaseContext工具类来操作ThreadLocal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>《挪威的森林》读后感</title>
    <url>/2022/08/30/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/005-%E3%80%8A%E6%8C%AA%E5%A8%81%E7%9A%84%E6%A3%AE%E6%9E%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>旁白</strong>：浮世三千，吾爱有三，日月与卿。日为朝，月为暮，卿为朝朝暮暮！</p>
<span id="more"></span>

<p>曾记得高中时期阅读过一次《挪威的森林》，也就顺便翻翻，我也没觉得这本书有什么魅力。时隔五年之后，再重新看这本书，又有了不一样的感觉。</p>
<p>刚看完这本书的时候总有些说不清道不明的感觉，直到我偶然直接看电影解说才猛然想起这种情绪的来源。《挪威的森林》就如同中国武侠电影里的江湖那般，大漠孤烟长河落日，侠骨柔情忠肝义胆。又像美国西部片那样，黄沙漫漫，牛仔悍匪，惩恶扬善。挪威的森林就是一个时代的符号。</p>
<p>村上春树用独特的手法送别了一个名为’青春’的时代。这是一本自我成长的书籍，当你读完这本书合上去的时候，仿佛背面显示出’青春奇妙物语全剧终’的画面感。看懂了这本书，青春也就结束了！</p>
<p>这本书具有划时代意义，能与中国武侠的江湖，和美国西部片的世界相提并论。青春的话题永不过时，这才是这么多人追来看原因!</p>
<p>摘录：</p>
<p><strong>名场面1：渡边的甜言蜜语</strong></p>
<blockquote>
<p>“最最喜欢你，绿子。”</p>
<p>“什么程度？”</p>
<p>“像喜欢春天的熊一样。”</p>
<p>“春天的熊？”绿子再次扬起脸，“什么春天的熊？”</p>
<p>“春天的原野里，你一个人正走着，对面走来一只可爱的小熊，浑身的毛活像天鹅绒，眼睛圆鼓鼓的。</p>
<p>它对你说道：’你好，小姐，和我一块儿打滚玩好吗？’接着，你就和小熊抱在一起，顺着长满三叶草的山坡‘咕噜咕噜’滚下去，玩了整整一天。你说棒不棒？”</p>
<p>“太棒了。”</p>
<p>“我就这么喜欢你。”</p>
</blockquote>
<p><strong>名场面2：绿子不可理喻的爱</strong></p>
<blockquote>
<p>绿子说：<br>“我所追求的，只是容忍我任性，百分之百的任性。比方说，我现在对你说想吃酥饼，你就什么都不顾得跑去买，气喘吁吁得跑回来递给我，说‘给，绿子，这就是酥饼。’可我却说：‘我又懒得吃这玩意儿了！’说着‘呼’地一声从窗口扔出。这就是我所追求的。”</p>
<p>“这和爱似乎不大相合啊！” 他不无愕然地说。<br>“相干！你不知道罢了，”绿子说，“对女孩子来说，这东西有时非常非常珍贵。”<br>“就是把酥饼扔出窗口？”<br>“是啊。我希望对方这样说：‘明白了，绿子。怪我不好，我本该估计到你又不想吃酥饼才是。我简直像驴粪蛋儿一样愚蠢透顶，为了表示歉意，让我再去给你买点别什么。什么好？巧克力饼干，还是奶酪饼？”<br>“然后怎样呢？”<br>“那我就好好爱他，报答他。”</p>
</blockquote>
<p><strong>巴黎评论对村上春树采访</strong>：</p>
<blockquote>
<p>《巴黎评论》：我总是更同情有幽默感的女孩。我想读者更容易接受充满幽默的恋情，想要让他们被严肃的爱情描写所打动则是一件难事。在《挪威的森林》里我从头到尾一直喜欢绿子这个角色。</p>
<p>村上：我想大多数读者应该和你的感受相同，他们也都会选择绿子，当然小说的主人公最后也选择了绿子。然而，他有一部分自我一直处于另外一个世界，他无法抛弃那个世界，那是他的一部分、一个重要的部分。世上所有人的头脑中都有病态的部分，这块地方是人的组成部分之一。我们有理智的一半，也有疯狂的一半，我们在这两部分之间进行协调——我坚信这点。当我写作的时候我可以特别清晰地感觉到我意识中那个疯狂的部分——“疯狂”并不是最恰当的字眼，应该说“不平常的”、“不真实的”。当然，我最终必须回到真实的世界中来，重新恢复健全的意志。可是如果我没有疯狂、病态的那部分，我就不会是今天的我。换句话说，我的小说的主人公是有两个女人作为后盾的，对他来说，这两个缺一不可。《挪威的森林》是个典型的例子。</p>
</blockquote>
]]></content>
      <categories>
        <category>三千世界</category>
      </categories>
      <tags>
        <tag>读书心得</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级之总结</title>
    <url>/2022/08/29/SQL%E8%AF%AD%E5%8F%A5/009-MySQL%E9%AB%98%E7%BA%A7%E4%B9%8B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p>
<span id="more"></span>

<h5 id="1、能够使用SQL语句添加主键、外键、唯一、非空约束"><a href="#1、能够使用SQL语句添加主键、外键、唯一、非空约束" class="headerlink" title="1、能够使用SQL语句添加主键、外键、唯一、非空约束"></a>1、能够使用SQL语句添加主键、外键、唯一、非空约束</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">主键约束: <span class="keyword">PRIMARY</span> KEY</span><br><span class="line">唯一约束: <span class="keyword">UNIQUE</span></span><br><span class="line">非空约束: <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">默认值约束: <span class="keyword">DEFAULT</span> 值</span><br><span class="line">外键约束: <span class="keyword">CONSTRAINT</span> 外键约束名 <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主键)</span><br></pre></td></tr></table></figure>

<h5 id="2、能够说出多表之间的三种关系"><a href="#2、能够说出多表之间的三种关系" class="headerlink" title="2、能够说出多表之间的三种关系"></a>2、能够说出多表之间的三种关系</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">一对多</span><br><span class="line">多对多</span><br><span class="line">一对一</span><br></pre></td></tr></table></figure>

<h5 id="3、能够使用内连接进行多表查询"><a href="#3、能够使用内连接进行多表查询" class="headerlink" title="3、能够使用内连接进行多表查询"></a>3、能够使用内连接进行多表查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">显示内连接:</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 表连接条件;</span><br></pre></td></tr></table></figure>

<h5 id="4、能够使用左外连接和右外连接进行多表查询"><a href="#4、能够使用左外连接和右外连接进行多表查询" class="headerlink" title="4、能够使用左外连接和右外连接进行多表查询"></a>4、能够使用左外连接和右外连接进行多表查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">左外连接: 左表不满足的也显示,	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 表连接条件;</span><br><span class="line">	右外连接: 右表不满足的也显示,	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 表连接条件;</span><br></pre></td></tr></table></figure>

<h5 id="5、能够使用子查询"><a href="#5、能够使用子查询" class="headerlink" title="5、能够使用子查询"></a>5、能够使用子查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">一条查询语句的结果作为另一个条查询语句的一部分</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件<span class="operator">=</span>(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(字段名) <span class="keyword">FROM</span> 表名);</span><br></pre></td></tr></table></figure>

<h5 id="6、能够理解多表查询的规律"><a href="#6、能够理解多表查询的规律" class="headerlink" title="6、能够理解多表查询的规律"></a>6、能够理解多表查询的规律</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.根据需求明确查询哪些表</span><br><span class="line">2.明确表连接条件,去掉笛卡尔积</span><br><span class="line">3.后续的查询</span><br></pre></td></tr></table></figure>

<h5 id="7、能够理解事务的概念"><a href="#7、能够理解事务的概念" class="headerlink" title="7、能够理解事务的概念"></a>7、能够理解事务的概念</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">数据库事务是一种机制, 事务中包含多条<span class="keyword">SQL</span>语句, 事务中的多条<span class="keyword">SQL</span>语句要么全部成功,要么全部失败<span class="operator">!</span></span><br></pre></td></tr></table></figure>

<p>8、能够在MySQL中使用事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">开启事务: <span class="keyword">BEGIN</span>; 或 <span class="keyword">START</span> TRANSACTION;</span><br><span class="line">提交事务: <span class="keyword">COMMIT</span>;</span><br><span class="line">回滚事务: <span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级之事务</title>
    <url>/2022/08/29/SQL%E8%AF%AD%E5%8F%A5/008-MySQL%E9%AB%98%E7%BA%A7%E4%B9%8B%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p>
<span id="more"></span>

<h5 id="1、需求"><a href="#1、需求" class="headerlink" title="1、需求"></a>1、需求<img src="https://img-blog.csdnimg.cn/538fbb006e304506a4077e0fe3e05d40.png#pic_center" alt="在这里插入图片描述"></h5><h5 id="2、环境搭建"><a href="#2、环境搭建" class="headerlink" title="2、环境搭建"></a>2、环境搭建</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建账户表,包含 id, name, balance</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account (</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	balance <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">1000</span>),</span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h5 id="默认自动开启事务"><a href="#默认自动开启事务" class="headerlink" title="默认自动开启事务"></a>默认自动开启事务</h5><p>在DOS 命令下输入 <code>select @@autocommit;</code>  查看是否开启自动提交事务<br>一般是默认提交<br><img src="https://img-blog.csdnimg.cn/09211cebbf1e494d9a518367056027b5.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>手动提交SQL语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/3fdd3dfbe2ab49648039ce1164bae8b6.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="设置不开启事务"><a href="#设置不开启事务" class="headerlink" title="设置不开启事务"></a><strong>设置不开启事务</strong></h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/1bf78b91435f45b8bbbcf9f42af5a9c2.png#pic_center" alt="在这里插入图片描述"></p>
<p>再来执行上面的修改语句,发现毫无反应<br><img src="https://img-blog.csdnimg.cn/561a529805f74f57a1cee0abbc31ffd9.png#pic_center" alt="在这里插入图片描述"></p>
<p>在继续执行<code>commit;</code>命令之后，才修改数据成功<br><img src="https://img-blog.csdnimg.cn/94d77b78c3a1439395afcf54ddf8ad0b.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>温馨提示：</strong>回滚用<code>rollback;</code></p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级之多表查询</title>
    <url>/2022/08/29/SQL%E8%AF%AD%E5%8F%A5/007-MySQL%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p>
<span id="more"></span>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>创建部门表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_dept (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_dept (NAME) <span class="keyword">VALUES</span> (<span class="string">&#x27;开发部&#x27;</span>),(<span class="string">&#x27;市场部&#x27;</span>),(<span class="string">&#x27;财务部&#x27;</span>),(<span class="string">&#x27;销售部&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>创建员工表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_emp (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  gender <span class="type">CHAR</span>(<span class="number">1</span>),   <span class="comment">-- 性别</span></span><br><span class="line">  salary <span class="keyword">DOUBLE</span>,   <span class="comment">-- 工资</span></span><br><span class="line">  join_date <span class="type">DATE</span>,  <span class="comment">-- 入职日期</span></span><br><span class="line">  dept_id <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp(NAME,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">7200</span>,<span class="string">&#x27;2013-02-24&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp(NAME,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">3600</span>,<span class="string">&#x27;2010-12-02&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp(NAME,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">9000</span>,<span class="string">&#x27;2008-08-08&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp(NAME,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;白骨精&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">5000</span>,<span class="string">&#x27;2015-10-07&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp(NAME,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;蜘蛛精&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">4500</span>,<span class="string">&#x27;2011-03-14&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;白龙马&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2020-02-02&#x27;</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1、隐式内连接"><a href="#1、隐式内连接" class="headerlink" title="1、隐式内连接"></a>1、隐式内连接</h3><p>– 一次查询多张表<br>– 左表的每条数据和右表的每条数据组合，这种效果称为笛卡尔乘积。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp, tb_dept;</span><br></pre></td></tr></table></figure>

<p>– 去掉笛卡尔积<br>– 去掉笛卡尔积的条件称为: 表连接条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp, tb_dept <span class="keyword">WHERE</span> tb_emp.`dept_id`<span class="operator">=</span>tb_dept.`id`;</span><br></pre></td></tr></table></figure>

<p>– 扩展:给表取别名,表取了别名后,只能使用别名啦!<br>– 在加上查询员工名字为孙悟空</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp <span class="keyword">AS</span> e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tb_dept <span class="keyword">AS</span> d <span class="keyword">ON</span> e.`dept_id`<span class="operator">=</span>d.`id` <span class="keyword">WHERE</span> e.name<span class="operator">=</span><span class="string">&#x27;孙悟空&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2、显式内连接"><a href="#2、显式内连接" class="headerlink" title="2、显式内连接"></a>2、显式内连接</h3><p>– 显式内连接 INNER JOIN…ON</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tb_dept <span class="keyword">ON</span> tb_emp.`dept_id`<span class="operator">=</span>tb_dept.`id`;</span><br></pre></td></tr></table></figure>

<h3 id="3、左外连接查询"><a href="#3、左外连接查询" class="headerlink" title="3、左外连接查询"></a>3、左外连接查询</h3><p>– 左外连接查询 (满足要求的显示,保证左表不满足要求的也显示)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> tb_dept <span class="keyword">ON</span> tb_emp.`dept_id`<span class="operator">=</span>tb_dept.`id`</span><br></pre></td></tr></table></figure>

<h3 id="4、右外连接"><a href="#4、右外连接" class="headerlink" title="4、右外连接"></a>4、右外连接</h3><p>– 右外连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> tb_dept <span class="keyword">ON</span> tb_emp.`dept_id`<span class="operator">=</span>tb_dept.`id`;</span><br></pre></td></tr></table></figure>

<p>– 一般在工作中我们都使用左外, 右外可以转成左外, 我们中国人的书写顺序,从左到右</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_dept <span class="keyword">left</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> tb_emp <span class="keyword">ON</span> tb_emp.`dept_id`<span class="operator">=</span>tb_dept.`id`;</span><br></pre></td></tr></table></figure>

<h3 id="5、子查询结果"><a href="#5、子查询结果" class="headerlink" title="5、子查询结果"></a>5、子查询结果</h3><h5 id="子查询的结果是单行单列"><a href="#子查询的结果是单行单列" class="headerlink" title="子查询的结果是单行单列"></a>子查询的结果是单行单列</h5><p><strong>查询工资最高的员工是谁？</strong><br>– (1).查询最高工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> tb_emp;</span><br></pre></td></tr></table></figure>

<p>– (2).通过最高工资查询员工姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp <span class="keyword">WHERE</span> salary<span class="operator">=</span>(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> tb_emp);</span><br></pre></td></tr></table></figure>

<p><strong>温馨提示：</strong>子查询心得:建议先写好一条SQL,再复制到另一个SQL语句中</p>
<h5 id="子查询的结果是多行单列"><a href="#子查询的结果是多行单列" class="headerlink" title="子查询的结果是多行单列"></a>子查询的结果是多行单列</h5><p><strong>查询工资大于5000的员工, 来自于哪些部门的名字</strong><br>– (1).查询工资大于5000的员工的部门id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> tb_emp <span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">5000</span>;</span><br></pre></td></tr></table></figure>

<p>– (2).根据部门id查询部门名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_dept <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> tb_emp <span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<h5 id="子查询的结果是多行多列"><a href="#子查询的结果是多行多列" class="headerlink" title="子查询的结果是多行多列"></a>子查询的结果是多行多列</h5><p>– 查询出2011年以后入职的员工信息, 包括部门名称<br>– (1).查询出2011年以后入职的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp <span class="keyword">WHERE</span> join_date<span class="operator">&gt;</span><span class="string">&#x27;2011-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>– (2).连接部门表,查询部门信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp <span class="keyword">WHERE</span> join_date<span class="operator">&gt;</span><span class="string">&#x27;2011-01-01&#x27;</span>) <span class="keyword">AS</span> e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> tb_dept <span class="keyword">ON</span> e.dept_id<span class="operator">=</span>tb_dept.id;</span><br></pre></td></tr></table></figure>

<h3 id="6、多表查询"><a href="#6、多表查询" class="headerlink" title="6、多表查询"></a>6、多表查询</h3><h5 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 部门id</span></span><br><span class="line">  dname <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 部门名称</span></span><br><span class="line">  loc <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 部门位置</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加4个部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(id,dname,loc) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;教研部&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">(<span class="number">20</span>,<span class="string">&#x27;学工部&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>),</span><br><span class="line">(<span class="number">30</span>,<span class="string">&#x27;销售部&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>),</span><br><span class="line">(<span class="number">40</span>,<span class="string">&#x27;财务部&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 职务表, 职务名称, 职务描述</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> job (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  jname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">  description <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加4个职务</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job (id, jname, description) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;董事长&#x27;</span>, <span class="string">&#x27;管理整个公司, 接单&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;经理&#x27;</span>, <span class="string">&#x27;管理部门员工&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;销售员&#x27;</span>, <span class="string">&#x27;向客人推销产品&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;文员&#x27;</span>, <span class="string">&#x27;使用办公软件&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 员工id</span></span><br><span class="line">  ename <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 员工姓名</span></span><br><span class="line">  job_id <span class="type">INT</span>, <span class="comment">-- 职务id</span></span><br><span class="line">  mgr <span class="type">INT</span> , <span class="comment">-- 上级领导</span></span><br><span class="line">  joindate <span class="type">DATE</span>, <span class="comment">-- 入职日期</span></span><br><span class="line">  salary <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>), <span class="comment">-- 工资</span></span><br><span class="line">  bonus <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>), <span class="comment">-- 奖金</span></span><br><span class="line">  dept_id <span class="type">INT</span>, <span class="comment">-- 所在部门编号</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> emp_jobid_ref_job_id_fk <span class="keyword">FOREIGN</span> KEY (job_id) <span class="keyword">REFERENCES</span> job (id),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> emp_deptid_ref_dept_id_fk <span class="keyword">FOREIGN</span> KEY (dept_id) <span class="keyword">REFERENCES</span> dept (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加员工</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1001</span>,<span class="string">&#x27;孙悟空&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2000-12-17&#x27;</span>,<span class="string">&#x27;8000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1002</span>,<span class="string">&#x27;卢俊义&#x27;</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-02-20&#x27;</span>,<span class="string">&#x27;16000.00&#x27;</span>,<span class="string">&#x27;3000.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1003</span>,<span class="string">&#x27;林冲&#x27;</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-02-22&#x27;</span>,<span class="string">&#x27;12500.00&#x27;</span>,<span class="string">&#x27;5000.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1004</span>,<span class="string">&#x27;唐僧&#x27;</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">&#x27;2001-04-02&#x27;</span>,<span class="string">&#x27;29750.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1005</span>,<span class="string">&#x27;李逵&#x27;</span>,<span class="number">4</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-09-28&#x27;</span>,<span class="string">&#x27;12500.00&#x27;</span>,<span class="string">&#x27;14000.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1006</span>,<span class="string">&#x27;宋江&#x27;</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">&#x27;2001-05-01&#x27;</span>,<span class="string">&#x27;28500.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1007</span>,<span class="string">&#x27;刘备&#x27;</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">&#x27;2001-09-01&#x27;</span>,<span class="string">&#x27;24500.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">1008</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2007-04-19&#x27;</span>,<span class="string">&#x27;30000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1009</span>,<span class="string">&#x27;罗贯中&#x27;</span>,<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;2001-11-17&#x27;</span>,<span class="string">&#x27;50000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">1010</span>,<span class="string">&#x27;吴用&#x27;</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-09-08&#x27;</span>,<span class="string">&#x27;15000.00&#x27;</span>,<span class="string">&#x27;0.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1011</span>,<span class="string">&#x27;沙僧&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2007-05-23&#x27;</span>,<span class="string">&#x27;11000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1012</span>,<span class="string">&#x27;李逵&#x27;</span>,<span class="number">4</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-12-03&#x27;</span>,<span class="string">&#x27;9500.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1013</span>,<span class="string">&#x27;小白龙&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2001-12-03&#x27;</span>,<span class="string">&#x27;30000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1014</span>,<span class="string">&#x27;关羽&#x27;</span>,<span class="number">4</span>,<span class="number">1007</span>,<span class="string">&#x27;2002-01-23&#x27;</span>,<span class="string">&#x27;13000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 工资等级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> salarygrade (</span><br><span class="line">  grade <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  losalary <span class="type">INT</span>,</span><br><span class="line">  hisalary <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加5个工资等级</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salarygrade(grade,losalary,hisalary) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="number">7000</span>,<span class="number">12000</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">12010</span>,<span class="number">14000</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">14010</span>,<span class="number">20000</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="number">20010</span>,<span class="number">30000</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="number">30010</span>,<span class="number">99990</span>);</span><br></pre></td></tr></table></figure>

<h5 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h5><p><strong>查询所有员工信息。显示员工编号, 员工姓名, 工资, 职务名称, 职务描述</strong><br>– 1.根据需求明确查询哪些表: emp, job</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job;</span><br></pre></td></tr></table></figure>

<p>– 2.明确表连接条件去掉笛卡尔积</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.`job_id`<span class="operator">=</span>job.`id`;</span><br></pre></td></tr></table></figure>

<p>– 3.后续的查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	emp.id <span class="keyword">AS</span> 员工编号, </span><br><span class="line">	emp.`ename` <span class="keyword">AS</span> 员工姓名,</span><br><span class="line">	emp.`salary` <span class="keyword">AS</span> 工资,</span><br><span class="line">	job.`jname` <span class="keyword">AS</span> 职务名称,</span><br><span class="line">	job.`description` <span class="keyword">AS</span> 职务描述</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.`job_id`<span class="operator">=</span>job.`id`;</span><br></pre></td></tr></table></figure>

<h5 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h5><p><strong>查询所有员工信息。显示员工编号, 员工姓名, 工资, 职务名称, 职务描述, 部门名称, 部门位置</strong><br>– 1.根据需求明确查询哪些表: emp, job, dept</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept;</span><br></pre></td></tr></table></figure>

<p>– 2.明确表连接条件去掉笛卡尔积</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.`job_id`<span class="operator">=</span>job.`id` <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.`dept_id`<span class="operator">=</span>dept.`id`;</span><br></pre></td></tr></table></figure>

<p>– 3.后续的查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	emp.`id` 员工编号,</span><br><span class="line">	emp.`ename` 员工姓名,</span><br><span class="line">	emp.`salary` 工资,</span><br><span class="line">	job.`jname` 职务名称,</span><br><span class="line">	job.`description` 职务描述,</span><br><span class="line">	dept.`dname` 部门名称,</span><br><span class="line">	dept.`loc` 部门位置</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.`job_id`<span class="operator">=</span>job.`id` </span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.`dept_id`<span class="operator">=</span>dept.`id`;</span><br></pre></td></tr></table></figure>

<h5 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h5><p><strong>查询经理的信息。显示员工姓名, 工资, 职务名称, 职务描述, 部门名称, 部门位置, 工资等级</strong><br>– 1.根据需求明确查询哪些表: emp, job, dept, salarygrade</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salarygrade;</span><br></pre></td></tr></table></figure>

<p>– 2.明确表连接条件去掉笛卡尔积</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.`job_id`<span class="operator">=</span>job.`id`</span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.`dept_id`<span class="operator">=</span>dept.`id`</span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> salarygrade <span class="keyword">ON</span> emp.`salary` <span class="keyword">BETWEEN</span> salarygrade.`losalary` <span class="keyword">AND</span> salarygrade.`hisalary`;</span><br></pre></td></tr></table></figure>

<p>– 3.后续的查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	emp.`ename` 员工姓名,</span><br><span class="line">	emp.`salary` 工资,</span><br><span class="line">	job.`jname` 职务名称,</span><br><span class="line">	job.`description` 职务描述,</span><br><span class="line">	dept.`dname` 部门名称,</span><br><span class="line">	dept.`loc` 部门位置,</span><br><span class="line">	salarygrade.`grade` 工资等级</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.`job_id`<span class="operator">=</span>job.`id`</span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.`dept_id`<span class="operator">=</span>dept.`id`</span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> salarygrade <span class="keyword">ON</span> emp.`salary` <span class="keyword">BETWEEN</span> salarygrade.`losalary` <span class="keyword">AND</span> salarygrade.`hisalary`</span><br><span class="line"><span class="keyword">WHERE</span> job.`jname`<span class="operator">=</span><span class="string">&#x27;经理&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h5><p><strong>查询出部门编号、部门名称、部门位置、部门人数</strong><br>– 1.根据需求明确查询哪些表: emp, dept</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept;</span><br></pre></td></tr></table></figure>

<p>– 2.明确表连接条件去掉笛卡尔积</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.`dept_id`<span class="operator">=</span>dept.`id`;</span><br></pre></td></tr></table></figure>

<p>– 3.后续的查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	dept.`dname`, </span><br><span class="line">	<span class="built_in">COUNT</span>(emp.`id`) </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	dept <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> emp <span class="keyword">ON</span> emp.`dept_id`<span class="operator">=</span>dept.`id` </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept.`dname`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(emp.`id`);</span><br></pre></td></tr></table></figure>

<h5 id="练习5"><a href="#练习5" class="headerlink" title="练习5"></a>练习5</h5><p><strong>列出所有员工的姓名及其直接上级领导的姓名, 没有上级领导的员工也需要显示,显示自己的名字和领导的名字</strong><br>– 1.根据需求明确查询哪些表: emp pt, emp ld</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp pt <span class="keyword">INNER</span> <span class="keyword">JOIN</span> emp ld;</span><br></pre></td></tr></table></figure>

<p>– 2.明确表连接条件去掉笛卡尔积</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp pt <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> emp ld <span class="keyword">ON</span> pt.`mgr`<span class="operator">=</span>ld.`id`;</span><br></pre></td></tr></table></figure>

<p>– 3.后续的查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	pt.`ename` 普通员工的名字,</span><br><span class="line">	ld.`ename` 领导的名字</span><br><span class="line"><span class="keyword">FROM</span> emp pt <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> emp ld <span class="keyword">ON</span> pt.`mgr`<span class="operator">=</span>ld.`id`;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级之表多对多</title>
    <url>/2022/08/29/SQL%E8%AF%AD%E5%8F%A5/006-MySQL%E9%AB%98%E7%BA%A7%E4%B9%8B%E8%A1%A8%E5%A4%9A%E5%AF%B9%E5%A4%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p>
<span id="more"></span>

<p>图1：<br><img src="https://img-blog.csdnimg.cn/0b6381036adf454fb8140d5a01dfc06d.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">多对多：</span><br><span class="line"><span class="bullet">    *</span> 如：订单 和 商品</span><br><span class="line"><span class="bullet">    *</span> 一个商品对应多个订单，一个订单包含多个商品</span><br><span class="line"></span><br><span class="line">实现方式：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 订单表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_order (</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	payment <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">	payment_type TINYINT,</span><br><span class="line">	status TINYINT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 商品表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_goods (</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	title <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">	price <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单商品中间表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_order_goods (</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	order_id <span class="type">int</span>(<span class="number">5</span>),</span><br><span class="line">	goods_id <span class="type">int</span>(<span class="number">5</span>),</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_order <span class="keyword">FOREIGN</span> KEY(order_id) <span class="keyword">REFERENCES</span> tb_order(id),</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_goods <span class="keyword">FOREIGN</span> KEY(goods_id) <span class="keyword">REFERENCES</span> tb_goods(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级之约束</title>
    <url>/2022/08/29/SQL%E8%AF%AD%E5%8F%A5/005-MySQL%E9%AB%98%E7%BA%A7%E4%B9%8B%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p>
<span id="more"></span>

<h4 id="一、主键约束"><a href="#一、主键约束" class="headerlink" title="一、主键约束"></a>一、主键约束</h4><h5 id="1、创建表时添加主键"><a href="#1、创建表时添加主键" class="headerlink" title="1、创建表时添加主键"></a>1、创建表时添加主键</h5><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">创建表学生表st1, 包含字段<span class="built_in">(id</span>,<span class="built_in"> name</span>, age)<span class="built_in">将id</span>做为主键</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> st1 (</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st1 <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;刘德华&#x27;</span>, <span class="number">60</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st1 <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;郭富城&#x27;</span>, <span class="number">58</span>);</span><br></pre></td></tr></table></figure>

<h5 id="2、演示主键约束-唯一非空"><a href="#2、演示主键约束-唯一非空" class="headerlink" title="2、演示主键约束: 唯一非空"></a>2、演示主键约束: 唯一非空</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st1 <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;黎明&#x27;</span>, <span class="number">60</span>); <span class="comment">-- Duplicate entry &#x27;2&#x27; for key &#x27;PRIMARY&#x27;: 主键重复啦</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st1 <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;黎明&#x27;</span>, <span class="number">60</span>); <span class="comment">-- Column &#x27;id&#x27; cannot be null: 主键不能为NULL</span></span><br></pre></td></tr></table></figure>

<h5 id="3、主键删除和添加（了解）"><a href="#3、主键删除和添加（了解）" class="headerlink" title="3、主键删除和添加（了解）"></a>3、主键删除和添加（了解）</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除主键约束(了解)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> st1 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在已有表中添加主键约束(了解)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> st1 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(id);</span><br></pre></td></tr></table></figure>

<h5 id="4、主键自动增长"><a href="#4、主键自动增长" class="headerlink" title="4、主键自动增长"></a>4、主键自动增长</h5><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)创建学生表st2, 包含字段<span class="built_in">(id</span>,<span class="built_in"> name</span>, age)<span class="built_in">将id</span>做为主键并自动增长</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> st2 (</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	age <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">(2)主键默认从1开始自动增长: i</span><span class="literal">++</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st2 (NAME, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;貂蝉&#x27;</span>, <span class="number">28</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st2 (NAME, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;西施&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st2 (NAME, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;王昭君&#x27;</span>, <span class="number">26</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st2 (NAME, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;杨玉环&#x27;</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(3)</span>修改自动增长的开始值<span class="comment">(面试题)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> st2 AUTO_INCREMENT <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> st2 (NAME, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;西施&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure>

<h5 id="5、唯一约束、非空约束、默认值约束"><a href="#5、唯一约束、非空约束、默认值约束" class="headerlink" title="5、唯一约束、非空约束、默认值约束"></a>5、唯一约束、非空约束、默认值约束</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, <span class="comment">-- 员工id，主键且自增长</span></span><br><span class="line">	ename <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>, <span class="comment">-- 员工姓名，非空并且唯一</span></span><br><span class="line">	joindate <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 入职日期，非空</span></span><br><span class="line">	salary <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> , <span class="comment">-- 工资，非空</span></span><br><span class="line">	bonus <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">1000</span> <span class="comment">-- 奖金，如果没有奖金默认为1000</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id, ename, joindate, salary, bonus) <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;1999-11-11&#x27;</span>, <span class="number">8800</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id, ename, joindate, salary, bonus) <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;1999-11-11&#x27;</span>, <span class="number">8800</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)演示非空约束		<span class="keyword">Column</span> <span class="string">&#x27;ename&#x27;</span> cannot be <span class="keyword">null</span>: ename不能为<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id, ename, joindate, salary, bonus) <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;1999-11-11&#x27;</span>, <span class="number">8800</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">(<span class="number">2</span>)演示唯一约束		Duplicate entry <span class="string">&#x27;李四&#x27;</span> <span class="keyword">for key</span> <span class="string">&#x27;ename&#x27;</span>: 李四重复了</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id, ename, joindate, salary, bonus) <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>, <span class="number">8800</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(3)</span> 演示默认约束</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id, ename, joindate, salary) <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;1999-11-11&#x27;</span>, <span class="number">8800</span>);</span><br></pre></td></tr></table></figure>

<h4 id="二、外键约束"><a href="#二、外键约束" class="headerlink" title="二、外键约束"></a>二、外键约束</h4><h5 id="6、外键约束1"><a href="#6、外键约束1" class="headerlink" title="6、外键约束1"></a>6、外键约束1</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 准备数据: </span></span><br><span class="line"><span class="comment">-- 创建部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> department (</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	dep_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	dep_location <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="comment">-- 创建 employee 并添加外键约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	age <span class="type">INT</span>,</span><br><span class="line">	dep_id <span class="type">INT</span>,</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_abc <span class="keyword">FOREIGN</span> KEY(dep_id) <span class="keyword">REFERENCES</span> department(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>添加数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加2个部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department (dep_name, dep_location) <span class="keyword">VALUES</span> (<span class="string">&#x27;研发部&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>), (<span class="string">&#x27;销售部&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加员工,dep_id表示员工所在的部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (NAME, age, dep_id) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;李四&#x27;</span>, <span class="number">21</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;王五&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;老王&#x27;</span>, <span class="number">20</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;大王&#x27;</span>, <span class="number">22</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;小王&#x27;</span>, <span class="number">18</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><strong>演示：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)添加不正常的数据,报错: Cannot <span class="keyword">add</span> <span class="keyword">or</span> <span class="keyword">update</span> a child <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails  </span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (NAME, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(2)</span>删除外键约束<span class="comment">(了解)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY employee_ibfk_1;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在已有表添加外键约束, 外键约束可以省略: CONSTRAINT 外键约束名 (了解)</span></span><br><span class="line"><span class="comment">-- 省略CONSTRAINT外键约束名 数据库会自动设置外键约束的名字,我们要到 `3信息` 中查找</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(dep_id) <span class="keyword">REFERENCES</span> department(id);</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础之总结</title>
    <url>/2022/08/29/SQL%E8%AF%AD%E5%8F%A5/004-MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p>
<span id="more"></span>

<h3 id="一、能够使用SQL语句操作数据库"><a href="#一、能够使用SQL语句操作数据库" class="headerlink" title="一、能够使用SQL语句操作数据库"></a>一、能够使用SQL语句操作数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查看数据库: <span class="keyword">SHOW</span> DATABASES;</span><br><span class="line">创建数据库: <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br><span class="line">删除数据库: <span class="keyword">DROP</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure>

<h3 id="二、能够使用SQL语句操作表结构"><a href="#二、能够使用SQL语句操作表结构" class="headerlink" title="二、能够使用SQL语句操作表结构"></a>二、能够使用SQL语句操作表结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查看表: <span class="keyword">SHOW</span> TABLES;</span><br><span class="line">创建表: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 (字段名 字段类型);</span><br><span class="line">删除表: <span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line">修改表: <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 XXX;</span><br></pre></td></tr></table></figure>

<h3 id="三、能够使用SQL语句进行数据的添加修改和删除的操作"><a href="#三、能够使用SQL语句进行数据的添加修改和删除的操作" class="headerlink" title="三、能够使用SQL语句进行数据的添加修改和删除的操作"></a>三、能够使用SQL语句进行数据的添加修改和删除的操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">添加数据: <span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名, 字段名<span class="number">2</span>) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>);</span><br><span class="line">修改数据: <span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>新的值;</span><br><span class="line">删除数据: <span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>

<h3 id="四、能够使用SQL语句简单查询数据"><a href="#四、能够使用SQL语句简单查询数据" class="headerlink" title="四、能够使用SQL语句简单查询数据"></a>四、能够使用SQL语句简单查询数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>

<h3 id="五、能够对使用SQL对表中数据条件查询操作"><a href="#五、能够对使用SQL对表中数据条件查询操作" class="headerlink" title="五、能够对使用SQL对表中数据条件查询操作"></a>五、能够对使用SQL对表中数据条件查询操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>

<h3 id="六、能够使用SQL语句进行排序"><a href="#六、能够使用SQL语句进行排序" class="headerlink" title="六、能够使用SQL语句进行排序"></a>六、能够使用SQL语句进行排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名 排序方式;</span><br><span class="line">排序方式:</span><br><span class="line">	<span class="keyword">ASC</span>: 升序</span><br><span class="line">	<span class="keyword">DESC</span>: 降序</span><br></pre></td></tr></table></figure>

<h3 id="七、能够使用聚合函数"><a href="#七、能够使用聚合函数" class="headerlink" title="七、能够使用聚合函数"></a>七、能够使用聚合函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">COUNT:	统计一列的总数量</span><br><span class="line">SUM:	统计一列的总和</span><br><span class="line">MAX:	统计一列的最大值</span><br><span class="line">MIN:	统计一列的最小值</span><br><span class="line">AVG:	统计一列的平均值</span><br></pre></td></tr></table></figure>

<h3 id="八、能够使用SQL语句进行分组查询"><a href="#八、能够使用SQL语句进行分组查询" class="headerlink" title="八、能够使用SQL语句进行分组查询"></a>八、能够使用SQL语句进行分组查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名, 聚合函数 <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名;</span><br></pre></td></tr></table></figure>

<h3 id="九、能够完成基本的分页查询"><a href="#九、能够完成基本的分页查询" class="headerlink" title="九、能够完成基本的分页查询"></a>九、能够完成基本的分页查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT 跳过的数量, 显示的数量</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础之查询数据</title>
    <url>/2022/08/29/SQL%E8%AF%AD%E5%8F%A5/003-MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p>
<span id="more"></span>

<h3 id="一、DQL操作表中记录环境搭建"><a href="#一、DQL操作表中记录环境搭建" class="headerlink" title="一、DQL操作表中记录环境搭建"></a>一、DQL操作表中记录环境搭建</h3><blockquote>
<p><strong>细节:查询只是查看数据,不会修改表中数据</strong></p>
</blockquote>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">创建商品表<span class="comment">(goods2)</span>包含: </span><br><span class="line">	商品名称<span class="comment">(name)</span>,</span><br><span class="line">	商品价格<span class="comment">(price)</span>,</span><br><span class="line">	商品销量<span class="comment">(sales_volume)</span>,</span><br><span class="line">	商品生产日期<span class="comment">(produced_date)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods2 (</span><br><span class="line">	NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	price <span class="keyword">DOUBLE</span>,</span><br><span class="line">	sales_valume <span class="type">INT</span>,</span><br><span class="line">	produced_date <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> goods2 <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;华为P40&#x27;</span>,<span class="number">5999</span>,<span class="number">1000</span>,<span class="string">&#x27;2020-08-20&#x27;</span>,<span class="string">&#x27;手机&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;小米11&#x27;</span>,<span class="number">4999</span>,<span class="number">5000</span>,<span class="string">&#x27;2020-12-28&#x27;</span>,<span class="string">&#x27;手机&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;红米K30&#x27;</span>,<span class="number">2999</span>,<span class="number">22000</span>,<span class="string">&#x27;2020-03-11&#x27;</span>,<span class="string">&#x27;手机&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;糯米&#x27;</span>,<span class="number">8.99</span>,<span class="number">200</span>,<span class="string">&#x27;2016-06-08&#x27;</span>,<span class="string">&#x27;食物&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;米糊&#x27;</span>,<span class="number">7.99</span>,<span class="number">30</span>,<span class="string">&#x27;2013-11-22&#x27;</span>,<span class="string">&#x27;食物&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;iPhone 12&#x27;</span>,<span class="number">6799</span>,<span class="number">12000</span>,<span class="string">&#x27;2020-10-28&#x27;</span>,<span class="string">&#x27;手机&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;DELL 7590&#x27;</span>,<span class="number">8799</span>,<span class="number">300</span>,<span class="string">&#x27;2019-06-18&#x27;</span>,<span class="string">&#x27;电脑&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;立白洗衣粉&#x27;</span>,<span class="number">12.9</span>,<span class="number">39000</span>,<span class="string">&#x27;2018-02-13&#x27;</span>,<span class="string">&#x27;日用品&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;立白洗衣粉&#x27;</span>,<span class="number">12.9</span>,<span class="number">39000</span>,<span class="string">&#x27;2018-02-13&#x27;</span>,<span class="string">&#x27;日用品&#x27;</span>),</span><br><span class="line">(<span class="keyword">NULL</span>,<span class="number">88</span>,<span class="number">666</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="string">&#x27;联想电脑&#x27;</span>,<span class="number">8799</span>,<span class="number">700</span>,<span class="string">&#x27;2017-03-13&#x27;</span>,<span class="string">&#x27;电脑&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;惠普电脑&#x27;</span>,<span class="number">8799</span>,<span class="number">50</span>,<span class="string">&#x27;2008-12-13&#x27;</span>,<span class="string">&#x27;电脑&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="二、简单查询"><a href="#二、简单查询" class="headerlink" title="二、简单查询"></a>二、简单查询</h3><p>1、查询goods2表中的 name 和 price 列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NAME, price <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>2、查询goods2表中所有字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NAME, price, sales_volume, produced_date, category <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>3、查询所有字段, 使用*代表所有列, 列就是字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>4、去除重复查询: DISTINCT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> NAME <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>5、查询goods2表中的 name 和 price 列（取别名）<br>      name列的别名为 商品名称，price列的别名为 价格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NAME <span class="keyword">AS</span> 姓名, price <span class="keyword">AS</span> 价格 <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>5.1 取别名时AS关键字可以省略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NAME 姓名<span class="number">2</span>, price 价格<span class="number">2</span> <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<h3 id="三、条件查询"><a href="#三、条件查询" class="headerlink" title="三、条件查询"></a>三、条件查询</h3><p>6、查询price大于1000的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> price<span class="operator">&gt;</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<p>7、查询sales_volume小于5000的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> sales_volume<span class="operator">&lt;</span><span class="number">5000</span>;</span><br></pre></td></tr></table></figure>

<p>8、查询price不等于6799的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> price<span class="operator">!=</span><span class="number">6799</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> price<span class="operator">&lt;&gt;</span><span class="number">6799</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">6799</span>;</span><br></pre></td></tr></table></figure>

<h3 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、逻辑运算符</h3><p>9、查询price大于1000且sales_volume小于500的商品(两个条件同时满足)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> price<span class="operator">&gt;</span><span class="number">1000</span> <span class="keyword">AND</span> sales_volume<span class="operator">&lt;</span><span class="number">500</span>;</span><br></pre></td></tr></table></figure>

<p>10、查询price大于8000 或 sales_volume小于100的商品(两个条件其中一个满足)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> price<span class="operator">&gt;</span><span class="number">8000</span> <span class="keyword">OR</span> sales_volume<span class="operator">&lt;</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>11、查询name是华为P40和小米11和米糊的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;华为P40&#x27;</span> <span class="keyword">OR</span> NAME<span class="operator">=</span><span class="string">&#x27;小米11&#x27;</span> <span class="keyword">OR</span> NAME<span class="operator">=</span><span class="string">&#x27;米糊&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>12、in: 在…里面,只要是满足()里面的数据都可以<br>         查询name是 华为P40 和 小米11 和 米糊 的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME <span class="keyword">IN</span> (<span class="string">&#x27;华为P40&#x27;</span>, <span class="string">&#x27;小米11&#x27;</span>, <span class="string">&#x27;米糊&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>13、扩展:查询name不是华为P40和小米11和米糊的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;华为P40&#x27;</span>, <span class="string">&#x27;小米11&#x27;</span>, <span class="string">&#x27;米糊&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>14、范围: BETWEEN 值1 AND 值2 – 表示从值1到值2范围，包头又包尾<br>         查询price大于等于1000，且小于等于5000的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> price<span class="operator">&gt;=</span><span class="number">1000</span> <span class="keyword">AND</span> price<span class="operator">&lt;=</span><span class="number">5000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">1000</span> <span class="keyword">AND</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>细节: between 值1 and 值2, 小的写前,面大的写后面</p>
</blockquote>
<p>15、扩展:查询商品名称是null的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>16、扩展:查询商品名称不是null的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="五、模糊查询like"><a href="#五、模糊查询like" class="headerlink" title="五、模糊查询like"></a>五、模糊查询like</h3><p>17、查询米开头的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;米%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>18、查询商品名称中包含’米’字的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%米%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>19、扩展:查询名称第二个字为米的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;_米%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>20、扩展:查询名称最后字为米的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%米&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="六、查询排序"><a href="#六、查询排序" class="headerlink" title="六、查询排序"></a>六、查询排序</h3><p>21、单列排序<br>         查询所有数据,使用price升序排序<br>         order by 默认是升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">ORDER</span> <span class="keyword">BY</span> price;</span><br></pre></td></tr></table></figure>

<p>22、组合排序<br>        查询所有数据,在price降序排序的基础上，如果price相同再以sales_volume降序排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>, sales_volume <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="七、聚合函数"><a href="#七、聚合函数" class="headerlink" title="七、聚合函数"></a>七、聚合函数</h3><p>23、聚合函数<br>        SELECT 聚合函数(字段) FROM 表名;<br>        查询商品个数, COUNT统计时会忽略NULL值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(NAME) <span class="keyword">FROM</span> goods2;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(price) <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>24、COUNT最好的处理方式, *表示所有列理解为统计行数,最准确</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>25、扩展用法：统计price大于1000的总个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> price<span class="operator">&gt;</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<p>26、查询所有商品总销量<br>         总销量是把所有商品的销量加起来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(sales_volume) <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>27、查询销量最低的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(sales_volume) <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>28、查询销量最高的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sales_volume) <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>29、查询商品平均价格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>30、扩展:让小数显示指定的位数(2位)<br>        ROUND(数据, 小数位数)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="built_in">AVG</span>(price), <span class="number">2</span>) <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<p>31、细节:如果不是数值类型(整数&#x2F;小数)，那么聚合函数计算结果为0</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AVG(<span class="type">NAME</span>) <span class="keyword">FROM</span> goods2;</span><br></pre></td></tr></table></figure>

<h3 id="八、分组查询"><a href="#八、分组查询" class="headerlink" title="八、分组查询"></a>八、分组查询</h3><p>32、按商品类型分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 <span class="keyword">GROUP</span> <span class="keyword">BY</span> category;</span><br></pre></td></tr></table></figure>

<p>33、分组后会返回每组的第一条数据<br>        通常我们只获取分组字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category <span class="keyword">FROM</span> goods2 <span class="keyword">GROUP</span> <span class="keyword">BY</span> category;</span><br></pre></td></tr></table></figure>

<p>34、查询每种类型的商品数量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> goods2 <span class="keyword">GROUP</span> <span class="keyword">BY</span> category;</span><br></pre></td></tr></table></figure>

<p>35、查询销量大于100的商品,按商品类型分组,统计每组的数量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> sales_volume<span class="operator">&gt;</span><span class="number">100</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> category;</span><br></pre></td></tr></table></figure>

<p>36、查询销量大于100的商品,按商品类型分组,统计每组的数量,并只显商品类型数量大于2的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> sales_volume<span class="operator">&gt;</span><span class="number">100</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> category <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="九、分页查询"><a href="#九、分页查询" class="headerlink" title="九、分页查询"></a>九、分页查询</h3><p>37、查询商品表中数据，跳过前面2条，显示3条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 LIMIT <span class="number">2</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>38、假设我们一每页显示3条记录的方式来分页，SQL语句如下：<br>        第一页: 跳过0条, 获取3条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 LIMIT <span class="number">0</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>39、如果跳过的条数是0,可以省略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 LIMIT <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>40、第二页: 跳过3条, 获取3条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 LIMIT <span class="number">3</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>41、第三页: 跳过6条, 获取3条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 LIMIT <span class="number">6</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>42、第四页: 跳过9条, 获取3条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 LIMIT <span class="number">6</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>43、第四页: 跳过9条, 获取3条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods2 LIMIT <span class="number">9</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="十、小结"><a href="#十、小结" class="headerlink" title="十、小结"></a>十、小结</h3><p>扩展查询的七个关键字顺序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">LIMIT</span><br></pre></td></tr></table></figure>

<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先查询表里面所有的数据并进行过滤。（此时用where关键字过滤的是表里面的数据，把name为null的给过滤掉了）</span></span><br><span class="line"><span class="comment">-- 然后进行分组，并统计每一组有多少条数据。</span></span><br><span class="line"><span class="comment">-- 利用HAVING关键字对查询的结果再次过滤 把个数大于等于2的展示出来。</span></span><br><span class="line"><span class="comment">-- 对having过滤之后的结果按照个数进行排序</span></span><br><span class="line"><span class="comment">-- 最后再跳过第一个，展示两条数据</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> 个数 <span class="keyword">FROM</span> goods2 <span class="keyword">WHERE</span> NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> category <span class="keyword">HAVING</span> 个数 <span class="operator">&gt;=</span> <span class="number">2</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> 个数 <span class="keyword">ASC</span> LIMIT <span class="number">1</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>





<p>​		</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础之增删改数据</title>
    <url>/2022/08/29/SQL%E8%AF%AD%E5%8F%A5/002-MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p>
<span id="more"></span>

<h3 id="一、DML操作表中记录环境搭建"><a href="#一、DML操作表中记录环境搭建" class="headerlink" title="一、DML操作表中记录环境搭建"></a>一、DML操作表中记录环境搭建</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">创建商品表<span class="comment">(goods)</span>包含: </span><br><span class="line">	商品名称<span class="comment">(name)</span>,</span><br><span class="line">	商品价格<span class="comment">(price)</span>,</span><br><span class="line">	商品销量<span class="comment">(sales_volume)</span>,</span><br><span class="line">	商品生产日期<span class="comment">(produced_date)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods (</span><br><span class="line">	NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	price <span class="keyword">DOUBLE</span>,</span><br><span class="line">	sales_valume <span class="type">INT</span>,</span><br><span class="line">	produced_date <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h3 id="二、DML操作表之插入数据"><a href="#二、DML操作表之插入数据" class="headerlink" title="二、DML操作表之插入数据"></a>二、DML操作表之插入数据</h3><p>1、给指定列添加数据 给goods表添加一条数据 NAME&#x3D;’格力空调’, price&#x3D;3699<br>**注意:**在MySQL中字符串可以使用””或’’, 建议’’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> goods (NAME, price) <span class="keyword">VALUES</span> (<span class="string">&#x27;格力空调&#x27;</span>, <span class="number">3699</span>);</span><br></pre></td></tr></table></figure>

<p>2、插入数据, 所有的字段名都写出来(少数做法)<br>**注意:**日期使用’’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> goods (NAME, price, sales_valume, produced_date) <span class="keyword">VALUES</span> (<span class="string">&#x27;华为P40&#x27;</span>, <span class="number">5999</span>, <span class="number">1000</span>, <span class="string">&#x27;2020-08-20&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>3、插入数据, 插入所有字段不写字段名(常用做法)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> goods <span class="keyword">VALUES</span> (<span class="string">&#x27;小米11&#x27;</span>, <span class="number">4999</span>, <span class="number">300</span>, <span class="string">&#x27;2021-03-22&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>4、扩展:一条SQL语句加入多条数据, VALUES 后面可以跟多个(), 一个()对应一条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> goods <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;iPhone 12&#x27;</span>, <span class="number">6799</span>, <span class="number">12000</span>, <span class="string">&#x27;2020-10-28&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;DELL 7590&#x27;</span>, <span class="number">8799</span>, <span class="number">300</span>, <span class="string">&#x27;2019-06-18&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;立白洗衣粉&#x27;</span>, <span class="number">12.9</span>, <span class="number">39000</span>, <span class="string">&#x27;2018-02-13&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="三、DML操作表之修改数据"><a href="#三、DML操作表之修改数据" class="headerlink" title="三、DML操作表之修改数据"></a>三、DML操作表之修改数据</h3><p>5、不带条件修改数据，将所有的price改成0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> goods <span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>6、带条件修改数据，把name为’华为P40’的商品price改成5999</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> goods <span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">5999</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;华为P40&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>7、一次修改多个列，把name为’小米11’的商品price改成3999, sales_volume改成10000</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> goods <span class="keyword">SET</span> price<span class="operator">=</span><span class="number">3999</span>, sales_valume<span class="operator">=</span><span class="number">10000</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;小米11&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="四、DML操作表之删除数据"><a href="#四、DML操作表之删除数据" class="headerlink" title="四、DML操作表之删除数据"></a>四、DML操作表之删除数据</h3><p>8、带条件删除数据，删除name为’小米11’的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> goods <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;小米11&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>9、不带条件删除数据，删除表中的所有数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> goods;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础之操作数据库和表</title>
    <url>/2022/08/29/SQL%E8%AF%AD%E5%8F%A5/001-MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：SQL一直是初学者的痛点，尤其是多表查询的时候，往往让人感到手足无措。说起这个就想起了我初为新手程序员的尴尬，同事们经常安慰我多查几遍就好了！现在我整理一个SQL系列文档，希望能帮助初入职场的程序员避免那种尴尬之情，也算给曾经的我一个交代吧。</p>
<span id="more"></span>

<h3 id="一、DML操作数据库"><a href="#一、DML操作数据库" class="headerlink" title="一、DML操作数据库"></a>一、DML操作数据库</h3><h5 id="1、查看所有数据库"><a href="#1、查看所有数据库" class="headerlink" title="1、查看所有数据库"></a>1、查看所有数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure>

<h5 id="2、直接创建数据库db1"><a href="#2、直接创建数据库db1" class="headerlink" title="2、直接创建数据库db1"></a>2、直接创建数据库db1</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE db1;</span><br></pre></td></tr></table></figure>

<h5 id="3、判断是否存在并创建数据库db2"><a href="#3、判断是否存在并创建数据库db2" class="headerlink" title="3、判断是否存在并创建数据库db2"></a>3、判断是否存在并创建数据库db2</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS db2;</span><br></pre></td></tr></table></figure>

<h5 id="4、删除db2数据库"><a href="#4、删除db2数据库" class="headerlink" title="4、删除db2数据库"></a>4、删除db2数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE db2;</span><br></pre></td></tr></table></figure>

<h5 id="5、判断数据库存在才删除"><a href="#5、判断数据库存在才删除" class="headerlink" title="5、判断数据库存在才删除"></a>5、判断数据库存在才删除</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS db2;</span><br></pre></td></tr></table></figure>

<h5 id="6、使用数据库"><a href="#6、使用数据库" class="headerlink" title="6、使用数据库"></a>6、使用数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE sys;</span><br></pre></td></tr></table></figure>

<h3 id="二、DDL操作表"><a href="#二、DDL操作表" class="headerlink" title="二、DDL操作表"></a>二、DDL操作表</h3><h5 id="建表需求一"><a href="#建表需求一" class="headerlink" title="建表需求一"></a>建表需求一</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建商品表(goods)包含: </span><br><span class="line">	商品名称(name),</span><br><span class="line">	商品价格(price),</span><br><span class="line">	商品销量(sales_volume),</span><br><span class="line">	商品生产日期(produced_date)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE goods (</span><br><span class="line">	NAME VARCHAR(20),</span><br><span class="line">	price DOUBLE,</span><br><span class="line">	sales_valume INT,</span><br><span class="line">	produced_date DATE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="建表需求二"><a href="#建表需求二" class="headerlink" title="建表需求二"></a>建表需求二</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">需求：设计一张学生表，请注重数据类型、长度的合理性</span><br><span class="line">	编号，			整数</span><br><span class="line">	姓名，			姓名最长不超过<span class="number">10</span>个汉字</span><br><span class="line">	性别，			因为取值只有两种可能(男或女)，因此用一个汉字</span><br><span class="line">	生日，			取值为年月日</span><br><span class="line">	入学成绩，		小数点后保留两位</span><br><span class="line">	邮件地址，		最大长度不超过 <span class="number">64</span></span><br><span class="line">	家庭联系电话，	不一定是手机号码，可能会出现 <span class="operator">-</span> 等字符，<span class="number">20</span>位以内</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student (</span><br><span class="line">	id INT,</span><br><span class="line">	NAME VARCHAR(10),</span><br><span class="line">	sex CHAR(1),</span><br><span class="line">	birthday DATE,</span><br><span class="line">	score DOUBLE(5,2), -- 总共5位,小数占2位	100.00	98.50</span><br><span class="line">	email VARCHAR(64),</span><br><span class="line">	phone VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="7、查看db1数据库中的所有表"><a href="#7、查看db1数据库中的所有表" class="headerlink" title="7、查看db1数据库中的所有表"></a>7、查看db1数据库中的所有表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure>

<h5 id="8、查看表结构"><a href="#8、查看表结构" class="headerlink" title="8、查看表结构"></a>8、查看表结构</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC goods;</span><br></pre></td></tr></table></figure>

<h5 id="9、删除表goods表"><a href="#9、删除表goods表" class="headerlink" title="9、删除表goods表"></a>9、删除表goods表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE goods;</span><br></pre></td></tr></table></figure>

<h5 id="10、将goods改名成goods2"><a href="#10、将goods改名成goods2" class="headerlink" title="10、将goods改名成goods2"></a>10、将goods改名成goods2</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE goods RENAME TO goods2;</span><br></pre></td></tr></table></figure>

<h5 id="11、为goods2表添加一个新的字段img-类型为varchar-20"><a href="#11、为goods2表添加一个新的字段img-类型为varchar-20" class="headerlink" title="11、为goods2表添加一个新的字段img,类型为varchar(20)"></a>11、为goods2表添加一个新的字段img,类型为varchar(20)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE goods2 ADD img VARCHAR(20);</span><br></pre></td></tr></table></figure>

<h5 id="12、将goods2表中的img字段的改成varchar-100"><a href="#12、将goods2表中的img字段的改成varchar-100" class="headerlink" title="12、将goods2表中的img字段的改成varchar(100)"></a>12、将goods2表中的img字段的改成varchar(100)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE goods2 MODIFY img VARCHAR(100);</span><br></pre></td></tr></table></figure>

<h5 id="13、将goods2表中的img字段名改成icon，类型varchar-80"><a href="#13、将goods2表中的img字段名改成icon，类型varchar-80" class="headerlink" title="13、将goods2表中的img字段名改成icon，类型varchar(80)"></a>13、将goods2表中的img字段名改成icon，类型varchar(80)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE goods2 CHANGE img icon VARCHAR(80);</span><br></pre></td></tr></table></figure>

<h5 id="14、删除goods2表中的字段icon"><a href="#14、删除goods2表中的字段icon" class="headerlink" title="14、删除goods2表中的字段icon"></a>14、删除goods2表中的字段icon</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE goods2 DROP icon;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>java高级之动态SQL</title>
    <url>/2022/08/28/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/007-java%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%8A%A8%E6%80%81SQL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p>
<span id="more"></span>

<h3 id="一、动态SQL编写"><a href="#一、动态SQL编写" class="headerlink" title="一、动态SQL编写"></a>一、动态SQL编写</h3><p><strong>导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1、基础动态SQL"><a href="#1、基础动态SQL" class="headerlink" title="1、基础动态SQL"></a>1、基础动态SQL</h3><h5 id="pojo-实体类"><a href="#pojo-实体类" class="headerlink" title="pojo 实体类"></a>pojo 实体类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个类的对象用于保存user表中的数据(实体类)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday; <span class="comment">// 注意,使用java.sql.Date</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br></pre></td></tr></table></figure>



<h5 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h5><p>数据接口层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// XxxMapper: 表示这个接口中的所有方法用于操作xxx表</span></span><br><span class="line"><span class="comment">// UserMapper: 表示这个接口中的所有方法用于操作user表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUsers</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id查询用户 uid: 用户id</span></span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增删改返回影响的行数,返回值可以写int或void</span></span><br><span class="line">    <span class="comment">// 根据id删除用户</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id修改用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(User u)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(User u)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyBatis多参数处理: 使用用户名个性别查询用户</span></span><br><span class="line">    <span class="comment">// MyBatis多参数方案1: 每个参数添加@Param注解</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectByCondition</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;sex&quot;)</span> String sex)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyBatis多参数方案2: 传入自定义类</span></span><br><span class="line">    <span class="comment">// List&lt;User&gt; selectByCondition(User u);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyBatis多参数方案3: 传入Map, #&#123;键&#125;, 取出map的值</span></span><br><span class="line">    <span class="comment">// List&lt;User&gt; selectByCondition(Map&lt;String, String&gt; map);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id批量删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> <span class="type">int</span>[] ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="动态SQL编写"><a href="#动态SQL编写" class="headerlink" title="动态SQL编写"></a>动态SQL编写</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.onlyone.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select标签: 配置查询的SQL语句</span></span><br><span class="line"><span class="comment">            id属性: 配置接口中的方法名</span></span><br><span class="line"><span class="comment">            resultType: 配置接口中方法的返回值类型, 如果是集合不需要要集合,写集合泛型的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--#&#123;参数名&#125;: 1.先使用?占位, 把参数的值赋值给?     SELECT * FROM user WHERE id=?;</span></span><br><span class="line"><span class="comment">        $&#123;参数名&#125;: 字符串拼接,可能有SQL注入,不建议      SELECT * FROM user WHERE id=1;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.onlyone.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id=$&#123;uid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增删改返回影响的行数,在映射文件里面不需要配置返回值--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--delete标签: 配置删除的SQL语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM user WHERE id=#&#123;uid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--update标签: 配置修改的SQL语句</span></span><br><span class="line"><span class="comment">        参数是类, #&#123;成员变量名&#125; 取出对象成员变量的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        UPDATE user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                username=#&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday!=null&quot;</span>&gt;</span></span><br><span class="line">                birthday=#&#123;birthday&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex!=null and sex!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                sex=#&#123;sex&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address!=null and address!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                address=#&#123;address&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        WHERE id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--insert标签: 配置添加的SQL语句</span></span><br><span class="line"><span class="comment">            useGeneratedKeys: 获取数据新增的主键</span></span><br><span class="line"><span class="comment">            keyProperty: 得到新增的主键放到类中哪个成员变量里面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO user VALUES (NULL, #&#123;username&#125;, #&#123;birthday&#125;, #&#123;sex&#125;, #&#123;address&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--MyBatis多参数处理: 使用用户名个性别查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.onlyone.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--test条件不需要写#&#123;&#125;,直接写参数名,就可以获取到参数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                username LIKE #&#123;username&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex!=null and sex!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                 AND sex=#&#123;sex&#125;;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql标签:抽取重复的SQL语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM USER WHERE id IN</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过id批量删除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM USER WHERE id IN</span><br><span class="line">        <span class="comment">&lt;!--我们的目标是拼接出:  (1, 2, 5);</span></span><br><span class="line"><span class="comment">            foreach标签: 遍历数组</span></span><br><span class="line"><span class="comment">                collection属性: 要遍历的数组或集合</span></span><br><span class="line"><span class="comment">                item属性: 取个名字,保存遍历到的元素</span></span><br><span class="line"><span class="comment">                open属性: 遍历前添加的数据</span></span><br><span class="line"><span class="comment">                separator属性: 每个元素后添加的数据</span></span><br><span class="line"><span class="comment">                close属性: 遍历后添加的数据</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;);&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、进阶动态SQL"><a href="#2、进阶动态SQL" class="headerlink" title="2、进阶动态SQL"></a>2、进阶动态SQL</h3><p>pojo 实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个类的对象用于保存order表中的数据</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> oId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> Timestamp createTime; <span class="comment">// java.sql.Timestamp对应数据中的DATETIME</span></span><br><span class="line">    <span class="keyword">private</span> String note;</span><br></pre></td></tr></table></figure>



<h5 id="dao层-1"><a href="#dao层-1" class="headerlink" title="dao层"></a>dao层</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OrderMapper: 表示这个接口中的所有方法用于操作order表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有的订单</span></span><br><span class="line">    List&lt;Order&gt; <span class="title function_">findAllOrders</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="动态SQL编写-1"><a href="#动态SQL编写-1" class="headerlink" title="动态SQL编写"></a>动态SQL编写</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.onlyone.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--resultMap标签: 手动指定表中的字段名对应类中哪个成员变量</span></span><br><span class="line"><span class="comment">            id属性: 取个名字</span></span><br><span class="line"><span class="comment">            type属性: 查询的数据要封装的类型</span></span><br><span class="line"><span class="comment">            id子标签: 指定主键的对应关系</span></span><br><span class="line"><span class="comment">            result子标签: 指定普通字段的对应关系</span></span><br><span class="line"><span class="comment">                column属性: 表中的字段名</span></span><br><span class="line"><span class="comment">                property属性: 类中的成员变量名</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;OrderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;o_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;oId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        resultType属性: 表中字段名和类中成员变量相同使用resultType自动处理查询结果封装到对象中</span></span><br><span class="line"><span class="comment">        resultMap属性: 表中字段名和类中成员变量不相同使用, resultMap手动处理查询结果封装到对象中</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllOrders&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;OrderMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM `order`;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>可以开启驼峰命名自动映射数据库的_命名简化代码</strong></p>
</blockquote>
<p>补充说明：就不写实体类了, 有时间再继续补充</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis默认多表查询,表中字段名和类中成员变量名相同的也要执行  autoMapping=&quot;true&quot;: 相同的就可以不用指定,但是主键必须指定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注意: collection要配置在association下面,DTD约束的规定.</span></span><br><span class="line"><span class="comment">    一对一,一对多都可以使用association, collection语义更明确而已--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置一对一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserInfoMap&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一对多--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;OrderMap&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;List&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Role&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    useGeneratedKeys:true 表示获取主键值</span></span><br><span class="line"><span class="comment">    keyProperty=&quot;id&quot; 表示将主键值赋给哪个属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">useGeneratedKeys设置为true：在执行插入记录之后可以获取到数据库自动生成的主键值</span></span><br><span class="line"><span class="comment">keyProperty：指定Java对象的属性名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>通往java之路</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot-整合Mybatis</title>
    <url>/2022/08/28/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/004-SpringBoot-%E6%95%B4%E5%90%88Mybatis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p>
<span id="more"></span>

<h3 id="图层结构介绍"><a href="#图层结构介绍" class="headerlink" title="图层结构介绍"></a>图层结构介绍</h3><p><img src="https://img-blog.csdnimg.cn/995c61c12ead4d66948a3966f61b29ac.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="1、MySQL环境搭建"><a href="#1、MySQL环境搭建" class="headerlink" title="1、MySQL环境搭建"></a>1、MySQL环境搭建</h3><p><strong>创建表导入数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;1-男，2-女&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1370649010551177219</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `tb_user`(`id`,`user_name`,`password`,`name`,`age`,`email`,`sex`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;test1@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;test2@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;test3@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">4</span>,<span class="string">&#x27;zhaoliu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;test4@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="string">&#x27;sunqi&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;孙七&#x27;</span>,<span class="number">24</span>,<span class="string">&#x27;test5@itcast.cn&#x27;</span>,<span class="number">1</span>),(<span class="number">6</span>,<span class="string">&#x27;zhuge2&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;诸葛孔明2&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2、引入mybatis启动器依赖-它依赖了jdbc启动器，jdbc启动器可以删除"><a href="#2、引入mybatis启动器依赖-它依赖了jdbc启动器，jdbc启动器可以删除" class="headerlink" title="2、引入mybatis启动器依赖(它依赖了jdbc启动器，jdbc启动器可以删除)"></a>2、引入mybatis启动器依赖(<strong>它依赖了jdbc启动器，jdbc启动器可以删除</strong>)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springmvc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--myabtis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、配置mybatis相关属性"><a href="#3、配置mybatis相关属性" class="headerlink" title="3、配置mybatis相关属性"></a>3、配置mybatis相关属性</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql:///springdb?useSSL=false</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  #别名扫描</span></span><br><span class="line">  <span class="attr">type-aliases-package</span>: <span class="string">com.onlyone.model</span></span><br><span class="line"><span class="comment">  #开启下划线与小驼峰映射</span></span><br><span class="line">  <span class="attr">configuration</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case</span>: <span class="string">true</span></span><br><span class="line"><span class="comment">    #打印sql的日志信息</span></span><br><span class="line">    <span class="attr">log-impl</span>: <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment"> #指定Mapper文件所在的位置 ,一旦指定不需要mapper.xml文件与类名同一个包文件名也可以不一样的。</span></span><br><span class="line">  <span class="attr">mapper-locations</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  #注意： classpath后面的:是没有空格的，</span></span><br><span class="line">    <span class="attr">-</span> <span class="string">classpath:mappers/*.xml</span></span><br></pre></td></tr></table></figure>

<h3 id="4、用户实体-User"><a href="#4、用户实体-User" class="headerlink" title="4、用户实体(User)"></a>4、用户实体(User)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">//id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age; <span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email; <span class="comment">//邮箱</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex; <span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、数据访问接口-UserMapper"><a href="#5、数据访问接口-UserMapper" class="headerlink" title="5、数据访问接口(UserMapper)"></a>5、数据访问接口(UserMapper)</h3><p>(1) dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.onlyone.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>(2) 在启动类上添加数据访问接口包扫描:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意： 使用mybatis的时候，这个springboot默认是不扫描dao接口的，两种解决方案：</span></span><br><span class="line"><span class="comment"> *      1. 每一个dao接口都添加一个<span class="doctag">@mapper</span>注解,不推荐，因为较为繁琐</span></span><br><span class="line"><span class="comment"> *      2. 在启动类中<span class="doctag">@MapperScan</span>注解扫描dao包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.onlyone.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明: 这种方式的好处是，不用给每一个Mapper都添加注解。采用@MapperScan包扫描方式只需要添加一次注解。</p>
</blockquote>
<h3 id="6、定义SQL语句-UserMapper-xml"><a href="#6、定义SQL语句-UserMapper-xml" class="headerlink" title="6、定义SQL语句(UserMapper.xml)"></a>6、定义SQL语句(UserMapper.xml)</h3><p><img src="https://img-blog.csdnimg.cn/be3c85f8e2a447dca1dab51cfc752144.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.onlyone.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、业务层-UserService"><a href="#7、业务层-UserService" class="headerlink" title="7、业务层 (UserService)"></a>7、业务层 (UserService)</h3><p>定义一个service接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.onlyone.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现该接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.onlyone.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.onlyone.model.User;</span><br><span class="line"><span class="keyword">import</span> com.onlyone.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、控制器-UserController"><a href="#8、控制器-UserController" class="headerlink" title="8、控制器 (UserController)"></a>8、控制器 (UserController)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.onlyone.model.User;</span><br><span class="line"><span class="keyword">import</span> com.onlyone.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt;findAll()&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、运行测试"><a href="#9、运行测试" class="headerlink" title="9、运行测试"></a>9、运行测试</h3><p><img src="https://img-blog.csdnimg.cn/5284729e90f2401c8dd17e4df33d57f2.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>通往java之路</category>
      </categories>
  </entry>
  <entry>
    <title>模块化之Redis设置营业状态</title>
    <url>/2022/08/28/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/008-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BRedis%E8%AE%BE%E7%BD%AE%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p>
<span id="more"></span>

<h6 id="编写Redis配置类"><a href="#编写Redis配置类" class="headerlink" title="编写Redis配置类"></a>编写Redis配置类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis模板类...&quot;</span>);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="创建ShopService接口，声明设置营业状态和查询营业状态的方法"><a href="#创建ShopService接口，声明设置营业状态和查询营业状态的方法" class="headerlink" title="创建ShopService接口，声明设置营业状态和查询营业状态的方法"></a>创建ShopService接口，声明设置营业状态和查询营业状态的方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置店铺营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询店铺的营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">getStatus</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="创建ShopServiceImpl并实现ShopService接口"><a href="#创建ShopServiceImpl并实现ShopService接口" class="headerlink" title="创建ShopServiceImpl并实现ShopService接口"></a>创建ShopServiceImpl并实现ShopService接口</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;SHOP:STATUS&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置店铺营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(KEY,status);</span><br><span class="line">        log.info(<span class="string">&quot;设置营业状态为:&#123;&#125;&quot;</span>,status == <span class="number">1</span> ? <span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取店铺营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="创建ShopController，并根据接口定义创建相应的方法"><a href="#创建ShopController，并根据接口定义创建相应的方法" class="headerlink" title="创建ShopController，并根据接口定义创建相应的方法"></a>创建ShopController，并根据接口定义创建相应的方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;adminShopController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;admin/shop&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;店铺操作相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShopService shopService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置店铺营业状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;设置店铺营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">setStatus</span><span class="params">(<span class="meta">@PathVariable</span> Integer status)</span>&#123;</span><br><span class="line">        shopService.setStatus(status);</span><br><span class="line">        <span class="keyword">return</span> R.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> shopService.getStatus();</span><br><span class="line">            <span class="keyword">return</span> R.success(status);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> R.success(StatusConstant.ENABLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：记得在配置文件里面配置redis</p>
]]></content>
      <categories>
        <category>项目模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化之PageHelper.startPage</title>
    <url>/2022/08/28/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/002-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BPageHelper.startPage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p>
<span id="more"></span>

<p>PageHelper是MyBatis的分页插件，它能够帮助我们快速且简洁的实现分页功能。传统的分页都需要我们程序员手动在sql语句里写LIMIT语句，而PageHelper这个插件能够帮助我们过滤sql，自动添加LIMIT语句，使得sql语句看上去更加简洁，具体实现方法如下（注意：PageHelper必须在sql语句前使用，否则过滤无效）</p>
<p>例句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一步 PageHelper.startPage  获取当前页数,每页的内容数量</span></span><br><span class="line">PageHelper.startPage((<span class="type">int</span>)分页的页数, （<span class="type">int</span>）每个分页的内容数量);</span><br><span class="line"><span class="comment">//第二步sql语句具体实现</span></span><br><span class="line"><span class="comment">// 第三步返回数据给表示层(看接口需要返回什么数据)</span></span><br></pre></td></tr></table></figure>

<p>某个分页查询的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> //employeePageQueryDTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(EmployeePageQueryDTO pageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="comment">//select * from employee limit 10,20</span></span><br><span class="line">    <span class="comment">//基于PageHelper插件实现动态分页查询</span></span><br><span class="line">    PageHelper.startPage(pageQueryDTO.getPage(),pageQueryDTO.getPageSize());</span><br><span class="line"></span><br><span class="line">    Page&lt;Employee&gt; page = employeeMapper.pageQuery(pageQueryDTO);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(),page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化之校验JWT令牌</title>
    <url>/2022/08/28/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/001-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BJWT%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p>
<span id="more"></span>

<p>实现思路梳理：</p>
<h5 id="1、前端请求后端接口，在请求头中携带JWT令牌"><a href="#1、前端请求后端接口，在请求头中携带JWT令牌" class="headerlink" title="1、前端请求后端接口，在请求头中携带JWT令牌"></a>1、前端请求后端接口，在请求头中携带JWT令牌</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建jwt令牌  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(<span class="string">&quot;itcast&quot;</span>,<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>, claims);</span><br></pre></td></tr></table></figure>

<h6 id="图1："><a href="#图1：" class="headerlink" title="图1："></a>图1：</h6><p><img src="https://img-blog.csdnimg.cn/a7852227ca074b3786a9d7303894b0d0.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登录成功,生成JWT令牌</span></span><br><span class="line">Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">claims.put(JwtClaimsConstant.EMP_ID,employee.getId());  <span class="comment">//claims（key,value）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(</span><br><span class="line">    jwtProperties.getAdminSecretKey(),</span><br><span class="line">    jwtProperties.getAdminTtl(),</span><br><span class="line">    claims);</span><br></pre></td></tr></table></figure>



<p>2、后端通过拦截器统一进行JWT令牌校验</p>
<h6 id="创建拦截器"><a href="#创建拦截器" class="headerlink" title="创建拦截器"></a>创建拦截器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt令牌校验的拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenAdminInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;jwt校验...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、从请求头获取令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getAdminTokenName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验失败会抛异常，需要自定义处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2、校验令牌</span></span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);</span><br><span class="line">            <span class="comment">//获取当前员工登录的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());</span><br><span class="line">            <span class="comment">//保存当前登录员工的到线程本地变量</span></span><br><span class="line">            BaseContext.setCurrentId(empId);</span><br><span class="line">            <span class="comment">//3、通知，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//4、不通过，响应401状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，注册Web层相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenAdminInterceptor jwtTokenAdminInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器:&#123;&#125;&quot;</span>, jwtTokenAdminInterceptor);</span><br><span class="line">        registry.addInterceptor(jwtTokenAdminInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/admin/employee/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类"></a>JWT工具类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     * 使用Hs256算法, 私匙使用固定秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis jwt过期时间(毫秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims    设置的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String secretKey, <span class="type">long</span> ttlMillis, Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定签名的时候使用的签名算法，也就是header那部分</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> System.currentTimeMillis() + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">// 设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置过期时间</span></span><br><span class="line">                .setExpiration(exp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Token解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     加密后的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String secretKey, String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 得到DefaultJwtParser</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置需要解析的jwt</span></span><br><span class="line">                .parseClaimsJws(token).getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT工具类</title>
    <url>/2022/08/28/%E5%B7%A5%E5%85%B7%E7%B1%BB/JWT%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《娱乐至死》里面两个著名的预言：奥威尔害怕的是真理被隐瞒，赫胥黎担心的是真理被淹没在无聊烦琐的世事中。在互联网的世界里，我们恰恰走向了赫胥黎式的预言，有时候百度两小时，有效资讯五分钟。在工具类这个栏目，我想收集一些常用的Utils，以免书到用时方恨少的尴尬！</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     * 使用Hs256算法, 私匙使用固定秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis jwt过期时间(毫秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims    设置的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String secretKey, <span class="type">long</span> ttlMillis, Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定签名的时候使用的签名算法，也就是header那部分</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> System.currentTimeMillis() + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">// 设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置过期时间</span></span><br><span class="line">                .setExpiration(exp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Token解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     加密后的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String secretKey, String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 得到DefaultJwtParser</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置需要解析的jwt</span></span><br><span class="line">                .parseClaimsJws(token).getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>UUID工具类</title>
    <url>/2022/08/28/%E5%B7%A5%E5%85%B7%E7%B1%BB/UUID%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《娱乐至死》里面两个著名的预言：奥威尔害怕的是真理被隐瞒，赫胥黎担心的是真理被淹没在无聊烦琐的世事中。在互联网的世界里，我们恰恰走向了赫胥黎式的预言，有时候百度两小时，有效资讯五分钟。在工具类这个栏目，我想收集一些常用的Utils，以免书到用时方恨少的尴尬！</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UUIDUtils</span> &#123;</span><br><span class="line">    <span class="comment">//字符库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] chars = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>,</span><br><span class="line">            <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>,</span><br><span class="line">            <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>,</span><br><span class="line">            <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>,</span><br><span class="line">            <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUUID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用Java提供的生成随机字符串的对象：32位，十六进制，中间包含-</span></span><br><span class="line">        String uuid= UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">shortBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123; <span class="comment">//分为8组</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> uuid.substring(i * <span class="number">4</span>, i * <span class="number">4</span> + <span class="number">4</span>); <span class="comment">//每组4位</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(str, <span class="number">16</span>); <span class="comment">//输出str在16进制下的表示</span></span><br><span class="line">            shortBuffer.append(chars[x % <span class="number">0x3E</span>]); <span class="comment">//用该16进制数取模62（十六进制表示为314（14即E）），结果作为索引取出字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shortBuffer.toString();<span class="comment">//生成8位字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger文档生成操作SOP</title>
    <url>/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/008-Swagger%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E6%93%8D%E4%BD%9CSOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<h3 id="1、Swagger是什么？"><a href="#1、Swagger是什么？" class="headerlink" title="1、Swagger是什么？"></a>1、Swagger是什么？</h3><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>
<h6 id="Swagger的作用："><a href="#Swagger的作用：" class="headerlink" title="Swagger的作用："></a>Swagger的作用：</h6><blockquote>
<p><strong>使用Swagger你只需要按照它的规范去定义接口及接口相关的信息，就可以做到生成接口文档，以及在线接口调试页面。</strong></p>
</blockquote>
<h3 id="2、Swagger如何生成"><a href="#2、Swagger如何生成" class="headerlink" title="2、Swagger如何生成?"></a>2、Swagger如何生成?</h3><h5 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h5><blockquote>
<p><strong>1、导入knife4j的maven坐标</strong><br><strong>2、在配置类中加入knife4j相关配置</strong><br><strong>3、设置静态资源，否则接口文档页面无法访问</strong></p>
</blockquote>
<h5 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-模板代码"><a href="#2-2-模板代码" class="headerlink" title="2.2 模板代码"></a>2.2 模板代码</h5><h6 id="在配置类中加入knife4j相关配置"><a href="#在配置类中加入knife4j相关配置" class="headerlink" title="在配置类中加入knife4j相关配置"></a>在配置类中加入knife4j相关配置</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//指定生成接口需要扫描的包</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;#全包名&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射，主要是访问接口文档（html、js、css）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始设置静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>温馨提示</strong>：需要指定扫描的包，一般扫描的是controller这个包</p>
<h6 id="在拦截器中放行静态资源文件"><a href="#在拦截器中放行静态资源文件" class="headerlink" title="在拦截器中放行静态资源文件"></a>在拦截器中放行静态资源文件</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断当前拦截到的是Controller的方法还是其他资源</span></span><br><span class="line"><span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">    <span class="comment">//当前拦截到的不是动态方法，直接放行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-3-访问"><a href="#2-3-访问" class="headerlink" title="2.3 访问"></a>2.3 访问</h5><blockquote>
<p>接口文档访问路径为 <a href="http://ip:port/doc.html">http://ip:port/doc.html</a></p>
</blockquote>
<p>举例：<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p>
<p><img src="https://img-blog.csdnimg.cn/b9fe8ee3aef649cbbdea0018de3788a5.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis下载与安装SOP</title>
    <url>/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/006-Redis%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85SOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<h4 id="1-Redis下载"><a href="#1-Redis下载" class="headerlink" title="1 Redis下载"></a>1 Redis下载</h4><p>Redis安装包分为windows版和Linux版：</p>
<ul>
<li>Windows版下载地址：<a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></li>
<li>Linux版下载地址： <a href="https://download.redis.io/releases/">https://download.redis.io/releases/</a></li>
</ul>
<p>下载后得到下面安装包：<br><img src="https://img-blog.csdnimg.cn/96130bb65dbc4256a4dc1462fa14c8c4.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-Redis安装"><a href="#2-Redis安装" class="headerlink" title="2 Redis安装"></a>2 Redis安装</h4><p>Redis的Windows版属于绿色软件，直接解压即可使用，解压后目录结构如下：<br><img src="https://img-blog.csdnimg.cn/5669fe80b39c499fa25054c96a8e1bf8.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="3-Redis服务启动与停止"><a href="#3-Redis服务启动与停止" class="headerlink" title="3 Redis服务启动与停止"></a>3 Redis服务启动与停止</h3><p>Windows系统中启动Redis：<strong>redis-server.exe redis.windows.conf</strong>，redis服务默认端口号为6379<br><strong>温馨提示：</strong>powershell窗口是要在Redis文件里面按shift+鼠标左键，也可以用cmd命令窗口</p>
<p><img src="https://img-blog.csdnimg.cn/d41d204818e54d469d01087638121fbc.png#pic_center" alt="在这里插入图片描述"></p>
<p>Ctrl + C停止Redis服务</p>
<p>双击 redis-cli.exe 即可启动 Redis 客户端，默认连接的是本地的 Redis 服务，而且不需要认证即可连接成功。</p>
<p><img src="https://img-blog.csdnimg.cn/9675fa54a19b435f8f800f745addc15f.png#pic_center" alt="在这里插入图片描述"></p>
<p>退出客户端可以输入 exit 或者 quit 命令。</p>
<h3 id="4-Redis配置文件"><a href="#4-Redis配置文件" class="headerlink" title="4 Redis配置文件"></a>4 Redis配置文件</h3><p>前面我们已经启动了Redis服务，默认情况下Redis启动后是在前台运行，而且客户端不需要密码就可以连接到Redis服务。如果我们希望Redis服务启动后是在后台运行，同时希望客户端认证通过后才能连接到Redis服务，应该如果做呢？</p>
<p>此时就需要修改Redis的配置文件：REDIS_HOME&#x2F;redis.windows.conf</p>
<p><strong>通过修改Redis配置文件可以进行如下配置：</strong></p>
<p><strong>1）</strong>设置Redis服务密码</p>
<p>​	将配置文件中的 # requirepass foobared配置项取消注释，默认为注释状态。foobared为密码，可以根据情况自己指定。</p>
<p><strong>2）</strong>设置允许客户端远程连接Redis服务</p>
<p>​	Redis服务默认只能客户端本地连接，不允许客户端远程连接。将配置文件中的 bind 127.0.0.1配置项注释掉。</p>
<p><strong>解释说明：</strong></p>
<blockquote>
<p>Redis配置文件中 #表示注释</p>
<p>Redis配置文件中的配置项前面不能有空格，需要顶格写</p>
<p>requirepass：设置Redis的连接密码</p>
<p>bind：如果指定了bind，则说明只允许来自指定网卡的Redis请求。如果没有指定，就说明可以接受来自任意一个网卡的Redis请求。</p>
</blockquote>
<p><strong>注意</strong>：修改配置文件后需要重启Redis服务配置才能生效：</p>
<p><img src="https://img-blog.csdnimg.cn/9a9d92dab21542ca86cea02a2613cf77.png#pic_center" alt="在这里插入图片描述"></p>
<p>由于Redis配置文件中开启了认证校验，即客户端连接时需要提供密码，此时客户端连接方式变为：</p>
<p><img src="https://img-blog.csdnimg.cn/ee8033255c8c4e918ce0652849f3f83e.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>解释说明：</strong></p>
<blockquote>
<p>-h：指定连接的Redis服务的ip地址</p>
<p>-p：指定连接的Redis服务的端口号</p>
<p>-a：指定连接的Redis服务的密码</p>
</blockquote>
<p>为了方便客户端操作，可以使用Redis的客户端工具：ARDM</p>
<blockquote>
<p>-p：指定连接的Redis服务的端口号</p>
<p>-a：指定连接的Redis服务的密码</p>
</blockquote>
<p>为了方便客户端操作，可以使用Redis的客户端工具：ARDM</p>
<p><img src="https://img-blog.csdnimg.cn/312eb8604cef457ea679cb34193f3c90.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="5、redis注册成windows服务"><a href="#5、redis注册成windows服务" class="headerlink" title="5、redis注册成windows服务"></a>5、redis注册成windows服务</h3><p>注册成windows服务自启动来开机自启<br>在redis的目录里面打开cmd,输入命令出现下方图片就注册成功了<br><img src="https://img-blog.csdnimg.cn/65a1398016a749a089e2df19113de6d0.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-server --service-install redis.windows.conf</span><br></pre></td></tr></table></figure>

<p>这个时候我们可以去服务里面找到它，可以手动开启服务！<br><img src="https://img-blog.csdnimg.cn/5d5db57da82747bea7663cfd93f46f1c.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA之自定义模板SOP</title>
    <url>/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/003-IDEA%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BFSOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<h6 id="自定义模板可以把复杂重复的代码放进去，加快我们程序员的开发效率。"><a href="#自定义模板可以把复杂重复的代码放进去，加快我们程序员的开发效率。" class="headerlink" title="自定义模板可以把复杂重复的代码放进去，加快我们程序员的开发效率。"></a>自定义模板可以把复杂重复的代码放进去，加快我们程序员的开发效率。</h6><p>图1：<br><img src="https://img-blog.csdnimg.cn/9e8ba730427b464f8af8dfdc65fc9df3.png#pic_center" alt="在这里插入图片描述"></p>
<p>图2：<br><img src="https://img-blog.csdnimg.cn/ef0c2b4c60284c069a96fff17c17dd6f.png#pic_center" alt="在这里插入图片描述"></p>
<p>图3：<br><img src="https://img-blog.csdnimg.cn/97342d856bb54f62bbcbb0e0ba96a8da.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云对象存储OSS操作SOP</title>
    <url>/2022/08/27/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/009-%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8OSS%E6%93%8D%E4%BD%9CSOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>阿里云对象存储OSS（Object Storage Service）是一款海量、安全、低成本、高可靠的云存储服务，提供99.9999999999%(12个9)的数据持久性，99.995%的数据可用性。多种存储类型供选择，全面优化存储成本。</p>
<p>阿里云网址：<code>https://www.aliyun.com/</code></p>
<h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h4><blockquote>
<p>1、注册阿里云账号<br>2、创建bucket<br>3、创建AccessKeyId和AccessKeySecret<br>4、添加权限<br>5、参考示例</p>
</blockquote>
<h5 id="1-1-注册阿里云账号"><a href="#1-1-注册阿里云账号" class="headerlink" title="1.1 注册阿里云账号"></a>1.1 注册阿里云账号</h5><p>直接去阿里云官网注册即可！</p>
<h5 id="1-2-创建bucket"><a href="#1-2-创建bucket" class="headerlink" title="1.2 创建bucket"></a>1.2 创建bucket</h5><blockquote>
<p><strong>建议直接输入路径进入此页面</strong><br><img src="https://img-blog.csdnimg.cn/50c49912af1a4b00bb724ffcbb5244d0.png#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<h5 id="1-3-创建AccessKeyId和AccessKeySecret"><a href="#1-3-创建AccessKeyId和AccessKeySecret" class="headerlink" title="1.3 创建AccessKeyId和AccessKeySecret"></a>1.3 创建AccessKeyId和AccessKeySecret</h5><h6 id="图1："><a href="#图1：" class="headerlink" title="图1："></a>图1：</h6><p><img src="https://img-blog.csdnimg.cn/603d8f95974c4e299b198d7ac69fdcb2.png#pic_center" alt="在这里插入图片描述"></p>
<h6 id="图2："><a href="#图2：" class="headerlink" title="图2："></a>图2：</h6><p><img src="https://img-blog.csdnimg.cn/534dfc20e980402ba91d75ef002a81db.png#pic_center" alt="在这里插入图片描述"></p>
<h6 id="图3："><a href="#图3：" class="headerlink" title="图3："></a>图3：</h6><p><img src="https://img-blog.csdnimg.cn/d69b4786c67e4cb9af227a171e67a077.png#pic_center" alt="在这里插入图片描述"></p>
<h6 id="图4：记得复制-出来存放好"><a href="#图4：记得复制-出来存放好" class="headerlink" title="图4：记得复制 出来存放好"></a>图4：记得复制 出来存放好</h6><p><img src="https://img-blog.csdnimg.cn/2a8215e571b04abdbbd0a8f9d11dde08.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="1-4-添加权限"><a href="#1-4-添加权限" class="headerlink" title="1.4 添加权限"></a>1.4 添加权限</h5><h6 id="图5：-【AliyunOSSFullAccess】"><a href="#图5：-【AliyunOSSFullAccess】" class="headerlink" title="图5： 【AliyunOSSFullAccess】"></a>图5： 【AliyunOSSFullAccess】</h6><p><img src="https://img-blog.csdnimg.cn/9a3ec824b4b64c85b6cd7dbe0a5c8e5f.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="1-5-参考示例"><a href="#1-5-参考示例" class="headerlink" title="1.5 参考示例"></a>1.5 参考示例</h5><h6 id="图6："><a href="#图6：" class="headerlink" title="图6："></a>图6：</h6><p><img src="https://img-blog.csdnimg.cn/0c8d5153108b4fc7ab24d92285e45a01.png#pic_center" alt="在这里插入图片描述"><br><strong>参考实例</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>help.aliyun.com<span class="regexp">/document_detail/</span><span class="number">84781</span>.html</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化之Swagger文档生成</title>
    <url>/2022/08/26/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/003-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8BSwagger%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p>
<span id="more"></span>

<h3 id="1、Swagger是什么？"><a href="#1、Swagger是什么？" class="headerlink" title="1、Swagger是什么？"></a>1、Swagger是什么？</h3><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>
<h6 id="Swagger的作用："><a href="#Swagger的作用：" class="headerlink" title="Swagger的作用："></a>Swagger的作用：</h6><blockquote>
<p><strong>使用Swagger你只需要按照它的规范去定义接口及接口相关的信息，就可以做到生成接口文档，以及在线接口调试页面。</strong></p>
</blockquote>
<h3 id="2、Swagger如何生成"><a href="#2、Swagger如何生成" class="headerlink" title="2、Swagger如何生成?"></a>2、Swagger如何生成?</h3><h5 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h5><blockquote>
<p><strong>1、导入knife4j的maven坐标</strong><br><strong>2、在配置类中加入knife4j相关配置</strong><br><strong>3、设置静态资源，否则接口文档页面无法访问</strong></p>
</blockquote>
<h5 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-模板代码"><a href="#2-2-模板代码" class="headerlink" title="2.2 模板代码"></a>2.2 模板代码</h5><h6 id="在配置类中加入knife4j相关配置"><a href="#在配置类中加入knife4j相关配置" class="headerlink" title="在配置类中加入knife4j相关配置"></a>在配置类中加入knife4j相关配置</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//指定生成接口需要扫描的包</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;#全包名&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射，主要是访问接口文档（html、js、css）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始设置静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>温馨提示</strong>：需要指定扫描的包，一般扫描的是controller这个包</p>
<h6 id="在拦截器中放行静态资源文件"><a href="#在拦截器中放行静态资源文件" class="headerlink" title="在拦截器中放行静态资源文件"></a>在拦截器中放行静态资源文件</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断当前拦截到的是Controller的方法还是其他资源</span></span><br><span class="line"><span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">    <span class="comment">//当前拦截到的不是动态方法，直接放行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-3-访问"><a href="#2-3-访问" class="headerlink" title="2.3 访问"></a>2.3 访问</h5><blockquote>
<p>接口文档访问路径为 <a href="http://ip:port/doc.html">http://ip:port/doc.html</a></p>
</blockquote>
<p>举例：<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p>
<p><img src="https://img-blog.csdnimg.cn/b9fe8ee3aef649cbbdea0018de3788a5.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>项目模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义简单的Starter启动器</title>
    <url>/2022/08/26/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/002-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AE%80%E5%8D%95%E7%9A%84Starter%E5%90%AF%E5%8A%A8%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p>
<span id="more"></span>

<h5 id="1、创建一个Maven工程"><a href="#1、创建一个Maven工程" class="headerlink" title="1、创建一个Maven工程"></a>1、创建一个Maven工程</h5><p><img src="https://img-blog.csdnimg.cn/3c684a5c63f04e1ea8efdada6e934eee.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2、导入Spring的关键必要的依赖"><a href="#2、导入Spring的关键必要的依赖" class="headerlink" title="2、导入Spring的关键必要的依赖"></a>2、导入Spring的关键必要的依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入父依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注解处理器:生成配置元数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3、创建类完成相关逻辑"><a href="#3、创建类完成相关逻辑" class="headerlink" title="3、创建类完成相关逻辑"></a>3、创建类完成相关逻辑</h5><p><img src="https://img-blog.csdnimg.cn/1442da26e63b4dc08dc3440c7ad87464.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4、定义配置类完成Bean的初始化"><a href="#4、定义配置类完成Bean的初始化" class="headerlink" title="4、定义配置类完成Bean的初始化"></a>4、定义配置类完成Bean的初始化</h5><p><img src="https://img-blog.csdnimg.cn/84335c4ddd4d4af994a7fac230841ca8.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HelloWorld <span class="title function_">helloWord</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5、设置spring-factories配置文件"><a href="#5、设置spring-factories配置文件" class="headerlink" title="5、设置spring.factories配置文件"></a>5、设置spring.factories配置文件</h5><p><img src="https://img-blog.csdnimg.cn/4adf7a711567451bb8ebb0459cff19a7.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.only.config.HelloWorldConfiguration</span><br></pre></td></tr></table></figure>

<h5 id="6、打包安装即可-导入依赖即可使用"><a href="#6、打包安装即可-导入依赖即可使用" class="headerlink" title="6、打包安装即可,导入依赖即可使用"></a>6、打包安装即可,导入依赖即可使用</h5><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mvn</span> package	<span class="comment">//打包</span></span><br><span class="line"><span class="keyword">mvn</span> install <span class="comment">//安装依赖</span></span><br></pre></td></tr></table></figure>

<h6 id="在Maven-仓库可以看到这个包"><a href="#在Maven-仓库可以看到这个包" class="headerlink" title="在Maven 仓库可以看到这个包"></a>在Maven 仓库可以看到这个包</h6><p><img src="https://img-blog.csdnimg.cn/5c78eed3fb684cec83e88c354a997b68.png#pic_center" alt="在这里插入图片描述"></p>
<h6 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h6><p><img src="https://img-blog.csdnimg.cn/b21686ba90de483fb017e5e919fa4298.png#pic_center" alt="在这里插入图片描述"></p>
<h6 id="注入依赖"><a href="#注入依赖" class="headerlink" title="注入依赖"></a>注入依赖</h6><p><img src="https://img-blog.csdnimg.cn/330d895b74754645b4c4a0ca4010289e.png#pic_center" alt="在这里插入图片描述"></p>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p><img src="https://img-blog.csdnimg.cn/ba6c99eddd8c419f94033bf4b35e1c61.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>通往java之路</category>
      </categories>
  </entry>
  <entry>
    <title>德鲁克谈【自我管理】史上最受欢迎的文章</title>
    <url>/2022/08/26/%E6%AF%8F%E5%91%A8%E8%BD%AC%E8%BD%BD/001-%E5%BE%B7%E9%B2%81%E5%85%8B%E8%B0%88%E3%80%90%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86%E3%80%91%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在每周转载这个栏目里面，我打算收集一些自己曾经看过的文章，在博客这个平台分享给大家。每周转载这个栏目开设只是偶然性的，我觉得三千世界栏目更新过慢（要追求质量，还得有时间！），所以就萌发了每周转载这个栏目。</p>
<span id="more"></span>

<p><strong>前言</strong>：本文最早刊登于《哈佛商业评论》，是其历史最佳文章之一。作者彼得·德鲁克是现代管理学之父，其著作影响了数代追求创新以及最佳管理实践的学者和企业家们，各类商业管理课程也都深受彼得·德鲁克思想的影响。本文后被收录在德鲁克的著作《21 世纪的管理挑战》中。非常值得一读再读。</p>
<p>我们生活的时代充满着前所未有的机会：<strong>如果你有雄心，又不乏智慧，那么不管你从何处起步，你都可以沿着自己所选择的道路登上事业的顶峰。</strong></p>
<p>不过，有了机会，也就有了责任。今天的公司并不怎么管员工的职业发展；实际上，知识工作者必须成为自己的首席执行官。你应该在公司中开辟自己的天地，知道何时改变发展道路，并在可能长达 50 年的职业生涯中不断努力、干出实绩。</p>
<p>要做好这些事情，你首先要对自己有深刻的认识——不仅清楚自己的优点和缺点，也知道自己是怎样学习新知识和与别人共事的，并且还明白自己的价值观是什么、自己又能在哪些方面做出最大贡献。</p>
<p>因为<strong>只有当所有工作都从自己的长处着眼，你才能真正做到卓尔不群。</strong></p>
<p>历史上的伟人——拿破仑、达芬奇、莫扎特——都很善于自我管理。这在很大程度上也是他们成为伟人的原因。不过，他们属于不可多得的奇才，不但有着不同于常人的天资，而且天生就会管理自己，因而才取得了不同于常人的成就。</p>
<p>而我们当中的大多数人，甚至包括那些还算有点天赋的人，都不得不通过学习来掌握自我管理的技巧。</p>
<p>我们必须学会自我发展，必须知道把自己放在什么样的位置上，才能做出最大的贡献，而且还必须在长达 50 年的职业生涯中保持着高度的警觉和投入。</p>
<p>1</p>
<p><strong>我们的长处是什么</strong></p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/a917c3d3472841509b65b02401932e20.jpeg" alt="img"></p>
<p>多数人都以为他们知道自己擅长什么。其实不然，更多的情况是，人们只知道自己不擅长什么——即便是在这一点上，人们也往往认识不清。</p>
<p>然而，<strong>一个人要有所作为，只能靠发挥自己的长处</strong>，而如果从事自己不太擅长的工作是无法取得成就的，更不用说那些自己根本干不了的事情了。</p>
<p><strong>我们需要知己所长，才能知己所属。</strong></p>
<p><strong>要发现自己的长处，唯一途径就是回馈分析法（feedback analysis）。</strong>每当做出重要决定或采取重要行动时，你都可以事先记录下自己对结果的预期。9 到 12 个月后，再将实际结果与自己的预期比较。</p>
<p>我本人采用这种方法已有 15 到 20 年了，而每次使用都有意外的收获。</p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/7f4bca92ee5f456099480e4e535b1e4e.jpeg" alt="img"></p>
<p>我们只要持之以恒地运用这个简单的方法，就能在较短的时间内，发现自己的长处。在采用这种方法之后，你就能知道，自己正在做（或没有做）的哪些事情会让你的长处无法发挥出来。</p>
<p>同时，你也将看到自己在哪些方面能力不是特别强。最后，你还将了解到自己在哪些方面完全不擅长，做不出成绩来。</p>
<p>根据回馈分析的启示，你需要在几方面采取行动。</p>
<p><strong>首先最重要的是，专注于你的长处，</strong>把自己放到那些能发挥长处的地方。</p>
<p><strong>其次，加强你的长处。</strong>回馈分析会迅速地显示，你在哪些方面需要改善自己的技能或学习新技能。它还将显示你在知识上的差距——这些差距通常都可以弥补。</p>
<p><strong>第三，发现任何由于恃才傲物而造成的偏见和无知，并且加以克服。</strong>有太多的人，尤其是那些术业有专攻的人，往往对其他领域的知识不屑一顾，或者认为聪明的头脑就可取代知识。</p>
<p>比如，很多一流的工程师遇上与人相关的事就束手无策，他们还以此为荣——因为他们觉得，对条理清晰的工程师头脑来说，人太混乱无序了。与此形成鲜明对照的是，人力资源方面的专业人员常常以他们连基本的会计知识或数量分析都一无所知而自傲。</p>
<p>不过，人们要是对这样的无知还沾沾自喜的话，那无异于自取灭亡。其实，<strong>要让自己的长处得到充分发挥，你就应该努力学习新技能、汲取新知识。</strong></p>
<p><strong>另外一点也同样重要——纠正你的不良习惯。</strong>所谓不良习惯，是指那些会影响你的工作成效和工作表现的事情。这样的习惯能很快地在回馈中反映出来。</p>
<p>与此同时，回馈还会反映出哪些问题是由缺乏礼貌造成的。礼貌是一个组织的润滑剂。</p>
<p><strong>礼貌，其实也很简单。****无非是说声「请」和「谢谢」，记住别人的名字，或问候对方家人这样的小事。</strong>许多聪明人，尤其是聪明的年轻人，没有意识到这一点。</p>
<p>如果回馈分析表明某个人只要一遇到需要别人合作的事就屡屡失败，那么很可能就意味着这个人的举止不大得体——也就是缺乏礼貌。</p>
<p><strong>把预期和实际结果进行比较，也会发现自己不能做什么。</strong>我们每个人都有许多一窍不通、毫无天分的领域，在这些领域我们甚至连平庸的水平都达不到。人们，尤其是知识工作者，就不应该试图去完成这些领域的工作和任务。他们应该尽量少把精力浪费在那些不能胜任的领域上，因为从无能到平庸要比从一流到卓越需要人们付出多得多的努力。</p>
<p>2</p>
<p><strong>我们的工作方式是怎样的</strong></p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/2c7c5d4b42e646c087d153a9926356da.jpeg" alt="img"></p>
<p>很少有人知道自己平时是怎样把事情给做成的。</p>
<p>实际上，我们当中的大多数人甚至不知道，不同人有着不同的工作方式和表现。</p>
<p><strong>许多人不是以他们习惯的方式工作，这当然就容易造成无所作为。</strong></p>
<p>对于知识工作者来说，「我的工作方式是怎样的？」可能比「我的长处是什么？」这个问题更加重要。</p>
<p>同一个人的长处一样，一个人的工作方式也是独一无二的，这由人的个性决定。</p>
<p>通常，几个常见的个性特征就决定了一个人的工作方式。</p>
<p>我属于读者型，还是听者型？</p>
<p>首先，<strong>你要搞清楚的是，你是读者型（习惯阅读信息）还是听者型（习惯听取信息）的人。</strong>绝大多数人甚至都不知道还有读者型和听者型之说，而且很少有人既是读者型又是听者型。知道自己属于哪种类型的人更少。</p>
<p>没有几个听者型的人可以通过努力变成合格的读者型——不管是主动还是被动的努力，反之亦然。<strong>不了解你的工作方式不可能发挥才干或取得成就。</strong></p>
<p>3</p>
<p><strong>我们如何学习</strong></p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/df8b460bb3c548ef8e6c53b5d50f3a17.jpeg" alt="img"></p>
<p>要了解一个人的工作方式，需要弄清的第二点是，他是如何学习的。</p>
<p>许多一流的笔杆子都不是好学生——温斯顿·邱吉尔就是一例。</p>
<p>有关这个问题的解释是，<strong>笔头好的人一般不靠听和读来学习，而靠写来学习，这已成了一种规律。</strong>学校不让他们以这种方式学习，所以他们的成绩总是很糟糕。</p>
<p>实际上，<strong>学习大概有六七种不同的方式。</strong></p>
<p><strong>像邱吉尔这样的人靠写来学习，还有些人以详尽的笔记来学习。有些人在实干中学习，另一些人通过听自己讲话学习。</strong></p>
<p>我属于读者型还是听者型？我如何学习？这是你首先要问自己的问题。</p>
<p>但光这些问题显然不够。要想做好自我管理，你还需要问这样的问题：我能与别人合作得好吗？还是喜欢单枪匹马？如果你确实有与别人进行合作的能力，你还得问问这个问题：我在怎样的关系下与他人共事？</p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/dfe0002a710a43cbb3ecba4850b1e56e.jpeg" alt="img"></p>
<p>有些人最适合当部属。</p>
<blockquote>
<p>二战时期美国的大英雄乔治·巴顿将军是一个很好的例子。巴顿是美军的一名高级将领。然而，当有人提议他担任独立指挥官时，美国陆军参谋长、可能也是美国历史上最成功的伯乐，乔治·马歇尔将军说：「巴顿是美国陆军造就的最优秀的部下，但是，他会成为最差劲的司令官。」</p>
</blockquote>
<p><strong>一些人作为团队成员工作最出色。另一些人单独工作最出色。一些人当教练和导师特别有天赋，另一些人却没能力做导师。</strong></p>
<p>另一个关键的问题是，我如何才能取得成果——是作为决策者还是作为顾问？许多人做顾问时的表现会很出色，但是不能够承担决策的负担和压力。与此相反，也有许多人需要顾问来迫使他们思考，随后他们才能做出决定，接着迅速、自信和大胆地执行决定。</p>
<p>顺便说一下，<strong>一个组织的二号人物在提升到一号职位时常常失败</strong>，也正是因为这个原因。最高职位需要一个决策者，而一个强势的决策者常常把其信赖的人放在二号位置，当他的顾问。</p>
<p>其他有助于认识自我的重要问题包括：</p>
<blockquote>
<p>我是在压力下表现出色，还是适应一种按部就班、可预测的工作环境？</p>
<p>我是在一个大公司还是在一个小公司中工作表现最佳？</p>
</blockquote>
<p>我不止一次地看到有些人在大公司中十分成功，换到小公司中则很不顺利。</p>
<p>反过来也是如此。</p>
<p>下面这个结论值得我们反复强调：<strong>不要试图改变自我，因为这样你不大可能成功。但是，你****应该努力改进你的工作方式。另外，不要从事你干不了或干不好的工作。</strong></p>
<p>4</p>
<p><strong>我们的价值观是什么</strong></p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/92a9c64f448d4d8db8c5eb2460f6346e.jpeg" alt="img"></p>
<p>要能够自我管理，你最后不得不问的问题是：我的价值观是什么？这不是一个有关伦理道德的问题。道德准则对每一个人都一样。要对一个人的道德进行测试，方法很简单，我把它称为<strong>「镜子测试」</strong>。</p>
<blockquote>
<p>20 世纪初，德国驻英国大使是当时在伦敦所有大国中最受尊重的一位外交官。显然，他命中注定会承担重任，即使不当本国的总理，至少也要当外交部长。</p>
<p>然而，在 1906 年，他突然辞职，不愿主持外交使团为英国国王爱德华七世举行的晚宴。这位国王是一个臭名昭著的色鬼，并且明确表示他想出席什么样的晚宴。据有关报道，这位德国大使曾说：「我不想早晨刮脸时在镜子里看到一个皮条客。」</p>
</blockquote>
<p>这就是镜子测试。</p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/31b302e81ac5435c916964acd1b03fb1.jpeg" alt="img"></p>
<p>我们所尊从的伦理道德要求你问自己：我每天早晨在镜子里想看到一个什么样的人？在一个组织或一种情形下合乎道德的行为，在另一个组织或另一种情形下也是合乎道德的。但是，道德只是价值体系的一部分——尤其对于一个组织的价值体系来说。</p>
<p><strong>如果一个组织的价值体系不为自己所接受或者与自己的价值观不相容，人们就会备感沮丧，工作效力低下。</strong></p>
<p>一个人的工作方式和他的长处很少发生冲突，相反，两者能产生互补。但是，<strong>一个人的价值观有时会与他的长处发生冲突。</strong></p>
<p>5</p>
<p><strong>我们属于何处</strong></p>
<p>少数人很早就知道他们属于何处。</p>
<p>比如，数学家、音乐家和厨师，通常在四五岁的时候就知道自己会成为数学家、音乐家和厨师了。物理学家通常在十几岁甚至更早的时候就决定了自己的工作生涯。</p>
<p>但是，大多数人，尤其是很有天赋的人，至少要过了二十五六岁才知道他们将身属何处。</p>
<p>然而，到这个时候，他们应该知道上面所谈的三个问题的答案：</p>
<blockquote>
<p>我的长处是什么？</p>
<p>我的工作方式是怎样的？</p>
<p>我的价值观是什么？</p>
</blockquote>
<p>随后，他们就能够并且应该决定自己该向何处投入精力。或者，他们应该能够决定自己不属于何处。</p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/6939ccf2fb6b4dfdbfd76f5f60bd1dd7.jpeg" alt="img"></p>
<p>已经知道自己在大公司里干不好的人，应该学会拒绝在一个大公司中任职。已经知道自己不适合担任决策者的人，应该学会拒绝做决策工作。</p>
<p><strong>成功的事业不是预先规划的，而是在人们知道了自己的长处、工作方式和价值观后，准备把握机遇时水到渠成的。知道自己属于何处，可使一个勤奋、有能力但原本表现平平的普通人，变成出类拔萃的工作者。</strong></p>
<p>6</p>
<p><strong>我该做什么贡献</strong></p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/0c5382aa1d5142d6a6524ae8c13b116d.jpeg" alt="img"></p>
<p>综观人类的发展史，绝大多数人永远都不需要提出这样一个问题：我该做出什么贡献？因为他们该做出什么贡献是由别人告知的，他们的任务或是由工作本身决定的（例如农民或工匠的任务），或是由主人决定的（例如佣人的任务）。</p>
<p>对于知识工作者来说，他们不得不提出一个以前从来没有提出过的问题：我的贡献应该是什么？</p>
<p>要回答这个问题，他们必须考虑三个不同的因素：</p>
<blockquote>
<p>当前形势的要求是什么？</p>
<p>鉴于我的长处、我的工作方式以及我的价值观，我怎样才能对需要完成的任务做出最大贡献？</p>
<p>最后，必须取得什么结果才能产生重要影响？</p>
</blockquote>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/35696f4e893d47e9986701976a6e3a79.jpeg" alt="img"></p>
<p>一般来说，<strong>一项计划的时间跨度如果超过了 18 个月，就很难做到明确和具体。</strong></p>
<p>因此，在多数情况下我们应该提出的问题是：</p>
<blockquote>
<p>我在哪些方面能取得将在今后一年半内见效的结果？</p>
<p>如何取得这样的结果？</p>
</blockquote>
<p>回答这个问题时必须对几个方面进行权衡。</p>
<p>首先，<strong>这些结果应该是比较难实现的，要有「张力」 （stretching）。</strong>但这些结果也应该是能力所及的。</p>
<p>其次，<strong>这些结果应该富有意义，要能够产生一定影响。</strong></p>
<p>最后，结果应该明显可见，如果可能的话，还应当能够衡量。<strong>确定了要实现的结****果之后，接着就可以制订行动方针：做什么，从何处着手，如何开始，目标是什么，在多长时间内完成。</strong></p>
<p>7</p>
<p><strong>对人际关系负责</strong></p>
<p>除了少数伟大的艺术家、科学家和运动员，很少有人是靠自己单枪匹马而取得成果的。<strong>不管是组织成员还是个体职业者，大多数人都要与别人进行合作，并且是有效的合作。</strong>要实现自我管理，你需要对自己的人际关系负起责任。这包括两部分内容。</p>
<p><strong>首先要接受别人是和你一样的个体这个事实。</strong></p>
<p>他们有自己的长处，自己的做事方式和价值观。因此，<strong>要想卓有成效，你就必须知道共事者的长处、工作方式和价值观。</strong></p>
<p>这个道理听起来让人很容易明白，但是没有几个人真正会去注意。</p>
<p>一个习惯于写报告的人就是个典型的例子——他在第一份工作时就培养起写报告的习惯，因为他的老板是一个读者型的人，而即使下一个老板是个听者型，此人也会继续写着那肯定没有任何结果的报告。这位老板因此肯定会认为这个员工愚蠢、无能、懒惰，肯定干不好工作。但是，如果这个员工事先研究过新老板的情况，并分析过这位老板的工作方式，这种情况本来可以避免。</p>
<p><strong>老板既不是组织结构图上的一个头衔，也不是一个「职能」。他们是有个性的人，他们有权以自己最得心应手的方式来工作。与他们共事的人有责任观察他们，了解他们的工作方式，并做出相应的自我调整，去适应老板最有效的工作方式。</strong></p>
<p>事实上，这就是「管理」上司的秘诀。</p>
<p>这种方法适用于所有与你共事的人。至于工作方式，人各有别。提高效力的第一个秘诀是了解跟你合作和你要依赖的人，以利用他们的长处、工作方式和价值观。工作关系应当既以工作为基础，也以人为基础。</p>
<p><strong>人际关系责任的第二部分内容是沟通责任。</strong></p>
<p>在我或是其他人开始给一个组织做咨询时，我们听到的第一件事都与个性冲突有关。其中大部分冲突都是因为：人们不知道别人在做什么，他们又是采取怎样的工作方式，专注于做出什么样的贡献以及期望得到怎样的结果。而这些人不了解情况的原因是，他们没有去问，结果也就不得而知。</p>
<p>即使一些人懂得负起人际关系责任的重要性，他们和同事的交流也往往不够。他们总是有所顾虑，怕别人把自己看成是一个冒昧、愚蠢、爱打听的人。他们错了。</p>
<p>因为我们看到，每当有人找到他的同事说「这是我所擅长的工作。这是我的做事方式。这是我的价值观。这是我计划做出的贡献和应当取得的成果」，这个人总会得到如此回答：「这太有帮助了，可你为什么不早点告诉我？」</p>
<p>如果一个人继续问道：「那么，关于你的长处、你的工作方式、你的价值观以及你计划做出的贡献，我需要知道什么？」他也会得到类似的答复——据我的经验，无一例外。</p>
<p>事实上，知识工作者应该向与他们共事的每一个人，不管是下属、上司、同事还是团队成员，都发出这样的疑问。</p>
<p><strong>组织已不再建立在强权的基础上，而是建立在信任的基础上。</strong>人与人之间相互信任，不一定意味着他们彼此喜欢对方，而是意味着彼此了解。<strong>因此，人们绝对有必要对自己的人际关系负责****。</strong></p>
<p>这是一种义务。不管一个人是公司的一名成员，还是公司的顾问、供应商或经销商，他都需要对他的所有共事者负起这种责任。所谓共事者，是指在工作上他所依赖的同事以及依赖他的同事。</p>
<p>8</p>
<p><strong>管理后半生</strong></p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/33e6344cbc9f4cd393a0f727949091ae.jpeg" alt="img"></p>
<p>我们听到了许多有关经理人中年危机的谈论，「厌倦」这个词在其中频频出现。</p>
<p>45 岁时，多数经理人的职业生涯达到了顶峰。但是他们学不到新东西，也没有什么新贡献，从工作中得不到挑战，因而也谈不上满足感。在他们面前，还有 20 到 25 年的职业道路要走。这就是为什么经理人在进行自我管理后，越来越多地开始发展第二职业的原因。</p>
<p>发展第二职业有三种方式：</p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180519/8f00c5c2d0284fa3875a696105ea4908.jpeg" alt="img"></p>
<p><strong>第一种是完全投身于新工作。</strong></p>
<p>这常常只需要从一种组织转到另一种组织。</p>
<p>例如，一家大公司某事业部的会计师成为一家中型医院的财务总监。</p>
<p>但是也有越来越多的人转入完全不同的职业。还有许多人在第一份职业中取得的成功有限，于是改行从事第二职业。这样的人有很多技能，他们也知道该如何工作。</p>
<p><strong>为后半生做准备的第二种方式是，发展一个平行的职业。</strong></p>
<p>许多人的第一职业十分成功，他们还会继续从事原有工作。除此之外，他们会开创一项平行的工作，通常是在非营利机构。</p>
<p><strong>最后一种方法是社会创业。</strong></p>
<p>社会创业者通常是在第一职业中非常成功的人士。他们都热爱自己的工作，但是这种工作对他们已经不再有挑战性。</p>
<p>他们虽然继续做着原来的工作，但在这份工作上花的时间越来越少。他们同时开创了另一项事业，通常是非营利性活动。</p>
<p>管理好自己后半生的人可能总是少数。多数人可能数着年头一年一年过去，直至退休。<strong>但正是这些少数人，这些把漫长的工作寿命看做是自己和社会之机会的人，才会成为领袖和模范。</strong></p>
<p><strong>管理好后半生有一个先决条件：你必须早在你进入后半生之前就开始行动。</strong>当 30 年前人们首次认识到工作寿命正在迅速延长时，许多观察家（包括我自己）认为，退休人员会越来越多地成为非营利机构的志愿者。可是，这种情况并没有发生。一个人如果不在 40 岁之前就开始做志愿者，那他 60 岁之后也不会去做志愿者。</p>
<p>同样，我认识的所有社会创业者，都是早在他们原有的事业达到顶峰之前就开始从事他们的第二事业。</p>
<p><strong>发展第二兴趣还有一个原因：任何人都不能指望在生活或工作中很长时间都不遭遇严重挫折。</strong>在这样的时刻，第二兴趣——不仅仅是业余爱好——可能发挥重要作用。</p>
<p><strong>在一个崇尚成功的社会里，拥有各种选择变得越来越重要。</strong>在知识社会里，我们期望每一个人都能取得成功。这显然是不可能的。</p>
<p>对许多人来说，能避免失败就行。可是有成功的地方，就会有失败。因此，有一个能够让人们做出贡献、发挥影响力或成为「大人物」的领域，这不仅对个人十分重要，对个人的家庭也同样重要。</p>
<p>这意味着人们需要找到一个能够有机会成为领袖、受到尊重、取得成功的第二领域——可能是第二份职业。</p>
<p>自我管理中面临的挑战看上去比较明显。但自我管理需要我们做出以前从未做过的事情。自我管理需要每一个知识工作者在思想和行动上都要成为自己的首席执行官。</p>
<p>更进一步来看，这样的转变——从一切听从别人吩咐的体力劳动者到不得不自我管理的知识工作者——也使得社会结构发生了深刻变化。</p>
<p>历史上每一个社会，甚至是个人主义倾向最强的社会，都认为两件事情理所当然（即使只是下意识的）：</p>
<blockquote>
<p>第一，组织比员工更长寿；</p>
<p>第二，大多数人从不挪地方。</p>
</blockquote>
<p>如今，情况恰恰相反。<strong>知识工作者的寿命超过了组织寿命，而且他们来去自如。</strong></p>
<p>于是，人们对自我管理的需要在人类事务中掀起了一场革命。</p>
]]></content>
      <categories>
        <category>每周转载</category>
      </categories>
      <tags>
        <tag>每周转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux搭建java环境SOP</title>
    <url>/2022/08/25/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/004-Linux%E6%90%AD%E5%BB%BAjava%E7%8E%AF%E5%A2%83SOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<ul>
<li><p>软件安装</p>
</li>
<li><p>项目部署</p>
</li>
</ul>
<h2 id="1-防火墙配置【重点】"><a href="#1-防火墙配置【重点】" class="headerlink" title="1. 防火墙配置【重点】"></a>1. 防火墙配置【重点】</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol>
<li>防火墙的管理命令</li>
<li>开放端口允许外部连接，移除端口不允许外部连接</li>
</ol>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>linux默认防火墙是开启，而且所有的端口对外都是不可访问的。这么做的目的：安全。 问题：比如我等会在linux上安装tomcat的软件的。 tomcat软件需要使用8080端口。但是由于端口对外都是不可访问的，所以windows没法访问linux的tomcat。</p>
<p>&#x3D;&#x3D;解决上述问题的方案有两种：&#x3D;&#x3D;</p>
<ol>
<li><p>直接关闭防火墙，释放所有的端口，允许外界去访问全部的端口 ， 方便省心，弊端不安全(开发阶段)</p>
</li>
<li><p>只开放8080端口。开放指定的端口  (生产阶段，项目上线)</p>
</li>
</ol>
<p>防火墙类似于一个关卡检查人员，当你访问其他人的电脑，或者其他人访问你的电脑，都要进行拦截并进行处理，有的阻止，有的放行，有的转发。默认情况下防火墙在开机以后就自动启动了。</p>
<h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>操作服务命令： systemctl  动作命令    服务的名称</p>
<p>防火墙服务</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>systemctl start   firewalld</td>
<td>开启</td>
</tr>
<tr>
<td>systemctl stop   firewalld</td>
<td>关闭</td>
</tr>
<tr>
<td>systemctl   enable firewalld</td>
<td>开机自启动&#x3D;&#x3D;(默认状态)&#x3D;&#x3D;</td>
</tr>
<tr>
<td>systemctl   disable firewalld</td>
<td>关闭开机自启</td>
</tr>
<tr>
<td>systemctl   status firewalld</td>
<td>查看当前防火墙状态</td>
</tr>
</tbody></table>
<h3 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h3><ol>
<li>确认当前是管理员的账户，查看防火墙当前的状态</li>
<li>关闭防火墙，再查看防火墙的状态</li>
<li>再次开启防火墙，查看防火墙的状态</li>
</ol>
<h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><p><img src="https://img-blog.csdnimg.cn/ef01ab4467c844c5b6b871177bd8a4f2.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="firewall-cmd"><a href="#firewall-cmd" class="headerlink" title="firewall-cmd"></a><font color="red">firewall-cmd</font></h3><p> 外网或内网需要连接到当前系统内的程序进行操作，需要linux系统开放程序端口，否则无法访问。</p>
<table>
<thead>
<tr>
<th>firewall-cmd</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td>–zone&#x3D;public</td>
<td>开放哪个网络，默认是public</td>
</tr>
<tr>
<td>–add-port&#x3D;端口&#x2F;tcp</td>
<td>添加到防火墙中端口号，对外是打开的</td>
</tr>
<tr>
<td>–remove-port&#x3D;端口&#x2F;tcp</td>
<td>从防火墙的规则中删除端口号</td>
</tr>
<tr>
<td>–permanent</td>
<td>永久添加规则</td>
</tr>
<tr>
<td>–list-all</td>
<td>显示现有的规则，展示所有开放端口</td>
</tr>
<tr>
<td>–reload</td>
<td>重新加载规则，让新加的端口号起作用，重启防火墙的服务 systemctl restart firewalld</td>
</tr>
</tbody></table>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>永久开放443端口，添加到公开区域，允许外部连接</li>
<li>重新加载防火墙的规则</li>
<li>显示所有打开的端口号 </li>
<li>从公共区域中，永久移除443端口，不允许外部连接</li>
<li>重新加载防火墙规则</li>
<li>显示打开的端口号</li>
</ol>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/b04dcab908fa4207bbe090cee7edc9ba.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/d4ee1ca87ae3442e8ea628de02a85b53.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>说说下面代码的作用</p>
<ol>
<li><p>关闭、开启防火墙、设置自启、关闭自启服务命令？</p>
<blockquote>
<p>systemctl  stop|start|enable|disable   firewalld</p>
</blockquote>
</li>
<li><p>开放(添加)指定端口命令</p>
<blockquote>
<p>firewall-cmd  –zone&#x3D;public –add-port&#x3D;端口&#x2F;tcp   –permanent</p>
</blockquote>
</li>
<li><p>删除开放端口命令：</p>
<blockquote>
<p>firewall-cmd  –zone&#x3D;public –remove-port&#x3D;端口&#x2F;tcp   –permanent</p>
</blockquote>
</li>
<li><p>重新加载，展示列表</p>
<blockquote>
<p>firewall-cmd –reload</p>
<p>firewall-cmd –list-all</p>
</blockquote>
</li>
</ol>
<h2 id="2-软件安装"><a href="#2-软件安装" class="headerlink" title="2. 软件安装"></a>2. 软件安装</h2><h3 id="2-1-软件安装方式"><a href="#2-1-软件安装方式" class="headerlink" title="2.1 软件安装方式"></a>2.1 软件安装方式</h3><p>在Linux系统中，安装软件的方式主要有四种，这四种安装方式的特点如下：</p>
<table>
<thead>
<tr>
<th>安装方式</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>二进制发布包安装</td>
<td>软件已经针对具体平台编译打包发布，只要解压，修改配置即可 , tomcat\jdk</td>
</tr>
<tr>
<td>rpm安装（ 软件管家）</td>
<td>软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，&#x3D;&#x3D;不能自行解决库依赖问题&#x3D;&#x3D;</td>
</tr>
<tr>
<td>yum安装</td>
<td>一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题(安装过程需要联网)</td>
</tr>
<tr>
<td>源码编译安装</td>
<td>软件以源码工程的形式发布，需要自己编译打包 , redis</td>
</tr>
</tbody></table>
<h3 id="2-2-安装JDK"><a href="#2-2-安装JDK" class="headerlink" title="2.2 安装JDK"></a>2.2 安装JDK</h3><p>上述我们介绍了Linux系统软件安装的四种形式，接下来我们就通过第一种(二进制发布包)形式来安装JDK。 JDK对应的二进制发布包，在课程资料中已经提供，如下：<img src="https://img-blog.csdnimg.cn/87d2177dd1b54950a1b6b72e96c3736a.png#pic_center" alt="在这里插入图片描述"></p>
<p>JDK具体安装步骤如下： </p>
<p><strong>1). 上传安装包</strong></p>
<h4 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h4><p>在Linux下安装JDK </p>
<h4 id="JDK安装步骤"><a href="#JDK安装步骤" class="headerlink" title="JDK安装步骤"></a>JDK安装步骤</h4><ol>
<li><p>在&#x2F;下创建soft目录，将提供的”软件”复制到Linux的soft目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /soft</span><br><span class="line"><span class="built_in">cd</span> /soft</span><br></pre></td></tr></table></figure>


</li>
<li><p>进入“&#x2F;soft”目录，解压jdk到指定目录&#x2F;usr&#x2F;local下</p>
</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">tar -xvf jdk-<span class="number">8</span>u221-linux-x64.tar.gz -C <span class="regexp">/usr/</span>local/</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>查看解压后的目录,目录中有jdk1.8.0_221为jdk解压的目录</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/8eea1a75e4554727b62d05462617f349.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="4">
<li>编辑&#x2F;etc&#x2F;profile文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>



<ol>
<li><p>配置jdk环境变量，打开&#x2F;etc&#x2F;profile配置文件，将下面配置拷贝进去，注：放在文件的最后面。</p>
<p>export命令用于将shell变量输出为环境变量</p>
</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#set java environment</span></span><br><span class="line"><span class="attribute">JAVA_HOME</span>=/usr/local/jdk1.8.0_221</span><br><span class="line"><span class="attribute">PATH</span>=<span class="variable">$JAVA_HOME</span>/bin:$PATH</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME PATH</span><br></pre></td></tr></table></figure>

<p> 命令1：vim &#x2F;etc&#x2F;profile</p>
<p> 命令2：在文件末尾处，输入o(表示在光标下插入新行)，复制上面的环境变量配置粘贴，并写入保存</p>
<ol start="5">
<li>重新加载&#x2F;etc&#x2F;profile配置文件</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>判断JDK是否安装成功</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/7458cdf8c5be4bc8b0ea31817f16c78b.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="JDK安装小结"><a href="#JDK安装小结" class="headerlink" title="JDK安装小结"></a>JDK安装小结</h4><ol>
<li>解压</li>
<li>配置环境变量</li>
<li>source 命令重新在家 &#x2F;etc&#x2F;profile</li>
</ol>
<h3 id="2-3-安装Tomcat"><a href="#2-3-安装Tomcat" class="headerlink" title="2.3 安装Tomcat"></a>2.3 安装Tomcat</h3><h4 id="2-3-1-Tomcat安装"><a href="#2-3-1-Tomcat安装" class="headerlink" title="2.3.1 Tomcat安装"></a>2.3.1 Tomcat安装</h4><h4 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h4><p>在Linux上安装Tomcat</p>
<h4 id="安装Tomcat的步骤"><a href="#安装Tomcat的步骤" class="headerlink" title="安装Tomcat的步骤"></a>安装Tomcat的步骤</h4><ol>
<li>进入soft文件夹，解压Tomcat到&#x2F;usr&#x2F;local下</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -xvf apache-tomcat-<span class="number">8</span>.<span class="number">5</span>.<span class="number">51</span>.tar.gz  -C /usr/local</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>开放Linux的对外访问的端口8080</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=8080/tcp --permanent</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启防火墙</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl restart firewalld</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>进入&#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.51&#x2F;bin目录，启动Tomcat</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/b08154217fca4a9999af206486224b41.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="5">
<li>在Windows下打开浏览器访问Linux的8080端口</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/1ebaa8df9e2b4af48af7d4d4f0eff936.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="6">
<li>进入bin目录下，关闭服务器。关闭服务器以后，浏览器不能再访问。</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/d8c99f6ceb9f49b0848f2968f4908c21.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-3-4-停止Tomcat"><a href="#2-3-4-停止Tomcat" class="headerlink" title="2.3.4 停止Tomcat"></a>2.3.4 停止Tomcat</h4><p>在Linux系统中，停止Tomcat服务的方式主要有两种： </p>
<p><strong>1). 运行Tomcat提供的脚本文件</strong></p>
<p>在Tomcat安装目录下有一个bin目录，这个目录中存放的是tomcat的运行脚本文件，其中有一个脚本就是用于停止tomcat服务的。</p>
<p><img src="https://img-blog.csdnimg.cn/32620420f0b643dba59a733414d08d17.png#pic_center" alt="在这里插入图片描述"></p>
<p>我们可以切换到bin目录，并执行如下指令，来停止Tomcat服务：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sh</span> shutdown.<span class="keyword">sh</span></span><br><span class="line">./shutdown.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>



<p><strong>2). 结束Tomcat进程</strong></p>
<p>我们可以先通过 <code>ps -ef|grep tomcat</code> 指令查看tomcat进程的信息，从进程信息中获取tomcat服务的进程号。然后通过kill -9 的形式，来杀死系统进程。</p>
<p><img src="https://img-blog.csdnimg.cn/26e4f74eeca94ba78b2628b57d4174d4.png#pic_center" alt="在这里插入图片描述"></p>
<p>通过上述的指令，我们可以获取到tomcat的进程号为 79947。接下来，我们就可以通过指令 ，来杀死tomcat的进程 ：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kill</span> -<span class="number">9</span> <span class="number">79947</span> </span><br></pre></td></tr></table></figure>

<p>执行完上述指令之后，我们再访问Linux系统中的Tomcat，就访问不到了。</p>
<blockquote>
<p>注意：</p>
<p>​	kill命令是Linux提供的用于结束进程的命令，-9表示强制结束</p>
</blockquote>
<blockquote>
<p>注意 ： </p>
<p>​	虽然上述讲解的两种方式，都可以停止Tomcat服务，但是推荐使用第一种方式(.&#x2F;shutdown.sh)执行脚本来关闭tomcat服务，如果通过第一种方式停止不了tomcat了，这个时候，我们可以考虑使用第二种方式，强制杀死进程。</p>
</blockquote>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>​	<strong>tomcat安装步骤：</strong></p>
<pre><code>    1. 解压
      2. 进入bin目录使用./startup.sh启动
                    3. 开放8080端口
</code></pre>
<h3 id="2-4-安装MySQL"><a href="#2-4-安装MySQL" class="headerlink" title="2.4 安装MySQL"></a>2.4 安装MySQL</h3><h4 id="2-4-1-MySQL安装"><a href="#2-4-1-MySQL安装" class="headerlink" title="2.4.1 MySQL安装"></a>2.4.1 MySQL安装</h4><p>对于MySQL数据库的安装，我们将要使用前面讲解的第二种安装方式rpm进行安装。那么首先我们先了解一下什么rpm？</p>
<blockquote>
<p><strong>RPM：</strong>全称为 Red-Hat Package Manager，RPM软件包管理器（相当于windows的软件管家），是红帽Linux用于管理和安装软件的工具。</p>
</blockquote>
<p>我们要通过rpm，进行MySQL数据库的安装，主要的步骤如下：</p>
<p><strong>1). 检测当前系统是否安装过MySQL相关数据库</strong></p>
<p>需要通过rpm相关指令，来查询当前系统中是否存在已安装的mysql软件包，执行指令如下：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span>							查询当前系统中安装的所有软件</span><br><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> mysql			查询当前系统中安装的名称带mysql的软件</span><br><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> mariadb			查询当前系统中安装的名称带mariadb的软件</span><br></pre></td></tr></table></figure>

<p>通过rpm -qa 查询到系统通过rpm安装的所有软件，太多了，不方便查看，所以我们可以通过管道符 | 配合着grep进行过滤查询。</p>
<p><img src="https://img-blog.csdnimg.cn/bec5196b2c214db09f0386203dc524ba.png#pic_center" alt="在这里插入图片描述"></p>
<p>通过查询，我们发现在当前系统中存在mariadb数据库，是CentOS7中自带的，而这个数据库和MySQL数据库是冲突的，所以要想保证MySQL成功安装，需要卸载mariadb数据库。</p>
<p><strong>2). 卸载现有的MySQL数据库</strong></p>
<p>在rpm中，卸载软件的语法为： </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">rpm -e <span class="comment">--nodeps  软件名称</span></span><br></pre></td></tr></table></figure>

<p>那么，我们就可以通过指令，卸载 mariadb，具体指令为： </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rpm</span> -e --nodeps mariadb-libs-<span class="number">5</span>.<span class="number">5</span>.<span class="number">56</span>-<span class="number">2</span>.el7.x86_64</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/4e7b556b9a1048a0b4fc89a49c14063a.png#pic_center" alt="在这里插入图片描述"></p>
<p>我们看到执行完毕之后， 再次查询 mariadb，就查不到了，因为已经被成功卸载了。</p>
<p><strong>3). 将资料中提供的MySQL安装包上传到Linux并解压</strong></p>
<p>A. 上传MySQL安装包</p>
<p>在课程资料中，提供的有MySQL的安装包 ，我们需要将该安装包上传到Linux系统的根目录 &#x2F; 下面。<br><img src="https://img-blog.csdnimg.cn/2587e1f7e1214d2eb7c732b0cdbeca75.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/539a6ebe86f44dce849f7a1bff9aa100.png#pic_center" alt="在这里插入图片描述"></p>
<p>B. 解压到&#x2F;usr&#x2F;local&#x2F;mysql</p>
<p>执行如下指令: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /soft</span><br><span class="line"><span class="built_in">mkdir</span> mysql</span><br><span class="line">tar -xvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz  -C ./mysql</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /soft/mysql</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/27273b2771f24e148dfb7534af63c2cc.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>4). 安装顺序安装rpm安装包  (要求一条一条命令执行)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">yum install net-tools</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>



<blockquote>
<p>说明: </p>
<ul>
<li>因为rpm安装方式，是不会自动处理依赖关系的，需要我们自己处理，所以对于上面的rpm包的安装顺序不能随意修改。</li>
<li>安装过程中提示缺少net-tools依赖，使用yum安装(yum是一种在线安装方式，需要保证联网)</li>
<li>可以通过指令(yum update)升级现有软件及系统内核</li>
</ul>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/d8c5abea902a47fd9cb6de7b4bca2597.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="1-4-2-MySQL启动"><a href="#1-4-2-MySQL启动" class="headerlink" title="1.4.2 MySQL启动"></a>1.4.2 MySQL启动</h4><p>MySQL安装完成之后，会自动注册为系统的服务，服务名为mysqld。那么，我们就可以通过systemctl指令来查看mysql的状态、启动mysql、停止mysql。</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="params">system</span>ctl status mysqld		查看mysql服务状态</span><br><span class="line"><span class="params">system</span>ctl start mysqld		启动mysql服务</span><br><span class="line"><span class="params">system</span>ctl stop mysqld		停止mysql服务</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/30efbcf3df8546c0b347175f5db0a0db.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>说明： </p>
<p>​	可以设置开机时启动mysql服务，避免每次开机启动mysql。执行如下指令： </p>
<p>​	systemctl enable mysqld</p>
</blockquote>
<p>我们可以通过如下方式，来判定mysql是否启动：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">ps</span> –ef | <span class="keyword">grep</span> mysql				查看mysql进程</span><br></pre></td></tr></table></figure>

<blockquote>
<p>​	<font color='red'>B. ps命令用于查看Linux中的进程数据。</font></p>
</blockquote>
<h4 id="1-4-3-MySQL登录"><a href="#1-4-3-MySQL登录" class="headerlink" title="1.4.3 MySQL登录"></a>1.4.3 MySQL登录</h4><h5 id="1-4-3-1-查阅临时密码"><a href="#1-4-3-1-查阅临时密码" class="headerlink" title="1.4.3.1 查阅临时密码"></a>1.4.3.1 查阅临时密码</h5><p>MySQL启动起来之后，我们就可以测试一下登录操作，但是我们要想登录MySQL，需要一个访问密码，而刚才在安装MySQL的过程中，并没有看到让我们设置访问密码，那这个访问密码是多少呢? 那实际上，对于rpm安装的mysql，在mysql第一次启动时，会自动帮我们生成root用户的访问密码，并且输出在mysql的日志文件 &#x2F;var&#x2F;log&#x2F;mysqld.log中，我们可以查看这份日志文件，从而获取到访问密码。</p>
<p>可以执行如下指令：</p>
<p>1). cat &#x2F;var&#x2F;log&#x2F;mysqld.log</p>
<p><img src="https://img-blog.csdnimg.cn/a588797069934d40945cbc6b8a95e238.png#pic_center" alt="在这里插入图片描述"></p>
<p>这种方式，可以看到所有的日志数据，文件比较大时，很不方便查看数据。我们可以通过管道符 | 配合grep来对数据进行过滤。</p>
<p>2). cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep password</p>
<p>我们可以通过上述指令，查询日志文件内容中包含password的行信息。</p>
<p><img src="https://img-blog.csdnimg.cn/23ebb1075cd64beabce617b6d5eb6bd2.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="1-4-3-2-登录MySQL"><a href="#1-4-3-2-登录MySQL" class="headerlink" title="1.4.3.2 登录MySQL"></a>1.4.3.2 登录MySQL</h5><p>获取到root用户的临时密码之后，我们就可以登录mysql数据库，修改root的密码，为root设置一个新的密码。并且我们还需要开启root用户远程访问该数据库的权限，这样的话，我们就可以在windows上来访问这台MySQL数据库。</p>
<p>执行如下指令： </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">①. 登录mysql（复制日志中的临时密码登录）</span><br><span class="line">	mysql -uroot -p</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">②. 修改密码</span><br><span class="line">    <span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">4</span>;			设置密码长度最低位数</span><br><span class="line">    <span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=LOW;		设置密码安全等级低，便于密码可以修改成root</span><br><span class="line">    <span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">&#x27;root&#x27;</span>);				设置密码为root</span><br><span class="line">    </span><br><span class="line">③. 开启访问权限(允许外界可以远程连接mysql，默认只能是本机连接)</span><br><span class="line">    <span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    flush <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>

<p>操作完上述的指令之后，数据库root用户的密码以及远程访问我们就配置好了，接下来，可以执行exit退出mysql，再次通过新的密码进行登录。</p>
<p><img src="https://img-blog.csdnimg.cn/01d504c6552e411aa8d2b9cfa10406fb.png#pic_center" alt="在这里插入图片描述"></p>
<p>&#x3D;&#x3D;注意： 要想在windows上能够访问MySQL，还需要开放防火墙的3306端口，执行如下指令：&#x3D;&#x3D;</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">zone=public</span> <span class="literal">--</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=3306/tcp</span> <span class="literal">--</span><span class="comment">permanent</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">reload</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/54bd439718624b2a93221408216adc6a.png#pic_center" alt="在这里插入图片描述"></p>
<p>当然我们也可以使用安装在windows系统中的sqlyog或者Navicat来远程连接linux上的MySQL。</p>
<p><img src="https://img-blog.csdnimg.cn/b0eedc38ba6340778068cad8b5ef2d35.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><h5 id="安装mysql的步骤小结："><a href="#安装mysql的步骤小结：" class="headerlink" title="安装mysql的步骤小结："></a>安装mysql的步骤小结：</h5><ol>
<li><p>卸载原本的mysql</p>
<ol start="2">
<li>解压</li>
<li>安装</li>
<li>开启mysqld的服务</li>
<li>登录，查找你初始化密码&#x2F;var&#x2F;log&#x2F;mysqld.log</li>
<li>修改密码</li>
<li>授权允许root用户在任意地址都可以登录</li>
<li>开放3306端口</li>
<li>使用windows的小海豚链接。</li>
</ol>
</li>
</ol>
<h2 id="3-项目部署"><a href="#3-项目部署" class="headerlink" title="3. 项目部署"></a>3. 项目部署</h2><p>之前我们讲解Linux操作系统时，就提到，我们服务端开发工程师学习Linux系统的目的就是将来我们开发的项目绝大部分情况下都需要部署在Linux系统中。那么在本章节，我们将通过两种方式，来演示项目部署，分别是：手动部署项目 和 基于shell脚本自动部署。</p>
<h3 id="3-1-手动部署项目"><a href="#3-1-手动部署项目" class="headerlink" title="3.1 手动部署项目"></a>3.1 手动部署项目</h3><p><strong>1). 在IDEA中开发SpringBoot项目并打成jar包</strong></p>
<p>项目是一个很简单的springboot项目(可以自己开发一个，也可以直接导入资料中提供的)，结构如下： </p>
<p><img src="https://img-blog.csdnimg.cn/0a9297d740844909b8a6f0e454e91252.png#pic_center" alt="在这里插入图片描述"></p>
<p>可以在本地的idea中先启动当前的demo工程，然后访问一下，看看工程是否正常访问。</p>
<p><img src="https://img-blog.csdnimg.cn/122466f9a4e54b2db55b426106f17637.png#pic_center" alt="在这里插入图片描述"></p>
<p>执行package指令，进行打包操作，将当前的springboot项目，打成一个jar包。 </p>
<p><strong>操作步骤</strong></p>
<ul>
<li><p>第一步: 引入Spring Boot打包插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--指定jar的名字--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第二步: 执行命令</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理、打包 跳过测试</span></span><br><span class="line"><span class="attr">mvn</span> <span class="string">clean package -Dmaven.test.skip=true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第三步: 运行</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">java</span> <span class="string">-jar xxx.jar</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第四步: 浏览器访问 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p>
</li>
</ul>
<p><strong>2). 将jar包上传到Linux服务器</strong></p>
<p>通过 rz 指令，将打好的jar包上传至Linux服务器的 &#x2F;usr&#x2F;local&#x2F;app 目录下。 先执行指令创建app目录。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">A. 在/usr/<span class="keyword">local</span>下创建目录<span class="keyword">app</span></span><br><span class="line"><span class="keyword">mkdir</span> /usr/<span class="keyword">local</span>/<span class="keyword">app</span></span><br><span class="line"></span><br><span class="line">B. 切换到<span class="keyword">app</span>目录下</span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/<span class="keyword">app</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/248b1278807c44c39d1609a3fbf67def.png#pic_center" alt="在这里插入图片描述"></p>
<p>此时这个jar包就上传到 &#x2F;usr&#x2F;local&#x2F;app 目录了。</p>
<p><img src="https://img-blog.csdnimg.cn/24423f13b7324f6f8b6eb8ab51db6af5.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>3). 启动SpringBoot程序</strong></p>
<p>由于我们的项目已经打成jar包上传上来到Linux服务器，我们只需要运行这个jar包项目就启动起来了，所以只需要执行如下指令即可： </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar helloworld-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/dbeb0be9e8bd4494a60f950203fdc6fa.png#pic_center" alt="在这里插入图片描述"></p>
<p>&#x3D;&#x3D;注意： 由于前面安装的Tomcat在启动时，会占用端口号8080，而当前springboot项目我们没有配置端口号，默认也是8080，所以我们要想启动springboot项目，需要把之前运行的Tomcat停止掉。&#x3D;&#x3D;</p>
<p><strong>4). 检查防火墙，确保8080端口对外开放，访问SpringBoot项目</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">firewall-cmd  <span class="comment">--list-all</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/79e77482aec346189c181746863c0f7e.png#pic_center" alt="在这里插入图片描述"></p>
<p>如果防火墙没有放开8080端口，还需要放开对应的端口号，执行如下指令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=8080/tcp --permanent</span><br></pre></td></tr></table></figure>



<p><strong>5). 访问测试</strong></p>
<p><a href="http://192.168.138.130:8080/hello">http://192.168.138.130:8080/hello</a></p>
<p><img src="https://img-blog.csdnimg.cn/89255793fdd2457780fbfa8f8714fb9a.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>6). 后台运行项目</strong></p>
<p>当前这个demo工程我们已经部署成功了，并且我们也可以访问项目了。但是这个工程目前是存在问题的，就是当前我们项目启动的这个窗口被霸屏占用了，&#x3D;&#x3D;如果我们把这个窗口关闭掉(或ctrl+c)，当前服务也就访问不到了&#x3D;&#x3D;，我们可以试一下。</p>
<p><img src="https://img-blog.csdnimg.cn/a0ce9065d9dc4146b60fc688dffd1010.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/f50520c505d84bfd8c776803270820ba.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>目前程序运行的问题：</strong></p>
<p>A. 线上程序不会采用控制台&#x3D;&#x3D;霸屏&#x3D;&#x3D;的形式运行程序，而是将程序在后台运行</p>
<p>B. 线上程序不会将日志输出到控制台，而是输出到日志文件，而且一旦关闭客户端窗口，我们程序就会关闭</p>
<p><strong>后台运行程序:</strong></p>
<p>要想让我们部署的项目进行后台运行，这个时候我们需要使用到linux中的一个命令 nohup ，接下来，就来介绍一下nohup命令。</p>
<blockquote>
<p><strong>nohup命令：</strong>英文全称 no hang up（不挂断），用于不挂断地运行指定命令，退出终端不会影响程序的运行</p>
<p><strong>语法格式：</strong> nohup Command [ Arg … ] [&amp;]</p>
<p><strong>参数说明：</strong></p>
<p>​	Command：要执行的命令</p>
<p>​	Arg：一些参数，可以指定输出文件</p>
<p>​	&amp;：让命令在后台运行</p>
<p><strong>举例：</strong></p>
<p>​	nohup java -jar boot工程.jar &amp;&gt; hello.log &amp;</p>
<p>​	上述指令的含义为： 后台运行 java -jar 命令，并将日志输出到hello.log文件</p>
</blockquote>
<p>那么经过上面的介绍，我们可以推测中，我们要想让当前部署的项目后台运行，就可以使用下面的指令： </p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">nohup <span class="keyword">java </span>-<span class="keyword">jar </span>helloworld<span class="number">-1</span>.<span class="number">0</span>-SNAPSHOT.<span class="keyword">jar </span>&amp;&gt; hello.log &amp;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/08f9781688f74631ab0437d621fed2b7.png#pic_center" alt="在这里插入图片描述"></p>
<p>这样的话，我们的项目就已经启动成功了，我们可以通过ps指令，查看到系统的进程。</p>
<p><img src="https://img-blog.csdnimg.cn/297896425c134716884ccef5fe1e1a76.png#pic_center" alt="在这里插入图片描述"></p>
<p>接下来，我们再次访问我们的项目，来看看服务是否可用。</p>
<p><img src="https://img-blog.csdnimg.cn/4519053a58e048ddafc108b5174bafe8.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>7). 停止SpringBoot项目</strong></p>
<p><img src="https://img-blog.csdnimg.cn/5078116cd7734420a44b542a751613a9.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul>
<li><p><strong>手动部署需要经历那些步骤</strong></p>
<ul>
<li><p>打包jar</p>
</li>
<li><p>把jar上传到linux</p>
</li>
<li><p>运行jar包。    nohup  java -jar   jar的名称    &amp; &gt;日志文件 &amp;</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-基于Shell脚本自动部署"><a href="#3-2-基于Shell脚本自动部署" class="headerlink" title="3.2 基于Shell脚本自动部署"></a>3.2 基于Shell脚本自动部署</h3><h4 id="3-2-1-介绍"><a href="#3-2-1-介绍" class="headerlink" title="3.2.1 介绍"></a>3.2.1 介绍</h4><p>前面介绍的项目部署是手动部署，也就是部署过程中的每一步操作都需要我们手动操作。接下来，我们需要再讲解一下项目的自动部署，从而来简化项目部署的操作，那么我们先来整体上了解一下项目自动部署的流程及操作步骤。</p>
<p><img src="https://img-blog.csdnimg.cn/d207895177d0486e9ba2166d58b4bac4.png#pic_center" alt="在这里插入图片描述"></p>
<p>操作步骤如下： </p>
<p>1). 在Gitee上创建远程仓库，并将本地的项目代码推送到远程仓库中</p>
<p>2). 在Linux中安装Git,克隆代码</p>
<p>3). 在Linux中安装maven</p>
<p>4). 编写Shell脚本（拉取代码、编译、打包、启动）</p>
<p>5). 为用户授予执行Shell脚本的权限</p>
<p>6). 执行Shell脚本</p>
<h4 id="3-2-2-推送代码到远程"><a href="#3-2-2-推送代码到远程" class="headerlink" title="3.2.2 推送代码到远程"></a>3.2.2 推送代码到远程</h4><p>这部分操作，大家只需要参考之前讲解的Git，来完成helloworld工程代码推送即可。</p>
<p>A. 创建远程仓库</p>
<p><img src="https://img-blog.csdnimg.cn/57ca0a1c59574b36af27a8561b9fc71e.png#pic_center" alt="在这里插入图片描述"></p>
<p>B. 将idea中的代码提交并推送到远程仓库</p>
<p><img src="https://img-blog.csdnimg.cn/e91e077e0a704d549ea8a25c7c1db3de.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/87f9e73593b1436c952474aace9a560c.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="3-2-3-Git操作"><a href="#3-2-3-Git操作" class="headerlink" title="3.2.3 Git操作"></a>3.2.3 Git操作</h4><p>1). Git软件安装（可以省略）</p>
<p>通过yum命令在线安装git，执行如下指令： </p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">list</span> git			列出git安装包</span><br><span class="line">yum <span class="keyword">install</span> git			在线安装git</span><br></pre></td></tr></table></figure>

<p>通过上述指令，安装好git之后，我们就可以通过 git –version去验证git的环境。</p>
<p><img src="https://img-blog.csdnimg.cn/9a79f3a815fe43b882d3c4d8b8a20fe5.png#pic_center" alt="在这里插入图片描述"></p>
<p>2). Git克隆代码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local/</span><br><span class="line">git clone https:<span class="regexp">//gi</span>tee.com<span class="regexp">/ChuanZhiBoKe/</span>helloworld.git</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/1ad99dd17cbc4e238b438a24e4e028da.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="3-2-4-Maven安装"><a href="#3-2-4-Maven安装" class="headerlink" title="3.2.4 Maven安装"></a>3.2.4 Maven安装</h4><p>由于我们的工程是maven工程，我们要想进行项目的编译打包，需要用到maven的指令，所以需要安装maven。具体操作步骤如下：</p>
<p><strong>1). 上传资料中提供的maven的安装包</strong></p>
<p>上传课程资料中的maven安装包到soft目录</p>
<p><strong>2). 解压maven安装包到&#x2F;usr&#x2F;local目录</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> /soft</span><br><span class="line"></span><br><span class="line"><span class="attribute">tar</span> -zxvf apache-maven-<span class="number">3</span>.<span class="number">5</span>.<span class="number">4</span>-bin.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/670b01c762e549ec983f831aa26c5cd5.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>3). 在&#x2F;etc&#x2F;profile配置文件中配置环境变量</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>profile</span><br><span class="line"></span><br><span class="line">修改配置文件，进入到命令模式，按G切换到最后一行，按a<span class="regexp">/i/</span>o进入插入模式，然后在最后加入如下内容 :</span><br><span class="line">JAVA_HOME=<span class="regexp">/usr/</span>local<span class="regexp">/jdk1.8.0_221/</span></span><br><span class="line">MAVEN_HOME=<span class="regexp">/usr/</span>local<span class="regexp">/apache-maven-3.5.4/</span></span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span><span class="regexp">/bin:$PATH:$MAVEN_HOME/</span>bin</span><br><span class="line">export JAVA_HOME PATH MAVEN_HOME</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后按ESC进入到命令模式，输入 :wq 保存并退出</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/fb26c9c177554ccd80911c733165a669.png#pic_center" alt="在这里插入图片描述"></p>
<p>要想让配置的环境变量生效,还需要执行如下指令:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/aec24aeb6c8f48fa953ccc901c668c4d.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>4). 修改maven的settings.xml配置文件,配置本地仓库地址</strong></p>
<p>A. 切换目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/apache-maven-3.5.4/</span>conf</span><br></pre></td></tr></table></figure>



<p>B. 编辑settings.xml配置文件</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">vim settings.<span class="built_in">xml</span></span><br></pre></td></tr></table></figure>

<p>在其中增加如下配置,配置本地仓库地址:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;<span class="regexp">/usr/</span>local<span class="regexp">/repo&lt;/</span>localRepository&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/c7d9cf97973f4f0fbe93139ae6bc45ed.png#pic_center" alt="在这里插入图片描述"></p>
<p>并在settings.xml中的<mirrors>标签中,配置阿里云的私服</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/db5aee2562944a158134a80111b8d433.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="3-2-5-Shell脚本准备"><a href="#3-2-5-Shell脚本准备" class="headerlink" title="3.2.5 Shell脚本准备"></a>3.2.5 Shell脚本准备</h4><blockquote>
<p>Shell脚本（shell script），是一种Linux系统中的脚本程序。使用Shell脚本编程跟 JavaScript、Java编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。 </p>
<p>对于Shell脚本编写不作为本课程重点内容，直接使用课程资料中提供的脚本文件bootStart.sh即可。</p>
</blockquote>
<p>在&#x2F;usr&#x2F;local&#x2F;目录下创建一个目录 sh(mkdir sh)，并将shell脚本上传到该目录下。或者直接在sh目录下创建一个脚本bootStart.sh，然后将资料中的bootStart.sh文件打开,内容拷贝过来即可。</p>
<p><img src="https://img-blog.csdnimg.cn/d2735ac7d46e4d0db39122a3dc359a4d.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>脚本解读:</strong> </p>
<p><img src="https://img-blog.csdnimg.cn/ea1dd5cd56644180b8296faee5606032.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-2-6-Linux权限"><a href="#2-2-6-Linux权限" class="headerlink" title="2.2.6 Linux权限"></a>2.2.6 Linux权限</h4><p>前面我们已经把Shell脚本准备好了，但是Shell脚本要想正常的执行，还需要给Shell脚本分配执行权限。 由于linux系统是一个多用户的操作系统，并且针对每一个用户，Linux会严格的控制操作权限。接下来，我们就需要介绍一下Linux系统的权限控制。</p>
<blockquote>
<p>1). &#x3D;&#x3D;chmod&#x3D;&#x3D;（英文全拼：change mode）命令是控制用户对文件的权限的命令</p>
<p>2). Linux中的权限分为三种 ：读(r)、写(w)、执行(x)</p>
<p>3). Linux文件权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）</p>
<p>4). 只有文件的所有者和超级用户可以修改文件或目录的权限</p>
<p>5). 要执行Shell脚本需要有对此脚本文件的执行权限(x)，如果没有则不能执行</p>
</blockquote>
<p>Linux系统中权限描述如下: </p>
<p><img src="https://img-blog.csdnimg.cn/9e597737491d4d8e90ed384ecc692c77.png#pic_center" alt="在这里插入图片描述"></p>
<p>解析当前脚本的权限情况: </p>
<p><img src="https://img-blog.csdnimg.cn/85453fe9567b4927950b7ef306ae4153.png#pic_center" alt="在这里插入图片描述"></p>
<p>chmod命令可以使用八进制数来指定权限(0 - 代表无 , 1 - 执行x , 2 - 写w , 4 - 读r):</p>
<table>
<thead>
<tr>
<th>值</th>
<th>权限</th>
<th>rwx</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>读 + 写 + 执行</td>
<td>rwx</td>
</tr>
<tr>
<td>6</td>
<td>读 + 写</td>
<td>rw-</td>
</tr>
<tr>
<td>5</td>
<td>读 + 执行</td>
<td>r-x</td>
</tr>
<tr>
<td>4</td>
<td>只读</td>
<td>r–</td>
</tr>
<tr>
<td>3</td>
<td>写 + 执行</td>
<td>-wx</td>
</tr>
<tr>
<td>2</td>
<td>只写</td>
<td>-w-</td>
</tr>
<tr>
<td>1</td>
<td>只执行</td>
<td>–x</td>
</tr>
<tr>
<td>0</td>
<td>无</td>
<td>—</td>
</tr>
</tbody></table>
<p><strong>举例:</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">777</span> bootStart.sh   为所有用户授予读、写、执行权限</span><br><span class="line"><span class="attribute">chmod</span> <span class="number">755</span> bootStart.sh   为文件拥有者授予读、写、执行权限，同组用户和其他用户授予读、执行权限</span><br><span class="line"><span class="attribute">chmod</span> <span class="number">210</span> bootStart.sh   为文件拥有者授予写权限，同组用户授予执行权限，其他用户没有任何权限</span><br></pre></td></tr></table></figure>



<p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p>
<p>三个数字分别代表不同用户的权限</p>
<ul>
<li>第1位表示文件拥有者的权限</li>
<li>第2位表示同组用户的权限</li>
<li>第3位表示其他用户的权限</li>
</ul>
<h4 id="2-2-7-授权并执行脚本"><a href="#2-2-7-授权并执行脚本" class="headerlink" title="2.2.7 授权并执行脚本"></a>2.2.7 授权并执行脚本</h4><p>在测试阶段，我们可以给所有的人都赋予执行该shell脚本的权限。所以可以执行如下指令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">777</span> bootStart.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/9140dcf0c1ca469cb057524f4011df37.png#pic_center" alt="在这里插入图片描述"></p>
<p>权限解读: </p>
<p>A. 第一个7，代表当前文件所有者root用户，对该文件具有读写执行权限；</p>
<p>B. 第二个7，代表当前文件所有者所属组的用户，对该文件具有读写执行权限；</p>
<p>B. 第三个7，代表其他用户，对该文件具有读写执行权限；</p>
<p>执行该shell脚本:</p>
<p> <img src="https://img-blog.csdnimg.cn/7e894795394c456dab5714df42d394b9.png#pic_center" alt="在这里插入图片描述"></p>
<p>&#x3D;&#x3D;注意： 在执行maven指令进行打包时，第一次执行可能会耗时比较长，因为在进行maven工程的打包时，需要到中央仓库下载工程依赖的jar包和插件(可以在settings.xml中配置阿里云私服加速下载)。&#x3D;&#x3D;</p>
<p>启动完成之后, 我们可以查看java进程：</p>
<p><img src="https://img-blog.csdnimg.cn/50166e298b5a47939389ff6fb427d2ae.png#pic_center" alt="在这里插入图片描述"></p>
<p>访问项目：</p>
<p><img src="https://img-blog.csdnimg.cn/442b8345638d45b4a235b18400b6a103.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="4-虚拟机克隆"><a href="#4-虚拟机克隆" class="headerlink" title="4. 虚拟机克隆"></a>4. 虚拟机克隆</h2><h3 id="虚拟机克隆的作用"><a href="#虚拟机克隆的作用" class="headerlink" title="虚拟机克隆的作用"></a>虚拟机克隆的作用</h3><p>以后我们需要玩集群，那么就需要有多台服务器，而且每台服务都需要安装相应的软件，这样子我们的工作就会重复了，解决方案：我们先在一台机器安装好所有的软件，然后克隆出来另外的机器。被克隆出来机器环境与供体是一模一样的。</p>
<h3 id="如何克隆"><a href="#如何克隆" class="headerlink" title="如何克隆"></a>如何克隆</h3><ol>
<li>克隆</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/5239cde5b8244937aefffcced770d3df.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/2ff2bd9763af4b32ae0f48d57e17bedb.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="2">
<li>修改ip地址，否则会互相ip冲突</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/569b3d13e4d440c0858b536597cefea6.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/e4258620183040b18016ad346b706907.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="3">
<li>重启网卡服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-镜像还原"><a href="#5-镜像还原" class="headerlink" title="5. 镜像还原"></a>5. 镜像还原</h2><h3 id="镜像还原的应用场景"><a href="#镜像还原的应用场景" class="headerlink" title="镜像还原的应用场景"></a>镜像还原的应用场景</h3><ol>
<li><p>某些同学晚上关机的时候是强制关机的，导致文件出现损坏，机器没法启动。</p>
<ol start="2">
<li>后面我们的项目里面linux需要安装大量的软件的，这些软件目前都是在安装在老师的机器上，学生机器还没有，如果学生挨个安装耗时太久了，这时候老师可以把linux 的镜像拷贝给你们，然后还原出来与老师一模一样的机器。</li>
</ol>
</li>
</ol>
<h3 id="如何实现镜像还原"><a href="#如何实现镜像还原" class="headerlink" title="如何实现镜像还原"></a>如何实现镜像还原</h3><ol>
<li><strong>先把镜像文件拷贝给目标群体</strong></li>
</ol>
<p>​	</p>
<p><img src="https://img-blog.csdnimg.cn/a667e0b8b0544abd983913877e2051c4.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="2">
<li>还原镜像</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/c9e8cf3439e94c2eb2abad0c3e4debe5.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/f7091c60b6a444b581eccb38a9aa9fd3.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/a14725ed587e42acba28b7e1cd301cc6.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="3">
<li>查看你本机的vm的网关</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/9336b6347a1a4fae813639634c22e643.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="4">
<li>修改ip（前三位）地址与网关一致</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/3f28259942034cef824274db64a31754.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="5">
<li>重启网卡</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>














]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot之入门案例</title>
    <url>/2022/08/25/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/003-SpringBoot%E4%B9%8B%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p>
<span id="more"></span>

<h3 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--1. 凡是springboot项目都必须要继承一个父模块--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 以后你需要使用哪个框架，那么就导入对应框架的启动器即可。</span></span><br><span class="line"><span class="comment"> 比如：springmvc - starter-web--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、编写SpringBoot项目启动类"><a href="#2、编写SpringBoot项目启动类" class="headerlink" title="2、编写SpringBoot项目启动类"></a>2、编写SpringBoot项目启动类</h3><blockquote>
<p>启动类就是带 @SpringBootApplication 注解的普通Java类【是运行SpringBoot项目的入口类】</p>
</blockquote>
<p><strong>核心代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootDemoApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6a053cda12f047d3b7d5cd06f3d189e1.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="3、编写Controller"><a href="#3、编写Controller" class="headerlink" title="3、编写Controller"></a>3、编写Controller</h3><p><strong>核心代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onlyone.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">quick</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入<code>localhost:8080/quick</code><br><img src="https://img-blog.csdnimg.cn/abc240985e2a4aab97c280f8d661bcaa.png#pic_center" alt="在这里插入图片描述"><br>入门案例已编写完成了</p>
]]></content>
      <categories>
        <category>通往java之路</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot之java打包SOP</title>
    <url>/2022/08/25/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/007-SpringBoot%E4%B9%8Bjava%E6%89%93%E5%8C%85SOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<h3 id="第一、先配置Maven环境变量"><a href="#第一、先配置Maven环境变量" class="headerlink" title="第一、先配置Maven环境变量"></a>第一、先配置Maven环境变量</h3><p><strong>图1：点击高级系统设置</strong><br><img src="https://img-blog.csdnimg.cn/8fdc10cdb43f41a9aa3a1c95bee3a104.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>图2：点击环境变量</strong><br><img src="https://img-blog.csdnimg.cn/ad233281f95249cf902791dbdf6947c4.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>图3：新建<code>MAVEN_HOME</code>系统变量</strong><br><img src="https://img-blog.csdnimg.cn/51812a58bdbc461fad6e68244e203313.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>图4：编辑path，在系统变量中引用MAVEN_HOME变量，指向MAVEN_HOME中的bin目录</strong>  <code>%MAVEN_HOME%\bin</code><br><img src="https://img-blog.csdnimg.cn/b99a906655dd48939f88b14724ab8fad.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>图5：输入mvn -v命令，如果出现maven版本号，就表明安装成功。</strong><br><img src="https://img-blog.csdnimg.cn/11de7a768b914f7dbe114efe2a35b90f.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="第二、在SpringBoot里面打包"><a href="#第二、在SpringBoot里面打包" class="headerlink" title="第二、在SpringBoot里面打包"></a>第二、在SpringBoot里面打包</h3><h5 id="第一步-引入Spring-Boot打包插件"><a href="#第一步-引入Spring-Boot打包插件" class="headerlink" title="第一步: 引入Spring Boot打包插件"></a>第一步: 引入Spring Boot打包插件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包的插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改jar的名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ROOT<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="第二步-在IDEA-左下方的Terminal里执行命令"><a href="#第二步-在IDEA-左下方的Terminal里执行命令" class="headerlink" title="第二步: 在IDEA-左下方的Terminal里执行命令"></a>第二步: 在IDEA-左下方的Terminal里执行命令</h5><p><strong>温馨提示：</strong>要在对应的项目路径里面输入此命令</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理、打包 跳过测试</span></span><br><span class="line"><span class="attr">mvn</span> <span class="string">clean package -Dmaven.test.skip=true</span></span><br></pre></td></tr></table></figure>

<h5 id="第三步-在jar目录下，打开cmd运行"><a href="#第三步-在jar目录下，打开cmd运行" class="headerlink" title="第三步: 在jar目录下，打开cmd运行"></a>第三步: 在jar目录下，打开cmd运行</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure>

<p>: 在jar目录下，打开cmd运行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure>

<h5 id="第四步：在浏览器输入访问路径"><a href="#第四步：在浏览器输入访问路径" class="headerlink" title="第四步：在浏览器输入访问路径"></a>第四步：在浏览器输入访问路径</h5>]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装和SSH连接工具使用SOP</title>
    <url>/2022/08/24/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/005-Linux%E5%AE%89%E8%A3%85%E5%92%8CSSH%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8SOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<h3 id="1-1-安装方式介绍"><a href="#1-1-安装方式介绍" class="headerlink" title="1.1 安装方式介绍"></a>1.1 安装方式介绍</h3><p>Linux系统的安装方式，主要包含以下两种：</p>
<p><img src="https://img-blog.csdnimg.cn/362a0c47299849cb8098c912a5ac5729.png#pic_center" alt="在这里插入图片描述"></p>
<table>
<thead>
<tr>
<th>方式</th>
<th>概述</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>物理机安装</td>
<td>直接将操作系统安装到服务器硬件&#96;</td>
<td>企业开发中，我们使用的服务器基本都是采用这种方式</td>
</tr>
<tr>
<td>虚拟机安装</td>
<td>通过虚拟机软件安装</td>
<td>我们在学习阶段，没有自己服务器，而我们又需要学Linux，就可以安装在虚拟机上(&#x3D;&#x3D;虚拟机的作用就是可以帮你模拟一台或者多台裸机出来&#x3D;&#x3D;)</td>
</tr>
</tbody></table>
<p><strong>虚拟机</strong>（Virtual Machine）指通过<strong>软件</strong>模拟的具有完整硬件系统功能、运行在完全隔离环境中的完整计算机系统。常用虚拟机软件： </p>
<ul>
<li><p>VMWare </p>
</li>
<li><p>VirtualBox</p>
</li>
<li><p>VMLite WorkStation</p>
</li>
<li><p>Qemu</p>
</li>
<li><p>HopeddotVOS</p>
</li>
</ul>
<p>那么我们就可以在课程中将Linux操作系统安装在虚拟机中，我们课上选择的虚拟机软件是VMware。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>安装linux系统方式有几种，虚拟机的作用？  <ul>
<li>物理机直接安装</li>
<li>通过虚拟机的软件模拟出裸机然后安装操作系统</li>
</ul>
</li>
</ul>
<h3 id="1-2-安装VMware"><a href="#1-2-安装VMware" class="headerlink" title="1.2 安装VMware"></a>1.2 安装VMware</h3><p><img src="https://img-blog.csdnimg.cn/a53a72e5ce674479a9fe573407ecf139.png#pic_center" alt="在这里插入图片描述"></p>
<p>在我们的课程资料中提供了VMware的安装程序。直接双击运行VMware安装程序，根据提示完成安装即可。</p>
<p><img src="https://img-blog.csdnimg.cn/8c706ad40fc442bda2599422d713752f.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/5b0683c1018747df9dff3a25a85bdfab.png#pic_center" alt="在这里插入图片描述"></p>
<p>以上就是VMware在安装时的每一步操作，基本上就是点击 “下一步” 一直进行安装。</p>
<p>&#x3D;&#x3D;注意： 安装完毕vm的时候检查一下的网卡，是否存在vm1与vm8这两张网卡,缺少这两张网卡任意一张以后要不就是不能够与windows通讯，要不就是不能够上外网 ,解决办法： 卸载重装vm，如果还不行，换vm的版本&#x3D;&#x3D;<br><img src="https://img-blog.csdnimg.cn/10e186c0777a4c1b8c832e98fbd5f2ad.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="1-3-安装Linux"><a href="#1-3-安装Linux" class="headerlink" title="1.3 安装Linux"></a>1.3 安装Linux</h3><p>VMware虚拟机安装完毕之后，我们就可以打开VMware，并在上面来安装Linux操作系统。具体步骤如下： </p>
<p><strong>1). 选择创建新的虚拟机</strong></p>
<p><img src="https://img-blog.csdnimg.cn/46fa4fa1ebb4471c93c49ee0d5efa39c.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>2). 选择”典型”配置</strong></p>
<p><img src="https://img-blog.csdnimg.cn/48ff36d3d21b4a41bf696d81c8ede3a0.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>3). 选择”稍后安装操作系统(S)”</strong><br><img src="https://img-blog.csdnimg.cn/6844a2057584455ab30ad5d112483396.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>4). 选择”Linux”操作系统,”CentOS7 64位”版本</strong></p>
<p><img src="https://img-blog.csdnimg.cn/554a27525c63404183c50bc40a4fbc6c.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>5). 设置虚拟机的名称及系统文件存放路径</strong></p>
<p><img src="https://img-blog.csdnimg.cn/2d5efb2425544fc58c387a6c565fa6e9.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>6). 设置磁盘容量</strong></p>
<p><img src="https://img-blog.csdnimg.cn/f3b6f6dab8554099b39436986e472043.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>7). 自定义硬件信息</strong></p>
<p><img src="https://img-blog.csdnimg.cn/8a639032a3da4ddd99a70516257defa9.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>8). 启动上述创建的新虚拟机</strong></p>
<p><img src="https://img-blog.csdnimg.cn/e964e944b0b64283bc797c0781b13fc1.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>9). 选择”Install CentOS7”</strong></p>
<p><img src="https://img-blog.csdnimg.cn/4ead6d664018407291585e8190a63e87.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>进入到Linux系统里面, 我们发现光标无法移动到windows操作系统中了, 这个时候, 我们可以通过快捷键 “Ctrl+Alt” 切换光标到windows系统中。</p>
</blockquote>
<p><strong>10). 选择语言为 “简体中文”</strong></p>
<p><img src="https://img-blog.csdnimg.cn/fff3eb4606e5424699e0c2fe60ec6442.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>11). 选择”自动配置分区”</strong></p>
<p><img src="https://img-blog.csdnimg.cn/2aa35fa7ee0a47c7815a53c11b034f33.png#pic_center" alt="在这里插入图片描述"></p>
<p>12). 选择”最小安装”</p>
<p><img src="https://img-blog.csdnimg.cn/884031b5bd4e4cf39538df625b8d53fe.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/b2cbf5a2b5864b1588c5f8f4783f4d1f.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>13). 启动网卡</strong></p>
<p><img src="https://img-blog.csdnimg.cn/d08cde2b3cf1428cb27ee3ef7d69adad.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/a77b89742f75425ca6e2bb68aafaa198.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/33bacaff11f44f3c948037d33c65d6ad.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>13). 设置”root”用户密码</strong></p>
<p><img src="https://img-blog.csdnimg.cn/d159abaae2144a409f81a2bdcecfec7a.png#pic_center" alt="在这里插入图片描述"></p>
<p>安装完毕后，点击窗口中的蓝色的 “重启” 按钮，重启Linux系统。</p>
<p><strong>14). 登录系统</strong></p>
<p><img src="https://img-blog.csdnimg.cn/ec966e2d86ca4e6c9b225ff5ea8d5384.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p><font color='red'>注意 : 在Linux系统中，在命令行中输入密码信息，为了保证安全性，密码是不显示的(看似没有输入，实际已经输入了)；</font></p>
</blockquote>
<p>2). 重新启动虚拟机</p>
<p><img src="https://img-blog.csdnimg.cn/0cd0de4a414343f69a4f2951343c7ba0.png#pic_center" alt="在这里插入图片描述"></p>
<p>有可能会出现的问题：</p>
<p><img src="https://img-blog.csdnimg.cn/fee2c27a2d64455f96b7d94af5fff58a.png#pic_center" alt="在这里插入图片描述"><br>    <strong>解决方案的步骤：</strong></p>
<p>​	1. 根据你机器的型号百度如何进入bios</p>
<pre><code>                  2.  在bios里面开启虚拟化即可。
</code></pre>
<h3 id="1-4-安装SSH连接工具"><a href="#1-4-安装SSH连接工具" class="headerlink" title="1.4 安装SSH连接工具"></a>1.4 安装SSH连接工具</h3><p>以后我们进入企业工作，每个开发人员都是通过客户端软件连接公司的服务器， 所以我们需要使用客户端</p>
<p>客户端操作效果非常好</p>
<h4 id="虚拟机操作linux系统的问题"><a href="#虚拟机操作linux系统的问题" class="headerlink" title="虚拟机操作linux系统的问题"></a>虚拟机操作linux系统的问题</h4><p><img src="https://img-blog.csdnimg.cn/8fe83e81e3f94f6b85e28142573d5ac7.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="常见的客户端软件"><a href="#常见的客户端软件" class="headerlink" title="常见的客户端软件"></a>常见的客户端软件</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.SecureCRT</span>(操作客户端命令)，SecureFx（用于传输文件）</span><br><span class="line"><span class="number">2</span><span class="selector-class">.XShell</span>(操作客户端命令),XFtp（用于传输文件）</span><br><span class="line"><span class="number">3</span><span class="selector-class">.ModaXterm</span>软件（简单好用，推荐使用）</span><br><span class="line">上面的软件根据文档安装（《资料\<span class="number">03</span>_使用客户端连接工具连接linux系统操作\客户端软件<span class="number">3</span><span class="built_in">_MobaXterm</span>(推荐)》）</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/df069f1cf0514f629213d390e540e543.png#pic_center" alt="在这里插入图片描述"></p>
<p>进入目录, 下一步下一步安装即可</p>
<h4 id="ModaXterm软件的使用"><a href="#ModaXterm软件的使用" class="headerlink" title="ModaXterm软件的使用"></a>ModaXterm软件的使用</h4><p>1.建立连接服务器linux的会话， 查看linux 的机器的ip地址的命令： ifconfig</p>
<p><img src="https://img-blog.csdnimg.cn/d050b305eab442c7960641631e4c5ea3.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/14b8a2650d4e4b98a0f5b9a0ae415e1c.png#pic_center" alt="在这里插入图片描述"></p>
<p>使用界面</p>
<p><img src="https://img-blog.csdnimg.cn/f8b18e6de21c4d8a9d9a2cf6e9ff96c2.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="客户端的好处"><a href="#客户端的好处" class="headerlink" title="客户端的好处"></a>客户端的好处</h4><p><img src="https://img-blog.csdnimg.cn/7eea7c7da93b4bfa8e726f8aabd610d0.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="传递文件"><a href="#传递文件" class="headerlink" title="传递文件"></a>传递文件</h4><p><img src="https://img-blog.csdnimg.cn/28cdba66c12148e4807d97aae01d5a7a.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><strong>为什么我们需要使用linux的客户端软件？</strong></p>
<ul>
<li><p>远程连接linux的服务器，方便我们查看日志信息</p>
</li>
<li><p>我们写好的代码可以直接上传到服务器上。</p>
</li>
</ul>
<h3 id="1-5-Linux目录结构"><a href="#1-5-Linux目录结构" class="headerlink" title="1.5 Linux目录结构"></a>1.5 Linux目录结构</h3><p>登录到Linux系统之后，我们需要先来熟悉一下Linux的目录结构。在Linux系统中，也是存在目录的概念的，但是Linux的目录结构和Windows的目录结构是存在比较多的差异的 在Windows目录下，是一个一个的盘符(C盘、D盘、E盘)，目录是归属于某一个盘符的。Linux系统中的目录有以下特点： </p>
<p><strong>A. &#x2F; 是所有目录的顶点</strong></p>
<p><strong>B. 目录结构像一颗倒挂的树</strong></p>
<p><strong>Linux 和 Windows的目录结构对比:</strong> </p>
<p><img src="https://img-blog.csdnimg.cn/8337d26dac0e499782671a5761fe5c9c.png#pic_center" alt="在这里插入图片描述"></p>
<p>Linux的目录结构，如下： </p>
<p><img src="https://img-blog.csdnimg.cn/037d0ef581c44fb2bf7e99d2470e32c7.png#pic_center" alt="在这里插入图片描述"></p>
<p>根目录&#x2F; 下各个目录的作用及含义说明:  </p>
<table>
<thead>
<tr>
<th>编号</th>
<th>目录</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>&#x2F;bin</td>
<td>存放二进制可执行文件</td>
</tr>
<tr>
<td>2</td>
<td>&#x2F;boot</td>
<td>存放系统引导时使用的各种文件</td>
</tr>
<tr>
<td>3</td>
<td>&#x2F;dev</td>
<td>存放设备文件</td>
</tr>
<tr>
<td>4</td>
<td>&#x3D;&#x3D;&#x2F;etc&#x3D;&#x3D;</td>
<td>存放系统配置文件，  比如：安装完毕jdk，安装maven、配置环境变量</td>
</tr>
<tr>
<td>5</td>
<td>&#x3D;&#x3D;&#x2F;home&#x3D;&#x3D;</td>
<td>用户的主目录,存放用户的个人资料的。比如：linux是一个多用户的操作系统，创建了zhangsan用户，那么在home目录里面有zhangsan文件夹。</td>
</tr>
<tr>
<td>6</td>
<td>&#x2F;lib</td>
<td>存放程序运行所需的共享库和内核模块</td>
</tr>
<tr>
<td>7</td>
<td>&#x2F;opt</td>
<td>额外安装的可选应用程序包所放置的位置</td>
</tr>
<tr>
<td>8</td>
<td>&#x3D;&#x3D;&#x2F;root&#x3D;&#x3D;</td>
<td>超级管理员的主目录</td>
</tr>
<tr>
<td>9</td>
<td>&#x2F;sbin</td>
<td>存放二进制可执行文件，只有root用户才能访问</td>
</tr>
<tr>
<td>10</td>
<td>&#x2F;tmp</td>
<td>存放临时文件</td>
</tr>
<tr>
<td>11</td>
<td>&#x3D;&#x3D;&#x2F;usr&#x3D;&#x3D;</td>
<td>以后我们安装软件都存储在该目录中</td>
</tr>
<tr>
<td>12</td>
<td>&#x2F;var</td>
<td>存放运行时需要改变数据的文件，例如日志文件</td>
</tr>
</tbody></table>
<h4 id="小结：常用的目录"><a href="#小结：常用的目录" class="headerlink" title="小结：常用的目录"></a>小结：常用的目录</h4><ul>
<li>etc 存放系统的配置信息，比如：环境变量</li>
<li>home: 存放用户的主目录的，当你有一个张三的用户，里面就有一个张三的文件夹</li>
<li>root”: 超级管理员的主目录<br>                                  |<br>| 11   | &#x3D;&#x3D;&#x2F;usr&#x3D;&#x3D;  | 以后我们安装软件都存储在该目录中                             |<br>| 12   | &#x2F;var      | 存放运行时需要改变数据的文件，例如日志文件                   |</li>
</ul>
<h4 id="小结：常用的目录-1"><a href="#小结：常用的目录-1" class="headerlink" title="小结：常用的目录"></a>小结：常用的目录</h4><ul>
<li>etc 存放系统的配置信息，比如：环境变量</li>
<li>home: 存放用户的主目录的，当你有一个张三的用户，里面就有一个张三的文件夹</li>
<li>root”: 超级管理员的主目录</li>
<li>usr: 一般软件的安装都在改目录</li>
</ul>
]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot自动装配的原理</title>
    <url>/2022/08/24/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/005-Springboot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E7%9A%84%E5%8E%9F%E7%90%86%E4%B9%8B%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p>
<span id="more"></span>

<h3 id="一、springboot是如何实现自动装配的呢-？"><a href="#一、springboot是如何实现自动装配的呢-？" class="headerlink" title="一、springboot是如何实现自动装配的呢 ？"></a>一、springboot是如何实现自动装配的呢 ？</h3><h5 id="1、-SpringBootApplication注解"><a href="#1、-SpringBootApplication注解" class="headerlink" title="1、@SpringBootApplication注解"></a>1、@SpringBootApplication注解</h5><p>首先我们得看源码，springboot类中有一个注解<code>@SpringBootApplication</code>,这是一个组合注解。我们点击进去看一下：<br>图1：<br><img src="https://img-blog.csdnimg.cn/7c13fd147fdf4822a72e57eb91cbff10.png#pic_center" alt="在这里插入图片描述"></p>
<p>图2：点进去之后可以看到如下图<br><img src="https://img-blog.csdnimg.cn/1ce9583c02b54ac0a42ec3636e6f8d12.png#pic_center" alt="在这里插入图片描述"></p>
<p>(1) 第一类: JDK原生注解4个</p>
<blockquote>
<p>@Target(ElementType.TYPE) &#x2F;&#x2F;当前注解的使用范围<br>@Retention(RetentionPolicy.RUNTIME) &#x2F;&#x2F;生命周期<br>@Documented &#x2F;&#x2F;声明在生成doc文档时是否带着注解<br>@Inherited &#x2F;&#x2F;声明是否子类会显示父类的注解</p>
</blockquote>
<p>@SpringBootApplication中有3个主要注解 </p>
<blockquote>
<p>1.@SpringBootConfiguration   &#x2F;&#x2F;表示该类是一个配置类<br>2.@ComponentScan 				&#x2F;&#x2F;包扫描，扫描启动类所在的包与启动类所在的子包<br>3.@EnableAutoConfiguration  &#x2F;&#x2F;开启自动装配</p>
</blockquote>
<h5 id="2、-EnableAutoConfiguration"><a href="#2、-EnableAutoConfiguration" class="headerlink" title="2、@EnableAutoConfiguration"></a>2、@EnableAutoConfiguration</h5><p>@EnableAutoConfiguration这个注解是开启自动装配的注解核心，它的作用就是获取配置类，扫描并注入IOC容器中管理，它也是一个组合注解。我们点进去看源码。<br>图3：<br><img src="https://img-blog.csdnimg.cn/75039d26741642749047542cf8ee9e99.png#pic_center" alt="在这里插入图片描述"></p>
<p>我们可以看到**@Import({AutoConfigurationImportSelector.class})** 导入<strong>AutoConfigurationImportSelector.class</strong>这个类，这里面有一个selectImports方法里面调用了getCandidateConfigurations方法去加载META-INF&#x2F;spring.factories文件。<br>图4：进入AutoConfigurationImportSelector类可看到selectImports方法<br><img src="https://img-blog.csdnimg.cn/0ec3b28c750144888588398b804d4161.png#pic_center" alt="在这里插入图片描述"></p>
<p>图5：点击getAutoConfigurationEntry方法进入可看到getCandidateConfigurations<br><img src="https://img-blog.csdnimg.cn/a29b62a07bd74993b1ba8e012798f727.png#pic_center" alt="在这里插入图片描述"></p>
<p>图6：从这里可以看到getCandidateConfigurations加载了META-INF&#x2F;spring.factories文件<br><img src="https://img-blog.csdnimg.cn/9a0a0ce2e1624ebfb17678338ca445c4.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="3、META-INF-x2F-spring-factories是用来干嘛的？"><a href="#3、META-INF-x2F-spring-factories是用来干嘛的？" class="headerlink" title="3、META-INF&#x2F;spring.factories是用来干嘛的？"></a>3、META-INF&#x2F;spring.factories是用来干嘛的？</h5><blockquote>
<p>该文件是定义了springboot自动装配的框架自动装配类</p>
</blockquote>
<p>图7：</p>
<p><img src="https://img-blog.csdnimg.cn/cbd933b0b0d5454885b75c61e1de1aea.png#pic_center" alt="在这里插入图片描述"></p>
<p>怎么确认自动装配类不会把所有的装配类加载进来呢？这个时候我们点进去RedisAutoConfiguration这个装配类，可以看到@ConditionalOnClass(RedisOperations.class)，也就是说有这个类在内存中，这个类才会被加载。<br>图8：<br><img src="https://img-blog.csdnimg.cn/fb86b23ad9724cda98f5fa6db9e6961a.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="4、这个类在哪里呢？怎么样才会被自动装配加载？"><a href="#4、这个类在哪里呢？怎么样才会被自动装配加载？" class="headerlink" title="4、这个类在哪里呢？怎么样才会被自动装配加载？"></a>4、这个类在哪里呢？怎么样才会被自动装配加载？</h5><p>一旦导入这个类的启动器，那么就会被自动装配加载。<br>图9：<br><img src="https://img-blog.csdnimg.cn/1bdf0ee391484cb6aa74ed284dd4be6a.png#pic_center" alt="在这里插入图片描述"></p>
<p>总结：Spring Boot启动的时候会通过@EnableAutoConfiguration注解找到META-INF&#x2F;spring.factories配置文件中的所有自动配置类，并对其进行加载，而这些自动配置类都是以AutoConfiguration结尾来命名的。通过SpringFactoriesLoader机制创建对应的bean，注入到容器中，完成了自动注入spring容器，本来需要在spring的xml配置文件中去配置bean的操作就免去了 ，也就是springboot完成了自动装配。</p>
]]></content>
      <categories>
        <category>通往java之路</category>
      </categories>
  </entry>
  <entry>
    <title>30道高频面试题答案</title>
    <url>/2022/08/24/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/30%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="springcloud常用组件"><a href="#springcloud常用组件" class="headerlink" title="springcloud常用组件"></a>springcloud常用组件</h5><p>Eureka：服务注册和发现，由Netflix开源</p>
<p>Nacos：服务注册和发现，还有配置管理功能，由阿里巴巴开源</p>
<p>SpringCloudGateway：微服务网关，实现微服务统一路由，统一鉴权，跨域，限流等功能</p>
<p>Feign：微服务之间远程调用，由Netflix开源</p>
<p>Ribbon：负载均衡组件，在网关路由和Feign远程调用过程中的底层都会用到Ribbon做负载均衡。</p>
<h5 id="springboot的常用注解"><a href="#springboot的常用注解" class="headerlink" title="springboot的常用注解"></a>springboot的常用注解</h5><ul>
<li>@SpringBootApplication：SpringBoot项目最核心的主键。每个SpringBoot启动类上都有，用于引导SpringBoot项目启动加载。</li>
<li>@ComponentScan：用于扫描Spring的组件，并将其放入IOC容器。</li>
<li>@Configuration：声明该类为配置类</li>
<li>@ConditionOnClass：一般和@Configuration注解同时使用，项目中导入了@ConditionOnClass声明的类，@Configuration中的@Bean才会构建。</li>
<li>@ControllerAdvice和@RestControllerAdvice：声明该类为全局异常拦截类。</li>
</ul>
<h5 id="springboot自动装配"><a href="#springboot自动装配" class="headerlink" title="springboot自动装配"></a>springboot自动装配</h5><ul>
<li>在启动类启动时加载@SpringBootApplication注解</li>
<li>在@SpringBootApplication注解里面包含三个注解：@ComponentScan，@Configuration，@EnableAutoConfiguration</li>
<li>@Configuration表明启动类是一个配置类</li>
<li>@ComponentScan自动扫描启动类所在目录及子目录在Spring组件，让其实例化</li>
<li>@EnableAutoConfiguration注解里面包含AutoConfigurationImportSelector配置类<br>在AutoConfigurationImportSelecto配置类中会读取springboot自动配置包中的META-INF的spring.factories文件</li>
<li>该spring.factories文件包含一百多个SpringBoot写好的自动配置类，但这些自动配置类并不是默认生效的，而是根据环境中导入starter启动器依赖及自动配置类上@ConditionalOnClass注解来决定该配置类是否生效。一旦自动配置类生效了，里面@Bean注解会把创建实例放入IOC容器，我们在项目中就可以随时使用@Autowired进行注入并使用</li>
</ul>
<h5 id="springmvc和springboot的关系"><a href="#springmvc和springboot的关系" class="headerlink" title="springmvc和springboot的关系"></a>springmvc和springboot的关系</h5><p> Spring MVC提供了一种轻度耦合的方式来开发web应用。它是Spring的一个模块，是一个web层框架。 </p>
<p> Spring Boot实现了自动配置，降低了Spring项目搭建的复杂度。 </p>
<p> Spring Boot 只是 辅助你简化Spring项目搭建过程的 ，如果搭建的是Web项目，Web层采用SpringMVC，那么SpringMVC的工作原理还是和原来一样的，并没有因为用了SpringBoot而被改变。</p>
<h5 id="谈谈对spring的理解"><a href="#谈谈对spring的理解" class="headerlink" title="谈谈对spring的理解"></a>谈谈对spring的理解</h5><p>Spring的核心组件是：IOC（控制翻转）、DI（依赖注入）和AOP（面向切面编程）</p>
<ul>
<li>IOC意思是控制反转，IOC让对 象的创建不用去new了，可以由spring根据我们提供的配置文件自动生产，我们需要对象的时候， 直接从Spring容器中获取即可。</li>
<li>DI的意思是依赖注入，意思是程序在运行时依赖Ioc容器来动态注入对象需要的对象。 </li>
<li>AOP，一般称为面向切面编程，可以方便将项目中与核心业务无关的代码进行抽取分离，最大程度地解耦。SpringAOP的底层一般采用JDK动态代理或者CGLIB动态代理实现。</li>
</ul>
<h5 id="spring-bean的生命周期"><a href="#spring-bean的生命周期" class="headerlink" title="spring bean的生命周期"></a>spring bean的生命周期</h5><ul>
<li>Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化</li>
<li>Bean实例化后对将Bean的引入和值注入到Bean的属性中</li>
<li>如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法</li>
<li>如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入</li>
<li>如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。</li>
<li>如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。</li>
<li>如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用</li>
<li>如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。</li>
<li>此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。</li>
<li>如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。</li>
</ul>
<h5 id="spring的ioc、di、aop分别是什么，ioc和di有什么关系"><a href="#spring的ioc、di、aop分别是什么，ioc和di有什么关系" class="headerlink" title="spring的ioc、di、aop分别是什么，ioc和di有什么关系"></a>spring的ioc、di、aop分别是什么，ioc和di有什么关系</h5><ul>
<li><p>IOC意思是控制反转，IOC让对 象的创建不用去new了，可以由spring根据我们提供的配置文件自动生产，我们需要对象的时候， 直接从Spring容器中获取即可。</p>
</li>
<li><p>DI的意思是依赖注入，意思是程序在运行时依赖Ioc容器来动态注入对象需要的对象。 </p>
</li>
<li><p>AOP，一般称为面向切面编程，可以方便将项目中与核心业务无关的代码进行抽取分离，最大程度地解耦。SpringAOP的底层一般采用JDK动态代理或者CGLIB动态代理实现。</p>
</li>
<li><p>IOC侧重于构建对象上的解耦，对象构建交给SpringIOC容器构建。</p>
</li>
<li><p>DI侧重于使用对象上的解耦，需要使用什么对象从SpringIOC容器获取。</p>
</li>
</ul>
<h5 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h5><p>事务是一组原子操作单元，从数据库角度说，就是一组SQL指令，要么全部执行成功，若因为某个原因其中一条指令执行有错误，则撤销先前执行过的所有SQL指令。更简答的说就是：SQL要么全部执行成功，要么撤销不执行。 </p>
<h5 id="事务的四大特性和隔离级别"><a href="#事务的四大特性和隔离级别" class="headerlink" title="事务的四大特性和隔离级别"></a>事务的四大特性和隔离级别</h5><p><strong>事务特性</strong> </p>
<ul>
<li><p><strong>原子性</strong>：即不可分割性，事务要么全部被执行，要么就全部不被执行。 </p>
</li>
<li><p><strong>一致性</strong>：事务的执行使得数据库从一种正确状态转换成另一种正确状态 </p>
</li>
<li><p><strong>隔离性</strong>：在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务， </p>
</li>
<li><p><strong>持久性</strong>：事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处 </p>
<p>理结果也会得到保存。</p>
</li>
</ul>
<p><strong>隔离级别</strong> </p>
<p>（1）<strong>读未提交</strong>（read Uncommited）: </p>
<p>在该隔离级别，所有的事务都可以读取到别的事务中未提交的数据，会产生脏读问题，在项目中基本不 怎么用， 安全性太差； </p>
<p>(2) <strong>读已提交</strong>（read commited）: </p>
<p>这是大多数数据库默认的隔离级别，但是不是MySQL的默认隔离级别；这个隔离级别满足了简单的隔离 要求：一个事务只能看见已经提交事务所做的改变，所以会避免脏读问题； 由于一个事务可以看到别的事务已经提交的数据，于是随之而来产生了不可重复读和虚读等问题</p>
<p>(3) <strong>可重复读</strong>（Repeatable read）： 这是MySQL的默认隔离级别，它确保了一个事务中多个实例在并发读取数据的时候会读取到一样的数 据；不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读 取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发生幻读。</p>
<p>(4**)** <strong>可串行化</strong>（serializable）： 事物的最高级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每 个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争，一般为了提升程序的吞吐量不会采用这个；</p>
<h5 id="悲观锁和乐观锁的区别和应用场景"><a href="#悲观锁和乐观锁的区别和应用场景" class="headerlink" title="悲观锁和乐观锁的区别和应用场景"></a>悲观锁和乐观锁的区别和应用场景</h5><p>什么是悲观锁：</p>
<ul>
<li>总是假设最坏的情况，<strong>每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上</strong> <strong>锁</strong>，这样别人想拿这个数据就会阻塞直到它拿到锁。</li>
</ul>
<p>悲观锁的应用场景： </p>
<ul>
<li>关系数据库的行级锁和表级锁等。</li>
</ul>
<p>什么是乐观锁：</p>
<p>总是假设最好的情况，<strong>每次去拿数据的时候都认为别人不会修改，所以不会上锁</strong>，但是在更新的时候会判断在此期间别人有没有去更新这个数据。</p>
<p>乐观锁的实现方式： </p>
<ul>
<li>可以使用<strong>版本号机制</strong>和CAS算法实现 版本号机制 在数据表中加入一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version 指会加一。当线程A要重新更新数据值时，在读取数据的时候也会读取version值，在提交更新 时，若刚才读取到的version值与当前数据库中的version值相等才更新，否则重新更新操作，直到 更新成功。</li>
</ul>
<p>悲观锁与乐观锁的应用差别：</p>
<ul>
<li><strong>乐观锁</strong>适用于写少读多的场景。这样可以省去了锁的开销，加 大了系统的整个<strong>吞吐量</strong>。</li>
<li><strong>悲观锁</strong>更适合读少写多的场景。因为如果在写多的场景下使用乐观锁，会导致应用会不断的进行重试，这样反倒是降低了性能，所以一般写多的场景下更适合才用<strong>悲观锁</strong>。</li>
</ul>
<h5 id="redis的数据类型，持久化方式"><a href="#redis的数据类型，持久化方式" class="headerlink" title="redis的数据类型，持久化方式"></a>redis的数据类型，持久化方式</h5><p>redis有5种数据类型：</p>
<ul>
<li>String</li>
<li>Set</li>
<li>List</li>
<li>Hash</li>
<li>SortedSet</li>
</ul>
<p>Redis持久化方式：</p>
<p>有两种，分别是RDB和AOF。RDB原理是对整个当前内存数据进行快照备份，体积小。AOF原理是每条操作指令都会持久化到文件，导致文件体积比较大RDB的两次备份时间间隔最短1分钟，时间长，容易导致数据丢失。而AOF默认间隔1秒1次，时间短，数据完整性高！恢复速度上来说，RDB比AOF稍快一些，因为体积小。</p>
<h5 id="redis缓存穿透、雪崩、击穿"><a href="#redis缓存穿透、雪崩、击穿" class="headerlink" title="redis缓存穿透、雪崩、击穿"></a>redis缓存穿透、雪崩、击穿</h5><p>什么是缓存雪崩：</p>
<p>缓存雪崩，即缓<strong>存同一时间大面积的失效</strong>，这个时候又来了一波 请求，结果请求都怼到数据库上，从而导致数据库连接异常。 </p>
<p>缓存雪崩解决方案： </p>
<p>1、给缓存的<strong>失效时间，加上一个随机值，避免集体失效</strong>。 </p>
<p>2、使用互斥锁，但是该方案吞吐量明显下降了。 </p>
<p>3、搭建 redis 集群</p>
<p>缓存击穿和缓存雪崩类似的，雪崩的大面积的key失效，击穿一般是个别key失效，解决办法可以和雪崩一样答。</p>
<p>什么是缓存穿透：</p>
<p><strong>缓存穿透，即黑客故意去请求缓存中不存在的数据</strong>，导致所有的请求都怼到数据库上，从而数据库连接 异常。 </p>
<p>缓存穿透解决方案： </p>
<p>1、利用互斥锁，缓存失效的时候，先去获得锁，得到锁了， 再去请求数据库。没得到锁，则休眠一段时间重试 </p>
<p>2、采用异步更新策略，无论 key 是否取到值，都直接返回， value 值中维护一个缓存失效时间，缓存如果过期，异步起一个线程 去读数据库，更新缓存。</p>
<h5 id="java的基本数据类型"><a href="#java的基本数据类型" class="headerlink" title="java的基本数据类型"></a>java的基本数据类型</h5><p> <strong>字节型（byte）、短整型（short）、整型（int）、长整型（long）、单精度浮点型（float）和双精度浮点型（double）、布尔型（boolean）、字符型（char）</strong> </p>
<h5 id="arraylist和linkedlist"><a href="#arraylist和linkedlist" class="headerlink" title="arraylist和linkedlist"></a>arraylist和linkedlist</h5><p>arraylist和linkedlist作用 </p>
<p>ArrayList和LinkedList都是实现了List接口的容器类，用于存储一系列的对象引用。他们都可以对元素的 </p>
<p>增删改查进行操作。 对于ArrayList<strong>，它在集合的末尾删除或添加元素所用的时间是一致的，但是在列表中间的部分添加或删*除时</strong>所用<strong>时间就会大大增加</strong>。但是它在根据索引<strong>查找元素</strong>的时候<strong>速度很快</strong>。 </p>
<p>对于LinkedList则相反<strong>，它在</strong>插入、删除<strong>集合中任何位置的元素所</strong>花费的时间都是一样<strong>的，但是它查</strong>询一个元素<strong>的时候却</strong>比较慢。 </p>
<p>arraylist和linkedlist区别 </p>
<p>1**.ArrayList<strong>是实现了</strong>基于动态数组<strong>的数据结构，</strong>LinkedList<strong>是</strong>基于链表**结构。 </p>
<p>2.对于<strong>随机访问</strong>的get和set方法，ArrayList要优于LinkedList，因为LinkedList要移动指针。 </p>
<p>3.对于新增和删除操作add和remove<strong>，</strong>LinkedList比较占优势，因为ArrayList要移动数据。 </p>
<h5 id="hashtable和hashmap"><a href="#hashtable和hashmap" class="headerlink" title="hashtable和hashmap"></a>hashtable和hashmap</h5><p>1、HashMap 是<strong>非线程安全</strong>的，HashTable 是线程<strong>安全</strong>的。 </p>
<p>2、HashMap 的键和值都<strong>允许有</strong> <strong>null</strong> <strong>值</strong>存在，而 HashTable 则<strong>不行</strong>。 </p>
<p>3、因为线程安全的问题，HashMap <strong>效率</strong>比 HashTable 的<strong>要高</strong>。 </p>
<p>4、Hashtable 是同步的，而 HashMap 不是。因此，HashMap 更适合于单线 <strong>程环境</strong>，而 Hashtable 适合于多线程环境。一般现在不建议用 HashTable, ① 是 HashTable 是遗留类，内部实现很多没优化和冗余。②即使在多线程环境下， 现在也有同步的 ConcurrentHashMap 替代，没有必要因为是多线程而用HashTable。 </p>
<h5 id="jvm内存溢出"><a href="#jvm内存溢出" class="headerlink" title="jvm内存溢出"></a>jvm内存溢出</h5><p> 在Java程序中，出现内存溢出的原因也有很多，常见的有堆内存溢出，直接内存溢出，永久区&#x2F;元空间溢出 </p>
<p>1）堆内存溢出：</p>
<p> 堆溢出这种是最常见的一种，在Java中堆是重要的一个空间，Java的大量对象都是直接在堆上分配的(参考<strong>内存分配</strong>)。当大量对象占据了堆空间而且都是强引用，使之始终无法被回收，当所有对象大小之和大于参数<code>-Xmx</code>指定的值时，就会出现溢出了。 </p>
<p>如何处理</p>
<ul>
<li>首选检查代码是否存在循环或者死循环，是否能够不断的创建对象。</li>
<li>查看启动参数<code>-Xmx</code>和<code>-Xms</code> 设置的堆内存是否过小，不足以加载服务中的所有类，可以适当增加。</li>
<li>检查代码中是否存在数据库查询，没有分页一次性返回大量数据。</li>
<li>还可以通过MAT或者<strong>VisualVM工具</strong>分析，找到占用大量堆空间的对象，然后做出合理优化。</li>
</ul>
<p>2）<strong>直接内存溢出</strong></p>
<p>这个问题遇到的一般比较少，直接内存不是运行时数据区的一部分。</p>
<p>Java中NIO(New IO)是支持直接使用直接内存的，可以直接获取一块堆外空间使用，而这块空间是直接向操作系统申请的。直接内存的申请速度一般比堆内存慢，但是其访问速度要快于堆内存，所以如果存在可复用且经常被访问的空间，使用直接内存可以提高系统的性能。但是直接内存没有被Java完全托管，使用不当容易出现溢出的问题。</p>
<p>如何处理：</p>
<ul>
<li>检查程序中使用直接内存的代码是否恰当。</li>
<li>检查参数-Xmx和-XX:MaxDirectMemorySize 的大小是否合理，可以根据实际情况调整其大小。</li>
</ul>
<p>3）永久区&#x2F;元空间溢出 </p>
<p>这种错误是永久代或者元空间溢出，在jdk1.8之前会出现这种错误，之后hotspot用元空间代替了永久代来存储class信息。如果一个系统在不断的创建新的类(不是对象实例)，那么最终会导致元空间溢出的。</p>
<p>如何处理：</p>
<ul>
<li>增加元空间的大小，设置其对应参数的值 <code>-XX:MaxMetaspaceSize=512m</code></li>
<li>减少系统需要的类的数量，检查是否有不需要的类并且清除掉。</li>
<li>使用ClassLoader合理的装载各个类，并定期进行回收。</li>
</ul>
<h5 id="jvm调优"><a href="#jvm调优" class="headerlink" title="jvm调优"></a>jvm调优</h5><p>调优目的：</p>
<p> 对JVM内容的系统级的调优主要的目的是减少GC的频率和Full GC的次数。 </p>
<p>调优步骤：</p>
<p>a. 分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；</p>
<p>b. 确定jvm调优量化目标；</p>
<p>c. 确定jvm调优参数（根据历史jvm参数来调整）；</p>
<p>d. 调优一台服务器，对比观察调优前后的差异；</p>
<p>e. 不断的分析和调整，知道找到合适的jvm参数配置；</p>
<p>f. 找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。</p>
<p>调优常见参数：<br>1）设定堆内存大小（比较常用的）<br>-Xmx：堆内存最大限制。</p>
<p>2）设定新生代大小。 新生代不宜太小，否则会有大量对象涌入老年代<br>-XX:NewSize：新生代大小<br>-XX:NewRatio  新生代和老生代占比<br>-XX:SurvivorRatio：伊甸园空间和幸存者空间的占比</p>
<p>3）设定垃圾回收器算法<br>年轻代用  -XX:+UseParNewGC<br>年老代用-XX:+UseConcMarkSweepGC</p>
<h5 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h5><ul>
<li>继承Thread类创建线程类 </li>
<li>通过Runnable接口创建线程类 </li>
<li>通过Callable和Future创建线程</li>
</ul>
<h5 id="线程池有几种"><a href="#线程池有几种" class="headerlink" title="线程池有几种"></a>线程池有几种</h5><ol>
<li><p><strong>newCachedThreadPool</strong>：创建一个<strong>可进行缓存重复利用的线程池</strong> </p>
</li>
<li><p><strong>newFixedThreadPool</strong>：创建一个可重用<strong>固定线程数的线程池</strong>，以共享的无界队列方式来运行这些</p>
</li>
</ol>
<p>线程，线程池中的线程处于一定的量，可以很好的控制线程的并发量 </p>
<ol start="3">
<li><strong>newSingleThreadExecutor</strong>：创建一个使用单个 worker 线程的Executor ，以无界队列方式来运行</li>
</ol>
<p>该线程。线程池中<strong>最多执行一个线程，之后提交的线程将会排在队列中以此执行</strong> </p>
<ol start="4">
<li><strong>newSingleThreadScheduledExecutor</strong>：创建<strong>一个单线程</strong>执行程序，它可安排在<strong>给定延迟后运行命</strong></li>
</ol>
<p><strong>令或者定期执行</strong> </p>
<ol start="5">
<li><p><strong>newScheduledThreadPool</strong>：创建一个线程池，它可安排在给<strong>定延迟后运行命令或者定期的执行</strong> </p>
</li>
<li><p><strong>newWorkStealingPool</strong>：创建一个带并<strong>行级别的线程池</strong>，并行级别决定了同<strong>一时刻</strong>最多有<strong>多</strong>少个</p>
</li>
</ol>
<p><strong>线程在执行</strong>，如不传并行级别参数，将默认为当前系统的<strong>CPU核心数</strong>*2</p>
<h5 id="mysql的引擎有几种"><a href="#mysql的引擎有几种" class="headerlink" title="mysql的引擎有几种"></a>mysql的引擎有几种</h5><p>InnoDB：MySQL默认存储引擎。支持事务。支持行级锁和表级锁。索引采用聚簇索引（索引和数据存储在一个文件，提升查询性能）。</p>
<p>MyISAM：不支持事务。仅仅支持表级锁。索引采用非聚簇索引（索引和数据分开存储，查询性能差一些）。</p>
<h5 id="项目中有没有设计表，都有哪些字段"><a href="#项目中有没有设计表，都有哪些字段" class="headerlink" title="项目中有没有设计表，都有哪些字段"></a>项目中有没有设计表，都有哪些字段</h5><p>根据自己项目自由发挥</p>
<h5 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h5><p>首先开启数据库慢查询日志，定位到查询效率比较低的sql , 找出对应的sql语句并进行分析</p>
<p>1.表设计是否规范，是否符合三范式的标准</p>
<p>(1)第一范式：保证原子性(不可拆分)</p>
<p>(2)第二范式：每张表都有主键</p>
<p>(3)第三范式(每一列都有主键相关)</p>
<p>2.查看数据表中是否存在大量的冗余字段，字段数据类型是否合理</p>
<p>3.尽可能的使用varchar代替char 建表数据类型，能用数值的绝对不用字符存储</p>
<p>4.尽量避免null值，使用默认值替代空值，数值型可以使用0，字符型可以使用空字符串</p>
<p>查看sql语句是否规范：</p>
<p>(1)避免使用关键字：or ，in，not in ，!&#x3D;，&lt;&gt;，避免使用select *</p>
<p>(2)尽量避免子查询，大部分子查询都可以连接查询</p>
<p>(3)用到or的地方可以使用union去代替实现</p>
<p>(4)用到in的地方可以使用exists去代替</p>
<p>分析sql的索引是否可以用上：</p>
<p>(1) explain查询sql的执行计划,重点关注的几个列就是，type是不是全表扫描</p>
<p>(2)看一下索引是否能够用的上,主要看key使用的是哪个索引</p>
<p>(3)看一下rows扫描行数是不是很大</p>
<h5 id="eureka和nacos的区别"><a href="#eureka和nacos的区别" class="headerlink" title="eureka和nacos的区别"></a>eureka和nacos的区别</h5><p>1）Nacos可以实现服务注册发现，也可以做配置管理；Eureka只能做服务注册发现。<br>2）Nacos临时实例心跳不正常会被剔除，非临时实例（永久实例）则不会被剔除；而Eureka只能注册临时实例，实例失效会被剔除（Eureka不支持永久实例）<br>3）Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式；而Eureka只有心跳模式；<br>4）Nacos支持服务列表变更的消息主动通知模式，服务列表更新更及时，减少服务调用失败的机率；而Eureka采用被动定时服务列表拉取更新；</p>
<h5 id="项目中用到什么设计模式，单例有几种"><a href="#项目中用到什么设计模式，单例有几种" class="headerlink" title="项目中用到什么设计模式，单例有几种"></a>项目中用到什么设计模式，单例有几种</h5><ul>
<li>单例设计模式 </li>
<li>代理模式 </li>
<li>装饰者</li>
<li>工厂模式</li>
<li>建造者模式</li>
</ul>
<p>单例有懒汉式 和 饿汉式</p>
<h5 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h5><ol>
<li><p>用户发送请求到前端控制器（DispatcherServlet）</p>
</li>
<li><p>前端控制器（DispatcherServlet）收到请求调用处理器映射器（HandlerMapping），去查找处理器 （Handler） </p>
</li>
<li><p>处理器映射器（HandlerMapping）找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。 </p>
</li>
<li><p>前端控制器（DispatcherServlet）调用处理器映射器（HandlerMapping） </p>
</li>
<li><p>处理器适配器（HandlerAdapter）去调用自定义的处理器类(Controller，也叫后端控制器)。 自定义的处理器类(Controller，也叫后端控制器)将得到的参数进行处理并返回结果给处理器映 射器（HandlerMapping） </p>
</li>
<li><p>处理器适配器（HandlerAdapter）将得到的结果返回给前端控制器（DispatcherServlet） </p>
</li>
<li><p>DispatcherServlet(前端控制器)将ModelAndView传给视图解析器(ViewReslover) </p>
</li>
<li><p>视图解析器(ViewReslover)将得到的参数从逻辑视图转换为物理视图并返回给前端控制器</p>
</li>
</ol>
<p>（DispatcherServlet） </p>
<ol start="9">
<li><p>前端控制器（DispatcherServlet）调用物理视图进行渲染并返回 </p>
</li>
<li><p>前端控制器（DispatcherServlet）将渲染后的结果返回</p>
</li>
</ol>
<h5 id="mybatis的-和"><a href="#mybatis的-和" class="headerlink" title="mybatis的$和#"></a>mybatis的$和#</h5><p><strong>1， #是一个占位符，$是拼接符。</strong></p>
<p> #是一个占位符，$是拼接符。</p>
<p><strong>（1）</strong>使用#parameterName方式引用参数的时候，Mybatis会把传入的参数当成是一个字符串，自动添加双引号。</p>
<p>（2）使用$parameterName引用参数时，不做任何处理，直接将值拼接在sql语句中。</p>
<p><strong>2，使用 # 能够防止sql注入，$不能避免注入攻击。</strong></p>
<p>   #的方式引用参数，mybatis会先对sql语句进行预编译，然后再引用值，能够有效防止sql注入，提高安全性。$的方式引用参数，sql语句不进行预编译。</p>
<h5 id="为什么要用es，es的倒排索引是什么"><a href="#为什么要用es，es的倒排索引是什么" class="headerlink" title="为什么要用es，es的倒排索引是什么"></a>为什么要用es，es的倒排索引是什么</h5><p>为什么用ES？</p>
<p>1）MySQL的海量数据时，搜索效率比较低，而Elasticsearch采用倒排索引法检测数据，从而效率更高。<br>2）MySQL的搜索功能比较弱，只有like这种模糊搜索，而Elasticsearch拥有大量复杂搜索的API，更加适合数据搜索场景</p>
<p>ES的倒排索引：</p>
<p>1）首先，Elasticsearch将文档数据进行索引构建。将文档数据需要分词的字段内容使用分词器进行分词，并记录每个词条和原文档的出现位置和出现频率等信息，构建出文档的索引库。<br>2）然后，用户搜索时，可以对关键词进行分词，使用分词后词条来匹配索引库，在索引库匹配到记录后，通过文档位置频率信息，反查具体的文档数据。</p>
<h5 id="rabbitmq-x2F-rocketmq、kafka的了解"><a href="#rabbitmq-x2F-rocketmq、kafka的了解" class="headerlink" title="rabbitmq&#x2F;rocketmq、kafka的了解"></a>rabbitmq&#x2F;rocketmq、kafka的了解</h5><p>RabbitMQ：<br>优势：<br>1）支持语言非常广<br>2）稳定性很好，采用Erlang语言开发<br>3）吞吐量不算低，万级<br>4）RabbitMQ官方提供7种消息发送模式，开发者轻松选择合适的模式进行开发即可<br>缺点：<br>1）采用Erlang，太小众，研究源码很难</p>
<p>Kafka：<br>优势：<br>1）高吞吐量，百万级<br>2）稳定性好，采用zookeeper进行注册（Zookeep采用CP模式，高一致模式）<br>3）可以应用在大数据数据处理领域（KafkaStream）<br>缺点：<br>1）支持的开发语言比较少<br>2）耦合zk，依赖zookeeper进行注册</p>
<h5 id="spring中-Autowired和-Resource的区别"><a href="#spring中-Autowired和-Resource的区别" class="headerlink" title="spring中@Autowired和@Resource的区别"></a>spring中@Autowired和@Resource的区别</h5><ul>
<li>@Autowired是Spring的，@Resource是javax包下的 </li>
<li>@Autowired默认按类型匹配，@Resource默认按名称匹配 </li>
<li>@Autowired和@Qualifier一起用，@Resource单独用</li>
</ul>
<h5 id="mysql索引数据结构，为什么用的是b-树不用红黑树"><a href="#mysql索引数据结构，为什么用的是b-树不用红黑树" class="headerlink" title="mysql索引数据结构，为什么用的是b+树不用红黑树"></a>mysql索引数据结构，为什么用的是b+树不用红黑树</h5><p>1）Hash哈希，只适合等值查询，不适合范围查询<br>2）一般二叉树，可能会特殊化为一个链表，相当于全表扫描<br>3）红黑树，是一种特化的平衡二叉树，MySQL 数据量很大的时候，索引的体积也会很大，内存放不下的而从磁盘读取，树的层次太高的话，读取磁盘的次数就多了。<br>4）B树在范围查询时，存在回旋查找的问题，导致性能不高。B+树叶子节点是有序链表，更有利于范围查询。</p>
<p>综上所述，MySQL的索引数据结构最适合采用B+树来实现。而且为了提高索引前后范围检索效率，MySQL改造了传统的B+树，形成了双向链指针。</p>
<h5 id="mysql和redis如何保证数据一致性"><a href="#mysql和redis如何保证数据一致性" class="headerlink" title="mysql和redis如何保证数据一致性"></a>mysql和redis如何保证数据一致性</h5><p>1）缓存延迟双删 </p>
<ul>
<li><p>先删除缓存</p>
</li>
<li><p>写数据库</p>
</li>
</ul>
<p>休眠 500 毫秒，然后删除缓存</p>
<p>这样，读取脏数据的时间最多只有500毫秒。关键是如何确定睡眠时间？ 延迟时间的目的是为了保证读请求结束，写请求可以删除读请求引起的缓存脏数据。 因此，我们需要自己评估项目的数据读取业务逻辑的耗时，在读取时间的基础上加上几百毫秒的延迟时间。</p>
<p>2）删除缓存重试机制</p>
<p>缓存删除失败怎么办？比如延迟双删的第二次删除失败，说明脏数据无法删除。 使用重试机制保证缓存删除成功。 比如重试3次，失败3次，就会将日志记录到数据库中，并发出警告进行人工干预。 在高并发场景下，重试最好采用异步方式，比如向MQ中间件发送消息，实现异步解耦。</p>
<p>3）读取 bin-log 异步删除</p>
<ul>
<li><p>更新数据库。</p>
</li>
<li><p>数据库会将操作信息记录在bin-log日志中。</p>
</li>
<li><p>使用 canal 订阅 bin-log 日志获取目标数据和密钥。</p>
</li>
<li><p>缓存删除系统获取canal数据，解析目标key，尝试删除缓存。</p>
</li>
<li><p>如果删除失败，将消息发送到消息队列。</p>
</li>
<li><p>缓存删除系统再次从消息队列中获取数据，再次执行删除操作。</p>
</li>
</ul>
<h4 id="扩展具难面试题："><a href="#扩展具难面试题：" class="headerlink" title="扩展具难面试题："></a>扩展具难面试题：</h4><h5 id="1、多线程在项目中的使用场景"><a href="#1、多线程在项目中的使用场景" class="headerlink" title="1、多线程在项目中的使用场景"></a>1、多线程在项目中的使用场景</h5><ul>
<li>多线程批量导入MySQL数据到ES</li>
<li>CRM采用异步线程执行多个统计SQL</li>
</ul>
<h5 id="2、项目中是否有高并发导致的问题"><a href="#2、项目中是否有高并发导致的问题" class="headerlink" title="2、项目中是否有高并发导致的问题"></a>2、项目中是否有高并发导致的问题</h5><ul>
<li>mysql和redis数据一致性问题</li>
<li>ThreadLocal存储登录用户ID</li>
</ul>
<h5 id="3、线程不安全导致的问题"><a href="#3、线程不安全导致的问题" class="headerlink" title="3、线程不安全导致的问题"></a>3、线程不安全导致的问题</h5><p>共享数据安全问题（分布式锁解决）</p>
<h5 id="4、并发安全的集合有哪些"><a href="#4、并发安全的集合有哪些" class="headerlink" title="4、并发安全的集合有哪些"></a>4、并发安全的集合有哪些</h5><p>ConcurrentHashMap</p>
<p>CopyOnWriteArrayList</p>
<h5 id="5、sql慢查询优化、行锁、表锁"><a href="#5、sql慢查询优化、行锁、表锁" class="headerlink" title="5、sql慢查询优化、行锁、表锁"></a>5、sql慢查询优化、行锁、表锁</h5><p>1)避免回表查询</p>
<p>2)联合索引</p>
<p>3)避免索引失效</p>
<p>4）使用执行计划优化</p>
<p>表级锁：对整个表记录锁定，一个事务修改表数据的时候，另一个事务无法修改表数据。</p>
<p>语法：<br>  lock table tb_user read local;<br>  update tb_user ssss<br>  insert into tb_user<br>  unlock;</p>
<p>特点：锁定范围比较大，比较影响性能<br>应用场景：在数据迁移场景下使用</p>
<p>行级锁：对表的某条（某些）记录锁定。</p>
<p>行级锁分为 共享锁 和 排他锁</p>
<p>共享锁：一个事务在修改记录的时候，另一个事务无法修改记录，但是可以读取。<br>      update tb_user set sex&#x3D;’女’ where id &#x3D; 1 lock in share mode;</p>
<p>排他锁：一个事务在查询&#x2F;修改记录的时候，另一个事务无法修改和读取数据。<br>      select * from tb_user where id &#x3D; 1 for update;</p>
]]></content>
      <categories>
        <category>面试宝典</category>
      </categories>
      <tags>
        <tag>面试必看</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化之消息转换器</title>
    <url>/2022/08/22/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/006-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p>
<span id="more"></span>

<p>这个是把数据库的数据通过对象返给前端，会出现下列没有转换的现象</p>
<p><img src="https://img-blog.csdnimg.cn/a9d34256a5d4452fbd615663473e8f89.png#pic_center" alt="在这里插入图片描述"></p>
<p>这个需要我们加入消息转换器进行转换，把Java对象转为json字符串，在配置类加入这段代码就可以解决了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始扩展消息转换器...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个消息转化器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">//设置对象转换器，可以将Java对象转为json字符串</span></span><br><span class="line">    converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将我们自己的转换器放入spring MVC框架的容器中</span></span><br><span class="line">    converters.add(<span class="number">0</span>,converter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>项目模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化之自定义注解</title>
    <url>/2022/08/22/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96/005-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓模块化是针对在项目里面出现的各种问题，提供的一个模板操作，跟SOP很相似，用于指导和规范日常的工作流程。对于程序开发者来说，建立项目模块化系统，有助于提高开发效率。</p>
<span id="more"></span>

<p><strong>自定义注解就是一个标记，需要通过具体的代码去实现这个注解的用途。</strong></p>
<h5 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h5><h6 id="先定义一个自定义注解"><a href="#先定义一个自定义注解" class="headerlink" title="先定义一个自定义注解"></a>先定义一个自定义注解</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IgnoreToken &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="拦截器写逻辑"><a href="#拦截器写逻辑" class="headerlink" title="拦截器写逻辑"></a>拦截器写逻辑</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断当前被拦截的Controller方法上是否加入了IgnoreToken注解</span></span><br><span class="line"><span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasMethodAnnotation</span> <span class="operator">=</span> handlerMethod.hasMethodAnnotation(IgnoreToken.class);</span><br><span class="line"><span class="keyword">if</span> (hasMethodAnnotation)&#123;</span><br><span class="line">    <span class="comment">//加入了IgnoreToken注解，直接放行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是一个判断Controller方法上是否加入了IgnoreToken注解，如果加入了IgnoreToken注解，直接放行。</p>
]]></content>
      <categories>
        <category>项目模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>状态码大全</title>
    <url>/2022/08/22/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/001-%E7%8A%B6%E6%80%81%E7%A0%81%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p>
<span id="more"></span>

<h3 id="一、状态码大类"><a href="#一、状态码大类" class="headerlink" title="一、状态码大类"></a>一、状态码大类</h3><table>
<thead>
<tr>
<th>状态码分类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td>
</tr>
<tr>
<td>2xx</td>
<td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td>
</tr>
<tr>
<td>3xx</td>
<td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td>
</tr>
<tr>
<td>4xx</td>
<td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td>
</tr>
<tr>
<td>5xx</td>
<td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td>
</tr>
</tbody></table>
<p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p>
<h3 id="二、常见的响应状态码"><a href="#二、常见的响应状态码" class="headerlink" title="二、常见的响应状态码"></a>二、常见的响应状态码</h3><table>
<thead>
<tr>
<th>状态码</th>
<th>英文描述</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td><strong><code>OK</code></strong></td>
<td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td>
</tr>
<tr>
<td>302</td>
<td><strong><code>Found</code></strong></td>
<td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td>
</tr>
<tr>
<td>304</td>
<td><strong><code>Not Modified</code></strong></td>
<td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td>
</tr>
<tr>
<td>400</td>
<td><strong><code>Bad Request</code></strong></td>
<td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td>
</tr>
<tr>
<td>403</td>
<td><strong><code>Forbidden</code></strong></td>
<td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td>
</tr>
<tr>
<td>404</td>
<td><strong><code>Not Found</code></strong></td>
<td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td>
</tr>
<tr>
<td>428</td>
<td><strong><code>Precondition Required</code></strong></td>
<td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td>
</tr>
<tr>
<td>429</td>
<td><strong><code>Too Many Requests</code></strong></td>
<td><strong>太多请求</strong>，可以限制客户端请求某个资源的数量，配合 Retry-After(多长时间后可以请求)响应头一起使用</td>
</tr>
<tr>
<td>431</td>
<td><strong><code> Request Header Fields Too Large</code></strong></td>
<td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td>
</tr>
<tr>
<td>405</td>
<td><strong><code>Method Not Allowed</code></strong></td>
<td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td>
</tr>
<tr>
<td>500</td>
<td><strong><code>Internal Server Error</code></strong></td>
<td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td>
</tr>
<tr>
<td>503</td>
<td><strong><code>Service Unavailable</code></strong></td>
<td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td>
</tr>
<tr>
<td>511</td>
<td><strong><code>Network Authentication Required</code></strong></td>
<td><strong>客户端需要进行身份验证才能获得网络访问权限</strong></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>通往java之路</category>
      </categories>
      <tags>
        <tag>状态码</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK环境变量配置SOP</title>
    <url>/2022/08/21/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/002-JDK%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AESOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<h3 id="1、按下Win键-E，找到计算机"><a href="#1、按下Win键-E，找到计算机" class="headerlink" title="1、按下Win键+E，找到计算机"></a>1、按下Win键+E，找到计算机</h3><p><img src="https://img-blog.csdnimg.cn/2d617c7031754c3d8b3f978337fbb87a.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="2、鼠标右键点击计算机，选择属性"><a href="#2、鼠标右键点击计算机，选择属性" class="headerlink" title="2、鼠标右键点击计算机，选择属性"></a>2、鼠标右键点击计算机，选择属性</h3><p><img src="https://img-blog.csdnimg.cn/c9c27ce5def84d608c5928a72c9012ba.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="3、点击高级系统设置"><a href="#3、点击高级系统设置" class="headerlink" title="3、点击高级系统设置"></a>3、点击高级系统设置</h3><p><img src="https://img-blog.csdnimg.cn/b4a03f99534b4d3db1d2265cad7b0063.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="3-1-选择高级，再点击里面的环境变量"><a href="#3-1-选择高级，再点击里面的环境变量" class="headerlink" title="3.1 选择高级，再点击里面的环境变量"></a>3.1 选择高级，再点击里面的环境变量</h5><p><img src="https://img-blog.csdnimg.cn/4ea8ce67b314490faf4417ce576564bd.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="3-2点击系统变量下面的新建"><a href="#3-2点击系统变量下面的新建" class="headerlink" title="3.2点击系统变量下面的新建"></a>3.2点击系统变量下面的新建</h5><p><img src="https://img-blog.csdnimg.cn/136e14532ff54910b871d2bab44611f7.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>会弹出这样的界面</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/d4ea8d3f73594ec7a5ac590a29e42681.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li><p>变量名后面输入:  JAVA_HOME </p>
<p>变量值后面：把JDk的安装路径复制过来<br><strong>注意：不带bin目录</strong><br>操作完点击确定</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/175b1648b9444544b2e48d2d926009c4.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>选择Path<br>此处还是要选择下方<strong>系统变量</strong>中的Path<br>点击编辑</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/01faadb81bc34130bfeaa65ef8d52f24.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li><p>在弹出的页面中点击编辑文本 （<strong>也可以点击新建，输入完之后点上移到第一个</strong>）<br><img src="https://img-blog.csdnimg.cn/be00c89975764c2e9d2e789404a67d6e.png#pic_center" alt="在这里插入图片描述"></p>
</li>
<li><p>点击完毕后之后会弹出这样的页面</p>
<p><strong>注意：里面的很多内容不能删除</strong></p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/8c837453c884422fbe8f6b6f505bccc6.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>在变量值的最前面输入：**%JAVA_HOME%\bin; **<br>其中使用两个百分号包住 JAVA_HOME,表示引用了 JAVA_HOME 里面的值。<br>分号，表示多个环境变量之间的间隔。<strong>一定不能漏</strong><br><strong>注意：所以符号一定要是英文状态下的。</strong><br><img src="https://img-blog.csdnimg.cn/18e13a8e04034928a83896a0d277199d.png#pic_center" alt="在这里插入图片描述"></li>
</ul>
<h3 id="4、打开CMD，输入java回车。"><a href="#4、打开CMD，输入java回车。" class="headerlink" title="4、打开CMD，输入java回车。"></a>4、打开CMD，输入java回车。</h3><p><img src="https://img-blog.csdnimg.cn/36e5efc2260e4392868ac2ff1317053e.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA安装SOP</title>
    <url>/2022/08/21/SOP%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/001-IDEA%E5%AE%89%E8%A3%85SOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：所谓SOP，是 Standard Operating Procedure三个单词中首字母的大写 ，即标准作业程序，指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。对于程序开发者来说，建立SOP系统，有助于快速配置相关属性，提高开发效率。</p>
<span id="more"></span>

<p>可以自行到官方网站自行下载，网址为：<a href="https://www.jetbrains.com/idea">https://www.jetbrains.com/idea</a><br>本文演示的IDEA版本为 IntelliJ IDEA 2021.1.1 x64</p>
<h3 id="2、安装IDEA图解"><a href="#2、安装IDEA图解" class="headerlink" title="2、安装IDEA图解"></a>2、安装IDEA图解</h3><h5 id="2-1双击安装包，点击next"><a href="#2-1双击安装包，点击next" class="headerlink" title="2.1双击安装包，点击next"></a>2.1双击安装包，点击next</h5><p><img src="https://img-blog.csdnimg.cn/a7f6748c720e4376a9cba9ce1ea34eca.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-2点击修改Browse修改安装路径，然后点击next"><a href="#2-2点击修改Browse修改安装路径，然后点击next" class="headerlink" title="2.2点击修改Browse修改安装路径，然后点击next"></a>2.2点击修改Browse修改安装路径，然后点击next</h5><p><strong>注意：安装路径不能有中文或者有空格</strong></p>
<p><img src="https://img-blog.csdnimg.cn/2d3f5fa9867142519722d211ed7246a1.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-3-看图勾选，然后点击next"><a href="#2-3-看图勾选，然后点击next" class="headerlink" title="2.3 看图勾选，然后点击next"></a>2.3 看图勾选，然后点击next</h5><p><img src="https://img-blog.csdnimg.cn/1a18d151e1d248dd85e2f02481fc9e53.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-4-点击Install-准备安装"><a href="#2-4-点击Install-准备安装" class="headerlink" title="2.4 点击Install , 准备安装"></a>2.4 点击Install , 准备安装</h5><p><img src="https://img-blog.csdnimg.cn/a10206a5482a405dbed1709807fc2148.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-5等进度条读取完毕之后，会有最终页面提示，然后点击Finish"><a href="#2-5等进度条读取完毕之后，会有最终页面提示，然后点击Finish" class="headerlink" title="2.5等进度条读取完毕之后，会有最终页面提示，然后点击Finish"></a>2.5等进度条读取完毕之后，会有最终页面提示，然后点击Finish</h5><p><img src="https://img-blog.csdnimg.cn/ace584d408134e2ca1dba53bc96757ac.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-6-第一次启动会询问，是否导入一些设置-选择第二个不导入，保持默认设置，再点OK"><a href="#2-6-第一次启动会询问，是否导入一些设置-选择第二个不导入，保持默认设置，再点OK" class="headerlink" title="2.6 第一次启动会询问，是否导入一些设置.选择第二个不导入，保持默认设置，再点OK"></a>2.6 第一次启动会询问，是否导入一些设置.选择第二个不导入，保持默认设置，再点OK</h5><p><img src="https://img-blog.csdnimg.cn/9ee3da7f4f7a410b86278db672ccc19e.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-7-选择背景主题"><a href="#2-7-选择背景主题" class="headerlink" title="2.7 选择背景主题"></a>2.7 选择背景主题</h5><p><strong>建议选择白色，代码错了可以很清晰看出</strong>,选择完毕，继续next<br><img src="https://img-blog.csdnimg.cn/681e6d68384b4fddb270d17fdc864b52.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-8-本界面让我们购买Idea"><a href="#2-8-本界面让我们购买Idea" class="headerlink" title="2.8 本界面让我们购买Idea"></a>2.8 本界面让我们购买Idea</h5><p>因为我们是学习阶段，所以可以使用免费30天<br>点击第一排第二个。Evaluate for free</p>
<p><img src="https://img-blog.csdnimg.cn/83808e04f2ab46ec846cdf8de2a88bff.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-9-点击蓝色的Evaluate-就可以开始免费试用30天了"><a href="#2-9-点击蓝色的Evaluate-就可以开始免费试用30天了" class="headerlink" title="2.9 点击蓝色的Evaluate , 就可以开始免费试用30天了"></a>2.9 点击蓝色的Evaluate , 就可以开始免费试用30天了</h5><p><img src="https://img-blog.csdnimg.cn/35ef673b5b6543128799423e1c3e43fa.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-10-当看到这个界面，就表示idea已经安装成功了"><a href="#2-10-当看到这个界面，就表示idea已经安装成功了" class="headerlink" title="2.10  当看到这个界面，就表示idea已经安装成功了"></a>2.10  当看到这个界面，就表示idea已经安装成功了</h5><p><img src="https://img-blog.csdnimg.cn/46ea26c1c72e4154b4a73f1e7477a2c0.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-11-破解Idea"><a href="#2-11-破解Idea" class="headerlink" title="2.11 破解Idea"></a>2.11 破解Idea</h5><p>网址：<a href="https://www.exception.site/essay/idea-reset-eval">https://www.exception.site/essay/idea-reset-eval</a></p>
]]></content>
      <categories>
        <category>SOP操作手册</category>
      </categories>
      <tags>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>畅聊教育</title>
    <url>/2022/08/18/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/003-%E7%95%85%E8%81%8A%E6%95%99%E8%82%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导读</strong>：我记得每次跟朋友争论教育的时候，她每次就说了一句“中国现在能有这样的成就不是发展的很好吗”? 我无法反驳此言论，但心中颇为不服，通过不断的去学习，我终于明白什么是教育！</p>
<span id="more"></span>

<h3 id="一、教育发展史"><a href="#一、教育发展史" class="headerlink" title="一、教育发展史"></a>一、教育发展史</h3><p>要想反驳这些人的言论，就得运用上知识论的内容，我们要以一个什么都不知道的人为出发点，然后以其个人的智力来挖掘与确定的知识。首先就得从教育发展史出发，对比各国的教育差异！</p>
<h5 id="普鲁士教育"><a href="#普鲁士教育" class="headerlink" title="普鲁士教育"></a>普鲁士教育</h5><p>现代教育体制的起源就是普鲁士教育改革，普鲁士也是全世界第一个实施了义务教育的国家。普鲁士教育的核心是什么？就是集体观念，中规中矩，服从，专业技能强。工业文明之后只要采用普鲁士教育这个模范的几乎是后来工业革命的大赢家，包括美国。</p>
<p>其中德国和日本是深受普鲁士教育的影响，所以会出现德国人的严谨，日本的匠人精神都来源于此! 接下来谈一下日本：日本的教育过去那是完全是一个封建皇权教育，日本后来的脱亚入欧的杂种思想，和所谓“心近中国，身在欧洲”的日本文化。它的教育就是这样的，它佩服德国，它学的普鲁士，它回去带了普鲁士，日本才实现了跟德国特别一样的这种行为和社会文化结果。</p>
<h5 id="芬兰教育"><a href="#芬兰教育" class="headerlink" title="芬兰教育"></a>芬兰教育</h5><p>在第二次工业文明之后，教育最为突出的是芬兰。<strong>芬兰教育是什么教育</strong>？它打破了普鲁士教育上很多的所谓的“把人训练成机器”。芬兰教育它把它人性化。芬兰学校，基本上不考试，最后就一个国家考试，一关就过；中间避免考试，避免人与人之间的恶性竞争，避免人给人打标签、打评分，因为人在不同的环境下、不同的时间下会有不同的表现。评分、考试是奴役和老师和学生之间恶性循环的最糟糕的东西。</p>
<p>芬兰，这个享有“世界第一教育之国”称号！芬兰的教育水平、科技水平始终居于世界前列。只有500多万人的小国，却在20项关键科技领域，有17项排名世界前十。从这里就可以看得出第一次工业文明和第二次工业文明教育的转变。</p>
<h5 id="美国的教育"><a href="#美国的教育" class="headerlink" title="美国的教育"></a>美国的教育</h5><p>美国教育又是怎么样的呢？答曰:美国的基础教育很差，但成年教育非常好，职业教育是规划特别好的。</p>
<p>为什么就成年教育最好呢？是因为美国是个移民国家，所有美国的教育最重要的好是因为美国是移民带来的，而不是它所谓的教育的优越性。它是享受了普鲁士的初期幼儿园这个教育成功的最后的收割者。</p>
<h3 id="二、教育的核心"><a href="#二、教育的核心" class="headerlink" title="二、教育的核心"></a>二、教育的核心</h3><p>2004年，美国的一个“死亡谷”，从不长一棵树，突然之间就下起了一场雨。这片沙漠从那天开始就逐渐长出来参天大树，自成一个生态圈。有一位科学家去考察，说这里的环境就适合长出花草树木。教育也同样如此，需要一个环境，什么环境就适合长什么。国内有个比喻，老师就像辛勤园丁一样。老师的作用是帮助健康的树苗茁壮的成长，进而帮助它选择合适的环境。</p>
<h6 id="教育的作用"><a href="#教育的作用" class="headerlink" title="教育的作用"></a>教育的作用</h6><p><strong>教育的作用是认知文明和创造文明的</strong>。从普鲁士教育到芬兰教育的转变，代表着文明的进化。第一次工业文明的主流是普鲁士教育，第二次工业文明的教育以芬兰为主。第一次工业文明需要的是廉价的劳动力，第二次工业文明需要的是创新型的人才。每一次文明的进化是伴随着教育的改变，相辅相成的。</p>
<h6 id="教育的终极目的"><a href="#教育的终极目的" class="headerlink" title="教育的终极目的"></a>教育的终极目的</h6><p>高中时期，我班主任在课堂讲素质教育的时候，极其狂妄的说：”就算是大学的教授来也讲不明白什么是素质教育“！这里就引发我的思考，教育的终极目的是什么？今天我可以回复我班主任当时的素质教育的问题了，教育的终极目的是，”<strong>分真假，辨善恶，知荣辱，识廉耻</strong>“！这十二个字也是我对素质教育的诠释。</p>
<p>当今社会的教育都是功能性教育、欲望的教育和欲望满足的工具。每当我和别人交流的时候，他们的嘴里只会吐出“搞钱”两个字。但你要是问他，财富从何而来？谈话就戛然而止了。<strong>这个世界是很现实的，它也很客观、很科学、也很公平。所有的爱和情、金钱、尊严，它只追求强者；只跟高尚者，只跟有信仰的人、有理想的人；它只往高处走，不往低处流</strong>。一个人连财富的来源都不明白，怎么能搞得到钱呢？就算你偶然之间天降横财，你能守得住吗？我曾经看过一篇报道中彩票的人大多最后面的结局是妻离子散，家破人亡。所以你没有钱是老天对你的一种保护！</p>
<h6 id="第三次世界文明即将诞生"><a href="#第三次世界文明即将诞生" class="headerlink" title="第三次世界文明即将诞生"></a>第三次世界文明即将诞生</h6><p>第一次工业文明的教育是以普鲁士教育为主，第二次工业文明开始倒向芬兰式教育，也就是通识教育。目前新的教育体系已经开始显露出来了，就是教育的终极目的”<strong>分真假，辨善恶，知荣辱，识廉耻</strong>“。</p>
<p><strong>未完待续…….</strong></p>
]]></content>
      <categories>
        <category>三千世界</category>
      </categories>
  </entry>
  <entry>
    <title>详解缓存穿透、缓存雪崩、缓存击穿</title>
    <url>/2022/08/17/%E9%80%9A%E5%BE%80java%E4%B9%8B%E8%B7%AF/006-%E8%AF%A6%E8%A7%A3%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>导语</strong>：在《通往java之路》这个栏目，我不想表现出更多的功利主义。我希望在这个栏目中每一篇文章都有很强的可读性和趣味性，能让我闲暇之时也能好好的阅读。</p>
<span id="more"></span>

<p><strong>正文</strong>：当我们使用缓存时，目标通常有两个：第一，提升响应效率和并发量；第二，减轻数据库的压力。<strong>缓存穿透</strong>、<strong>缓存雪崩</strong>和<strong>缓存击穿</strong>的发生，都是因为在某些特殊情况下，缓存失去了预期的功能所致。当缓存失效或没有抵挡住流量，流量直接涌入到数据库，在高并发的情况下，可能直接击垮数据库，导致整个系统崩溃！</p>
<h3 id="一、什么叫缓存穿透？"><a href="#一、什么叫缓存穿透？" class="headerlink" title="一、什么叫缓存穿透？"></a>一、什么叫缓存穿透？</h3><h5 id="缓存穿透的定义"><a href="#缓存穿透的定义" class="headerlink" title="缓存穿透的定义"></a>缓存穿透的定义</h5><p>用户访问的数据既不在缓存当中，也不在数据库中。出于容错的考虑，如果从底层数据库查询不到数据，则不写入缓存。这就导致每次请求都会到底层数据库进行查询，缓存也失去了意义。当高并发或有人利用不存在的Key频繁攻击时，数据库的压力骤增，甚至崩溃，这就是<strong>缓存穿透</strong>！</p>
<p><strong>造成缓存穿透的场景一般有两类</strong>：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(1)</span>原来数据是存在的，但由于某些原因（误删除、主动清理等）在缓存和数据库层面被删除了，但前端或前置的应用程序依旧保有这些数据；</span><br><span class="line"></span><br><span class="line"><span class="comment">(2)</span>恶意攻击行为，利用不存在的Key或者恶意尝试导致产生大量不存在的业务数据请求</span><br></pre></td></tr></table></figure>

<h5 id="常用的解决方案"><a href="#常用的解决方案" class="headerlink" title="常用的解决方案"></a>常用的解决方案</h5><h6 id="方案一：缓存空值（null）或默认值"><a href="#方案一：缓存空值（null）或默认值" class="headerlink" title="方案一：缓存空值（null）或默认值"></a>方案一：缓存空值（null）或默认值</h6><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">分析业务请求，如果是正常业务请求时发生缓存穿透现象，可针对相应的业务数据，在数据库查询不存在时，将其缓存为空值（<span class="built_in">null</span>）或默认值。需要注意的是，针对空值的缓存失效时间不宜过长，一般设置为<span class="number">5</span>分钟之内。当数据库被写入或更新该<span class="built_in">key</span>的新数据时，缓存必须同时被刷新，避免数据不一致。</span><br></pre></td></tr></table></figure>



<h6 id="方案二：业务逻辑前置校验"><a href="#方案二：业务逻辑前置校验" class="headerlink" title="方案二：业务逻辑前置校验"></a>方案二：业务逻辑前置校验</h6><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">在业务请求的入口处进行数据合法性校验，检查请求参数是否合理、是否包含非法值、是否恶意请求等，提前有效阻断非法请求。比如，根据年龄查询时，请求的年龄为<span class="string">-10</span>岁，这显然是不合法的请求参数，直接在参数校验时进行判断返回。</span><br></pre></td></tr></table></figure>



<h6 id="方案三：使用布隆过滤器请求白名单"><a href="#方案三：使用布隆过滤器请求白名单" class="headerlink" title="方案三：使用布隆过滤器请求白名单"></a>方案三：使用布隆过滤器请求白名单</h6><figure class="highlight"><table><tr><td class="code"><pre><span class="line">在写入数据时，使用布隆过滤器进行标记（相当于设置白名单），业务请求发现缓存中无对应数据时，可先通过查询布隆过滤器判断数据是否在白名单内，如果不在白名单内，则直接返回空或失败。</span><br></pre></td></tr></table></figure>



<h6 id="方案四：用户黑名单限制"><a href="#方案四：用户黑名单限制" class="headerlink" title="方案四：用户黑名单限制"></a>方案四：用户黑名单限制</h6><figure class="highlight"><table><tr><td class="code"><pre><span class="line">当发生异常情况时，实时监控访问的对象和数据，分析用户行为，针对故意请求、爬虫或攻击者，进行特定用户的限制；</span><br></pre></td></tr></table></figure>

<h3 id="二、什么叫缓存雪崩？"><a href="#二、什么叫缓存雪崩？" class="headerlink" title="二、什么叫缓存雪崩？"></a>二、什么叫缓存雪崩？</h3><h5 id="缓存雪崩的定义"><a href="#缓存雪崩的定义" class="headerlink" title="缓存雪崩的定义"></a>缓存雪崩的定义</h5><p>当缓存中大量热点缓存采用了相同的实效时间，就会导致缓存在某一个时刻同时失效，请求全部转发到数据库，从而导致数据库压力骤增，甚至宕机。从而形成一系列的连锁反应，造成系统崩溃等情况，这就是<strong>缓存雪崩</strong>！由于某些原因导致缓存服务宕机、挂掉或不响应，也同样会导致流量直接转移到数据库。</p>
<p>缓存雪崩的场景通常有两个:</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(1)</span>大量热点key同时过期；</span><br><span class="line"><span class="comment">(2)</span>缓存服务故障；</span><br></pre></td></tr></table></figure>

<h5 id="缓存雪崩的解决方案"><a href="#缓存雪崩的解决方案" class="headerlink" title="缓存雪崩的解决方案"></a>缓存雪崩的解决方案</h5><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、通常的解决方案是将<span class="keyword">key</span>的过期时间后面加上一个随机数（比如随机<span class="number">1</span>-<span class="number">5</span>分钟），让<span class="keyword">key</span>均匀的失效。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、考虑用队列或者锁的方式，保证缓存单线程写，但这种方案可能会影响并发量。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、热点数据可以考虑不失效，后台异步更新缓存，适用于不严格要求缓存一致性的场景。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、双<span class="keyword">key</span>策略，主<span class="keyword">key</span>设置过期时间，备<span class="keyword">key</span>不设置过期时间，当主<span class="keyword">key</span>失效时，直接返回备<span class="keyword">key</span>值。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、构建缓存高可用集群（针对缓存服务故障情况）。</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、当缓存雪崩发生时，服务熔断、限流、降级等措施保障。</span><br></pre></td></tr></table></figure>

<h3 id="三、什么叫缓存击穿"><a href="#三、什么叫缓存击穿" class="headerlink" title="三、什么叫缓存击穿?"></a>三、什么叫缓存击穿?</h3><h5 id="缓存击穿的定义"><a href="#缓存击穿的定义" class="headerlink" title="缓存击穿的定义"></a>缓存击穿的定义</h5><p>缓存雪崩是指只大量热点key同时失效的情况，如果是单个热点key，在不停的扛着大并发，在这个key失效的瞬间，持续的大并发请求就会击破缓存，直接请求到数据库，好像蛮力击穿一样。这种情况就是<strong>缓存击穿</strong>!</p>
<p>从定义上可以看出，缓存击穿和缓存雪崩很类似，只不过是缓存击穿是一个热点key失效，而缓存雪崩是大量热点key失效。因此，可以将缓存击穿看作是缓存雪崩的一个子集</p>
<h5 id="缓存击穿的解决方案"><a href="#缓存击穿的解决方案" class="headerlink" title="缓存击穿的解决方案:"></a>缓存击穿的解决方案:</h5><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、使用互斥锁（Mutex <span class="keyword">Key</span>），只让一个线程构建缓存，其他线程等待构建缓存执行完毕，重新从缓存中获取数据。单机通过synchronized或lock来处理，分布式环境采用分布式锁。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、热点数据不设置过期时间，后台异步更新缓存，适用于不严格要求缓存一致性的场景。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、”提前“使用互斥锁（Mutex <span class="keyword">Key</span>）：在value内部设置一个比缓存（Redis）过期时间短的过期时间标识，当异步线程发现该值快过期时，马上延长内置的这个时间，并重新从数据库加载数据，设置到缓存中去。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>通往java之路</category>
      </categories>
  </entry>
  <entry>
    <title>胡适给儿子的一封信</title>
    <url>/2022/08/17/%E4%B8%89%E5%8D%83%E4%B8%96%E7%95%8C/004-%E8%83%A1%E9%80%82%E7%BB%99%E5%84%BF%E5%AD%90%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我养育你，并非恩情，</p>
<p>只是血缘使然的生物本能。</p>
<p>所以，我既然无恩于你，</p>
<p>你便无需报答我。</p>
<p>反而，我要感谢你，</p>
<p>因为有你的参与，我的生命才更完整。</p>
<p>我只是碰巧成为了你的父亲，</p>
<p>你只是碰巧成为了我的女儿和儿子。</p>
<p>我不是你的前传，</p>
<p>你也不是我的续篇。</p>
<p>你是独立的个体，</p>
<p>是与我不同的灵魂。</p>
<p>你并不因我而来，</p>
<p>你是因对生命的渴望而来。</p>
<p>你是自由的，我是爱你的。</p>
<p>但我绝不会“以爱之名”，去掌控你的人生。</p>
]]></content>
      <categories>
        <category>三千世界</category>
      </categories>
      <tags>
        <tag>教育</tag>
      </tags>
  </entry>
</search>
